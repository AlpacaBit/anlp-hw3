[
    {
        "slug": "length-of-longest-fibonacci-subsequence",
        "description": "A sequence x1, x2, ..., xn is Fibonacci-like if:\n\nn >= 3\nxi + xi+1 == xi+2 for all i + 2 <= n\n\nGiven a strictly increasing array arr of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of arr. If one does not exist, return 0.\nA subsequence is derived from another sequence arr by deleting any number of elements (including none) from arr, without changing the order of the remaining elements. For example, [3, 5, 8] is a subsequence of [3, 4, 5, 6, 7, 8].",
        "examples": [
            "Input: arr = [1,2,3,4,5,6,7,8]\nOutput: 5\nExplanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].",
            "Input: arr = [1,3,7,11,12,14,18]\nOutput: 3\nExplanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18]."
        ],
        "constraints": "3 <= arr.length <= 1000\n1 <= arr[i] < arr[i + 1] <= 109",
        "release_time": 1667708738,
        "oracle_code": "class Solution {\npublic:\n  int f(int curr,int prev,vector<int>& nums,int n){\n\t\t\tint t=nums[curr]+nums[prev];\n\t\t\tint i=lower_bound(nums.begin(),nums.end(),t)-nums.begin();\n\t\t\tif(i<n && nums[i]==t) return 1+f(i,curr,nums,n);\n\t\t\treturn 1;\n\t\t}\n\n\t\tint lenLongestFibSubseq(vector<int>& nums) {\n\t\t\tint n=nums.size();\n\t\t\tint maxi=0;\n\t\t\tfor(int prev2=0;prev2<n;prev2++){\n\t\t\t\tfor(int prev1=prev2+1;prev1<n;prev1++){\n\t\t\t\t\tint temp=nums[prev1]+nums[prev2];\n\t\t\t\t\tint ind=lower_bound(nums.begin(),nums.end(),temp)-nums.begin();\n\t\t\t\t\tif(ind<n && nums[ind]==temp) maxi=max(maxi,2+f(ind,prev1,nums,n));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn maxi;\n\t\t}\n\t};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n  int f(int curr,int prev,vector<int>& nums,int n){\\n\\t\\t\\tint t=nums[curr]+nums[prev];\\n\\t\\t\\tint i=lower_bound(nums.begin(),nums.end(),t)-nums.begin();\\n\\t\\t\\tif(i<n && nums[i]==t) return 1+f(i,curr,nums,n);\\n\\t\\t\\treturn 1;\\n\\t\\t}\\n\\n\\t\\tint lenLongestFibSubseq(vector<int>& nums) {\\n\\t\\t\\tint n=nums.size();\\n\\t\\t\\tint maxi=0;\\n\\t\\t\\tfor(int prev2=0;prev2<n;prev2++){\\n\\t\\t\\t\\tfor(int prev1=prev2+1;prev1<n;prev1++){\\n\\t\\t\\t\\t\\tint temp=nums[prev1]+nums[prev2];\\n\\t\\t\\t\\t\\tint ind=lower_bound(nums.begin(),nums.end(),temp)-nums.begin();\\n\\t\\t\\t\\t\\tif(ind<n && nums[ind]==temp) maxi=max(maxi,2+f(ind,prev1,nums,n));\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn maxi;\\n\\t\\t}\\n\\t};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n  int f(int curr,int prev,vector<int>& nums,int n){\n\t\t\tint t=nums[curr]+nums[prev];\n\t\t\tint i=del nums.begin(),nums.end(),t)-nums.begin();\n\t\t\tif(i<n && nums[i]==t) return 1+f(i,curr,nums,n);\n\t\t\treturn 1;\n\t\t}\n\n\t\tint lenLongestFibSubseq(vector<int>& nums) {\n\t\t\tint n=nums.size();\n\t\t\tint maxi=0;\n\t\t\tfor(int prev2=0;prev2<n;prev2++){\n\t\t\t\tfor(int prev1=prev2+1;prev1<n;prev1++){\n\t\t\t\t\tint temp=nums[prev1]+nums[prev2];\n\t\t\t\t\tint ind=lower_bound(nums.begin(),nums.end(),temp)-nums.begin();\n\t\t\t\t\tif(ind<n && nums[ind]==temp) maxi=max(maxi,2+f(ind,prev1,nums,n));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn maxi;\n\t\t}\n\t};\n",
        "explanations": "\n'del' is not recognized as a valid keyword or function in the cpp language.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int f(int curr,int prev,vector<int>& nums,int n){\n        int t=nums[curr]+nums[prev];\n        auto it = lower_bound(nums.begin(),nums.end(),t);\n        if(it!=nums.end() && *it==t) return 1+f(distinct(curr,prev),curr,nums,n);\n        return 1;\n    }\n\n    int lenLongestFibSubseq(vector<int>& nums) {\n        int n=nums.size();\n        int maxi=0;\n        for(int prev2=0;prev2<n;prev2++){\n            for(int prev1=prev2+1;prev1<n;prev1++){\n                int temp=nums[prev1]+nums[prev2];\n                auto it = lower_bound(nums.begin(),nums.end(),temp);\n                if(it!=nums.end() && *it==temp) maxi=max(maxi,2+f(distinct(prev2,prev1),prev1,nums,n));\n            }\n        }\n        return maxi;\n    }\n\n    int distinct(int a, int b){\n        return (a<b)? a : b;\n    }\n};\n",
        "fixing_exp": "\nFixed the bug by replacing `del` with `lower_bound` and adding `distinct` function to find the smaller of two indices",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 15,
            "lang": "cpp",
            "run_success": false,
            "runtime_error": "Line 4: AddressSanitizer: stack-overflow on address 0x7fff5bc0bff8 (pc 0x5587d23f7c78 bp 0x7fff5bc0c010 sp 0x7fff5bc0c000 T0)",
            "full_runtime_error": "Line 4:\nAddressSanitizer:DEADLYSIGNAL\n=================================================================\n==22==ERROR: AddressSanitizer: stack-overflow on address 0x7fff5bc0bff8 (pc 0x5587d23f7c78 bp 0x7fff5bc0c010 sp 0x7fff5bc0c000 T0)\n    #0 0x5587d23f7c78 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4\n    #1 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #2 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #3 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #4 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #5 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #6 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #7 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #8 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #9 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #10 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #11 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #12 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #13 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #14 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #15 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #16 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #17 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #18 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #19 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #20 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #21 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #22 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #23 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #24 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #25 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #26 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #27 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #28 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #29 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #30 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #31 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #32 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #33 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #34 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #35 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #36 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #37 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #38 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #39 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #40 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #41 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #42 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #43 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #44 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #45 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #46 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #47 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #48 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #49 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #50 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #51 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #52 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #53 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #54 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #55 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #56 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #57 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #58 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #59 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #60 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #61 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #62 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #63 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #64 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #65 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #66 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #67 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #68 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #69 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #70 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #71 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #72 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #73 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #74 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #75 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #76 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #77 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #78 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #79 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #80 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #81 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #82 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #83 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #84 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #85 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #86 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #87 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #88 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #89 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #90 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #91 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #92 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #93 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #94 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #95 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #96 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #97 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #98 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #99 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #100 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #101 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #102 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #103 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #104 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #105 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #106 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #107 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #108 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #109 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #110 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #111 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #112 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #113 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #114 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #115 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #116 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #117 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #118 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #119 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #120 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #121 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #122 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #123 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #124 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #125 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #126 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #127 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #128 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #129 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #130 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #131 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #132 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #133 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #134 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #135 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #136 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #137 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #138 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #139 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #140 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #141 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #142 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #143 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #144 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #145 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #146 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #147 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #148 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #149 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #150 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #151 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #152 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #153 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #154 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #155 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #156 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #157 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #158 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #159 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #160 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #161 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #162 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #163 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #164 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #165 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #166 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #167 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #168 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #169 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #170 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #171 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #172 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #173 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #174 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #175 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #176 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #177 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #178 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #179 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #180 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #181 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #182 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #183 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #184 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #185 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #186 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #187 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #188 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #189 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #190 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #191 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #192 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #193 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #194 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #195 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #196 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #197 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #198 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #199 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #200 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #201 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #202 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #203 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #204 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #205 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #206 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #207 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #208 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #209 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #210 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #211 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #212 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #213 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #214 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #215 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #216 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #217 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #218 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #219 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #220 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #221 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #222 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #223 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #224 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #225 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #226 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #227 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #228 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #229 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #230 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #231 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #232 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #233 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #234 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #235 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #236 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #237 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #238 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #239 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #240 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #241 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #242 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #243 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #244 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #245 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\n    #246 0x5587d23f7dc8 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int) solution.cpp:4:47\nSUMMARY: AddressSanitizer: stack-overflow solution.cpp:4 in Solution::f(int, int, std::vector<int, std::allocator<int>>&, int)\n==22==ABORTING",
            "status_runtime": "N/A",
            "memory": 106572000,
            "question_id": "905",
            "elapsed_time": 206,
            "compare_result": "000000000000000000000000000000000000000000000000000000000",
            "code_output": "",
            "std_output": "",
            "last_testcase": "[1,2,3,4,5,6,7,8]",
            "expected_output": "5",
            "task_finish_time": 1742928380989,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 0,
            "total_testcases": 57,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586017950",
            "status_msg": "Runtime Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "min-cost-climbing-stairs",
        "description": "You are given an integer array cost where cost[i] is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.\nYou can either start from the step with index 0, or the step with index 1.\nReturn the minimum cost to reach the top of the floor.",
        "examples": [
            "Input: cost = [10,15,20]\nOutput: 15\nExplanation: You will start at index 1.\n- Pay 15 and climb two steps to reach the top.\nThe total cost is 15.",
            "Input: cost = [1,100,1,1,1,100,1,1,100,1]\nOutput: 6\nExplanation: You will start at index 0.\n- Pay 1 and climb two steps to reach index 2.\n- Pay 1 and climb two steps to reach index 4.\n- Pay 1 and climb two steps to reach index 6.\n- Pay 1 and climb one step to reach index 7.\n- Pay 1 and climb two steps to reach index 9.\n- Pay 1 and climb one step to reach the top.\nThe total cost is 6."
        ],
        "constraints": "2 <= cost.length <= 1000\n0 <= cost[i] <= 999",
        "release_time": 1690306963,
        "oracle_code": "class Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n\n        for(int i=2; i<n; i++){\n            cost[i] = min(cost[i-1],cost[i-2]) + cost[i];\n        }\n\n        return min(cost[n-1],cost[n-2]);\n    }\n};",
        "content": "\\n# Approach\\nDynamic Programming without using any extra memory. Modifying the given array itself.\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minCostClimbingStairs(vector<int>& cost) {\\n        int n = cost.size();\\n\\n        for(int i=2; i<n; i++){\\n            cost[i] = min(cost[i-1],cost[i-2]) + cost[i];\\n        }\\n\\n        return min(cost[n-1],cost[n-2]);\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = len(cost);\n\n        for(int i=2; i<n; i++){\n            cost[i] = min(cost[i-1],cost[i-2]) + cost[i];\n        }\n\n        return min(cost[n-1],cost[n-2]);\n    }\n};\n",
        "explanations": "\nI replaced cost.size() with len(cost). 'len' isn't defined in C++, causing a syntax error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int minCostClimbingStairs(vector<int>& cost) {\n        int n = cost.size();\n\n        for(int i=2; i<n; i++){\n            cost[i] = min(cost[i-1],cost[i-2]) + cost[i-1];\n        }\n\n        return min(cost[n-1],cost[n-2]);\n    }\n};\n",
        "fixing_exp": "\nFixed the bug by replacing \"len\" with \"size\" and subtracting 1 from index in cost[i] calculation",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 15044000,
            "question_id": "747",
            "elapsed_time": 18,
            "compare_result": "101111100010001000000011111000100000000000111110000000000000001111111110001000100000000111010001000000000001110100000000000000011111111000100010000000011101000100000000000011001000000000000000111111100010001000000001110100010000000000001100100000000000000001100000000000000000000000000",
            "code_output": "2113",
            "std_output": "",
            "last_testcase": "[1,100,1,1,1,100,1,1,100,1]",
            "expected_output": "6",
            "task_finish_time": 1742928390734,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 76,
            "total_testcases": 285,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586018147",
            "input_formatted": "[1,100,1,1,1,100,1,1,100,1]",
            "input": "[1,100,1,1,1,100,1,1,100,1]",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "check-if-point-is-reachable",
        "description": "There exists an infinitely large grid. You are currently at point (1, 1), and you need to reach the point (targetX, targetY) using a finite number of steps.\nIn one step, you can move from point (x, y) to any one of the following points:\n\n(x, y - x)\n(x - y, y)\n(2 * x, y)\n(x, 2 * y)\n\nGiven two integers targetX and targetY representing the X-coordinate and Y-coordinate of your final position, return true if you can reach the point from (1, 1) using some number of steps, and false otherwise.",
        "examples": [
            "Input: targetX = 6, targetY = 9\nOutput: false\nExplanation: It is impossible to reach (6,9) from (1,1) using any sequence of moves, so false is returned.",
            "Input: targetX = 4, targetY = 7\nOutput: true\nExplanation: You can follow the path (1,1) -> (1,2) -> (1,4) -> (1,8) -> (1,7) -> (2,7) -> (4,7)."
        ],
        "constraints": "1 <= targetX, targetY\u00a0<= 109",
        "release_time": 1674372109,
        "oracle_code": "class Solution {\npublic:\n    bool isReachable(int x, int y) {\n        while(!(x&1)){\n            x >>= 1;\n        }\n        while(!(y&1)){\n            y >>= 1;\n        }\n        return __gcd(x,y)==1;\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    bool isReachable(int x, int y) {\\n        while(!(x&1)){\\n            x >>= 1;\\n        }\\n        while(!(y&1)){\\n            y >>= 1;\\n        }\\n        return __gcd(x,y)==1;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    bool isReachable(int x, int y) {\n        while(!(x&1)){\n            x >>= 1;\n        }\n        while(!(y&1)){\n            y >>= 1;\n        }\n        return max(x,y)==1;\n    }\n};\n",
        "explanations": "\n__gcd is replaced by max, which doesn't ensure checking for greatest common divisor.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    bool isReachable(int x, int y) {\n        while(x > 1 && (x & 1) == 0){\n            x >>= 1;\n        }\n        while(y > 1 && (y & 1) == 0){\n            y >>= 1;\n        }\n        return x <= 1 || y <= 1;\n    }\n};\n",
        "fixing_exp": "\nThe bug is that the conditions are incorrect. It should check if the number can be divided by 2 until it becomes 1, not just checking for odd/even numbers",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 7820000,
            "display_runtime": "0",
            "question_id": "2635",
            "elapsed_time": 10,
            "compare_result": "111101001101001110000000001000000001000010100010000100000101",
            "code_output": "false",
            "std_output": "",
            "last_testcase": "3\n7",
            "expected_output": "true",
            "task_finish_time": 1742928400816,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 19,
            "total_testcases": 60,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586018321",
            "input_formatted": "3, 7",
            "input": "3\n7",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "add-strings",
        "description": "Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.\nYou must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly.",
        "examples": [
            "Input: num1 = \"11\", num2 = \"123\"\nOutput: \"134\"",
            "Input: num1 = \"456\", num2 = \"77\"\nOutput: \"533\"",
            "Input: num1 = \"0\", num2 = \"0\"\nOutput: \"0\""
        ],
        "constraints": "1 <= num1.length, num2.length <= 104\nnum1 and num2 consist of only digits.\nnum1 and num2 don't have any leading zeros except for the zero itself.",
        "release_time": 1688037697,
        "oracle_code": "class Solution {\npublic:\n    string addStrings(string a, string b) {\n        string ret = \"\" ;\n        int carry = 0, i = a.size() - 1, j = b.size() - 1;\n        while( i >= 0 || j >= 0 ){\n            int x = i >= 0 ? a[i--] - '0' : 0 ;\n            int y = j >= 0 ? b[j--] - '0' : 0 ;\n\n            int sm = x + y + carry ;\n            ret.push_back( '0' + (sm % 10) ) ;\n            carry = sm/10;\n        }\n        if(carry)\n            ret.push_back('0' + carry ) ;\n        \n        reverse( ret.begin(), ret.end() ) ;\n\n        return ret ;\n    }\n};",
        "content": "# Intuition\\nSimple solution will be to do the basice math, and simulate the digits from the back\\n\\n# Approach\\n- We\\'ll start with the ends of both strings, and in each iteration (till we\\'ve iterated all the strings), we\\'ll fetch the last digit from the $$nums1$$, $$nums2$$ if not available we\\'ll default to 0.\\n\\n- Then we\\'ll sum the digits and also add the carry from the last iteration,\\n\\n- Then we\\'ll push the sum modulo 10 to the answer string.\\n\\n- Also dont forget to update the carry variable.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(n)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string addStrings(string a, string b) {\\n        string ret = \"\" ;\\n        int carry = 0, i = a.size() - 1, j = b.size() - 1;\\n        while( i >= 0 || j >= 0 ){\\n            int x = i >= 0 ? a[i--] - \\'0\\' : 0 ;\\n            int y = j >= 0 ? b[j--] - \\'0\\' : 0 ;\\n\\n            int sm = x + y + carry ;\\n            ret.push_back( \\'0\\' + (sm % 10) ) ;\\n            carry = sm/10;\\n        }\\n        if(carry)\\n            ret.push_back(\\'0\\' + carry ) ;\\n        \\n        reverse( ret.begin(), ret.end() ) ;\\n\\n        return ret ;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    str addStrings(string a, string b) {\n        str ret = \"\" ;\n        int carry = 0, i = a.size() - 1, j = b.size() - 1;\n        while( i >= 0 || j >= 0 ){\n            int x = i >= 0 ? a[i--] - '0' : 0 ;\n            int y = j >= 0 ? b[j--] - '0' : 0 ;\n\n            int sm = x + y + carry ;\n            ret.push_back( '0' + (sm % 10) ) ;\n            carry = sm/10;\n        }\n        if(carry)\n            ret.push_back('0' + carry ) ;\n        \n        reverse( ret.begin(), ret.end() ) ;\n\n        return ret ;\n    }\n};\n",
        "explanations": "\nstr type isn't defined in C++, it's a keyword in Python not C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    string addStrings(string a, string b) {\n        string ret = \"\" ;\n        int carry = 0, i = a.size() - 1, j = b.size() - 1;\n        while( i >= 0 || j >= 0 ){\n            int x = i >= 0 ? a[i--] - '0' : 0 ;\n            int y = j >= 0 ? b[j--] - '0' : 0 ;\n\n            int sm = x + y + carry ;\n            ret.push_back( '0' + (sm % 10) ) ;\n            carry = sm/10;\n        }\n        if(carry)\n            ret.push_back('0' + carry ) ;\n        \n        reverse( ret.begin(), ret.end() ) ;\n\n        return ret ;\n    }\n};\n",
        "fixing_exp": "\nThe bug was that the type of 'str' was not defined, it should be changed to 'string'",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 9124000,
            "display_runtime": "0",
            "question_id": "415",
            "elapsed_time": 14,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928410893,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 317,
            "total_testcases": 317,
            "runtime_percentile": 100,
            "status_memory": "9.1 MB",
            "memory_percentile": 61.90029999999999,
            "pretty_lang": "C++",
            "submission_id": "1586018504",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "count-all-possible-routes",
        "description": "You are given an array of distinct positive integers locations where locations[i] represents the position of city i. You are also given integers start, finish and fuel representing the starting city, ending city, and the initial amount of fuel you have, respectively.\nAt each step, if you are at city i, you can pick any city j such that j != i and 0 <= j < locations.length and move to city j. Moving from city i to city j reduces the amount of fuel you have by |locations[i] - locations[j]|. Please notice that |x| denotes the absolute value of x.\nNotice that fuel cannot become negative at any point in time, and that you are allowed to visit any city more than once (including start and finish).\nReturn the count of all possible routes from start to finish. Since the answer may be too large, return it modulo 109 + 7.",
        "examples": [
            "Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\nOutput: 4\nExplanation: The following are all possible routes, each uses 5 units of fuel:\n1 -> 3\n1 -> 2 -> 3\n1 -> 4 -> 3\n1 -> 4 -> 2 -> 3",
            "Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6\nOutput: 5\nExplanation: The following are all possible routes:\n1 -> 0, used fuel = 1\n1 -> 2 -> 0, used fuel = 5\n1 -> 2 -> 1 -> 0, used fuel = 5\n1 -> 0 -> 1 -> 0, used fuel = 3\n1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5",
            "Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3\nOutput: 0\nExplanation: It is impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel."
        ],
        "constraints": "2 <= locations.length <= 100\n1 <= locations[i] <= 109\nAll integers in locations are distinct.\n0 <= start, finish < locations.length\n1 <= fuel <= 200",
        "release_time": 1687678873,
        "oracle_code": "class Solution {\n    private:\n    int mod = 7+1e9;\npublic:\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\n        vector<vector<int>>dp(locations.size()+1, vector<int>(fuel+1, -1));\n        return solve(locations, start, finish, fuel, dp);\n    }\n\n    int solve(vector<int>& locations, int current, int& finish, int currentfuel, vector<vector<int>>& dp)\n    {\n        int ans = 0;\n        if(current == finish)\n        {\n            ans = 1;\n        }\n        if(currentfuel == 0)\n        {\n            return ans;\n        }\n        if(dp[current][currentfuel] != -1)\n        {\n            return dp[current][currentfuel];\n        }\n        for(int i = 0;i < locations.size(); i++)\n        {\n            if(i != current && (currentfuel - abs(locations[current]-locations[i])) >= 0)\n            {\n                ans = (ans + (solve(locations, i, finish, currentfuel-abs(locations[current]-locations[i]), dp))%mod)%mod;\n            }\n        }\n        return dp[current][currentfuel] = ans%mod;\n    }\n};",
        "content": "# Intuition\\nWe have to count all possible routes and from any city we can go to all other cities so intution is to apply dynamic programming.\\n\\n# Approach\\nWe\\'ll maintain two changing variable at any recursion call. One will be the current city we are in and another will be current fuel that we have. We\\'ll intialize a variable ans which will be 0 if the current city is not the finish city. However if the current city is finish city then we initialize the ans variable to 1 as that path should be added to answer. Then  we\\'ll run a loop from city 0 to city 1 and if the city i is not equal to current city and if current fuel is more than the fuel needed to travel between those two cities then we\\'ll make a recursion call and add that answer from recursion call to the ans variable. In the end we\\'ll return ans variable.\\n\\nHowever we\\'ll have to memoize this solution because it will lead to repetitive recursion calls. For example we\\'ll be able to reach a particular city with multiple paths and be left with same fuel. So this will lead to repetitive calls. COnsider this array [1,2,3,5] and fuel = 10 and start city as 0. SO we\\'ll be able to reach city 2 via city 0->1->2 and left with 8 unit fuel. We can also reach city 2 via 0->2 and left with fuel 8. THis will lead to repetitive calls.\\n\\n\\n# Code\\n```\\nclass Solution {\\n    private:\\n    int mod = 7+1e9;\\npublic:\\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\\n        vector<vector<int>>dp(locations.size()+1, vector<int>(fuel+1, -1));\\n        return solve(locations, start, finish, fuel, dp);\\n    }\\n\\n    int solve(vector<int>& locations, int current, int& finish, int currentfuel, vector<vector<int>>& dp)\\n    {\\n        int ans = 0;\\n        if(current == finish)\\n        {\\n            ans = 1;\\n        }\\n        if(currentfuel == 0)\\n        {\\n            return ans;\\n        }\\n        if(dp[current][currentfuel] != -1)\\n        {\\n            return dp[current][currentfuel];\\n        }\\n        for(int i = 0;i < locations.size(); i++)\\n        {\\n            if(i != current && (currentfuel - abs(locations[current]-locations[i])) >= 0)\\n            {\\n                ans = (ans + (solve(locations, i, finish, currentfuel-abs(locations[current]-locations[i]), dp))%mod)%mod;\\n            }\\n        }\\n        return dp[current][currentfuel] = ans%mod;\\n    }\\n};\\n```\\n\\n**Do upvote if you understood it !\\uD83D\\uDE00**",
        "level": "hard",
        "buggy_code": "\nclass Solution {\n    private:\n    var mod = 7+1e9;\npublic:\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\n        vector<vector<int>>dp(locations.size()+1, vector<int>(fuel+1, -1));\n        return solve(locations, start, finish, fuel, dp);\n    }\n\n    int solve(vector<int>& locations, int current, int& finish, int currentfuel, vector<vector<int>>& dp)\n    {\n        int ans = 0;\n        if(current == finish)\n        {\n            ans = 1;\n        }\n        if(currentfuel == 0)\n        {\n            return ans;\n        }\n        if(dp[current][currentfuel] != -1)\n        {\n            return dp[current][currentfuel];\n        }\n        for(int i = 0;i < locations.size(); i++)\n        {\n            if(i != current && (currentfuel - abs(locations[current]-locations[i])) >= 0)\n            {\n                ans = (ans + (solve(locations, i, finish,currentfuel-abs(locations[current]-locations[i]), dp))%mod)%mod;\n            }\n        }\n        return dp[current][currentfuel] = ans%mod;\n    }\n};\n",
        "explanations": "\nvar is not a keyword in C++, it's usually used in JavaScript.\n",
        "fixed_code": "\nclass Solution {\nprivate:\n    const int mod = 1e9 + 7;\npublic:\n    int countRoutes(vector<int>& locations, int start, int finish, int fuel) {\n        vector<vector<int>>dp(locations.size()+1, vector<int>(fuel+1, -1));\n        return solve(locations, start, finish, fuel, dp);\n    }\n\n    int solve(vector<int>& locations, int current, int& finish, int currentfuel, vector<vector<int>>& dp)\n    {\n        int ans = 0;\n        if(current == finish)\n        {\n            ans = 1;\n        }\n        if(currentfuel == 0)\n        {\n            return ans;\n        }\n        if(dp[current][currentfuel] != -1)\n        {\n            return dp[current][currentfuel];\n        }\n        for(int i = 0;i < locations.size(); i++)\n        {\n            if(i != current && (currentfuel - abs(locations[current]-locations[i])) >= 0)\n            {\n                ans = (ans + solve(locations, i, finish,currentfuel-abs(locations[current]-locations[i]), dp))%mod;\n            }\n        }\n        return dp[current][currentfuel] = ans%mod;\n    }\n};\n",
        "fixing_exp": "\nThe bug was that the `var` keyword is not used in C++ and it should be replaced with `const int`",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "74 ms",
            "memory": 15928000,
            "display_runtime": "74",
            "question_id": "1680",
            "elapsed_time": 87,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928421758,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 109,
            "total_testcases": 109,
            "runtime_percentile": 47.661399999999986,
            "status_memory": "15.9 MB",
            "memory_percentile": 27.617099999999944,
            "pretty_lang": "C++",
            "submission_id": "1586018708",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
        "description": "You are given an array prices where prices[i] is the price of a given stock on the ith day, and an integer fee representing a transaction fee.\nFind the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.\nNote:\n\nYou may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).\nThe transaction fee is only charged once for each stock purchase and sale.",
        "examples": [
            "Input: prices = [1,3,2,8,4,9], fee = 2\nOutput: 8\nExplanation: The maximum profit can be achieved by:\n- Buying at prices[0] = 1\n- Selling at prices[3] = 8\n- Buying at prices[4] = 4\n- Selling at prices[5] = 9\nThe total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.",
            "Input: prices = [1,3,7,5,10,3], fee = 3\nOutput: 6"
        ],
        "constraints": "1 <= prices.length <= 5 * 104\n1 <= prices[i] < 5 * 104\n0 <= fee < 5 * 104",
        "release_time": 1687422999,
        "oracle_code": "class Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.size();\n        if (n <= 1) return 0;\n        int buy = -prices[0];\n        int sell = 0;\n        for (int i = 1; i < n; i++) {\n            int prevBuy = buy;\n            buy = max(buy, sell - prices[i]);\n            sell = max(sell, prevBuy + prices[i] - fee);\n        }\n        return sell;\n    }\n};",
        "content": "# Intuition\\nTo solve this problem, we can use a dynamic programming approach. \\n\\n# Approach\\nThe idea is to maintain two variables, buy and sell, which represent the maximum profit you can achieve if you have bought or sold the stock, respectively. Initially, buy is set to the negative of the first price, assuming we buy the stock on the first day. sell is set to zero because we haven\\'t sold any stock yet.\\n\\nThen, for each day starting from the second day, we update buy and sell as follows:\\n\\n- Update buy by taking the maximum value between the previous buy and the difference between sell and the current price (representing the profit we would make if we bought the stock on this day).\\n- Update sell by taking the maximum value between the previous sell and the sum of the previous buy and the current price minus the transaction fee (representing the profit we would make if we sold the stock on this day).\\n\\nFinally, the maximum profit we can achieve is stored in the sell variable, so we return its value.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxProfit(vector<int>& prices, int fee) {\\n        int n = prices.size();\\n        if (n <= 1) return 0;\\n        int buy = -prices[0];\\n        int sell = 0;\\n        for (int i = 1; i < n; i++) {\\n            int prevBuy = buy;\\n            buy = max(buy, sell - prices[i]);\\n            sell = max(sell, prevBuy + prices[i] - fee);\\n        }\\n        return sell;\\n    }\\n};\\n\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.length;\n        if (n <= 1) return 0;\n        int buy = -prices[0];\n        int sell = 0;\n        for (int i = 1; i < n; i++) {\n            int prevBuy = buy;\n            buy = max(buy, sell - prices[i]);\n            sell = max(sell, prevBuy + prices[i] - fee);\n        }\n        return sell;\n    }\n};\n",
        "explanations": "\nThe bug is the use of 'length' which is not a defined member of vector in C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int maxProfit(vector<int>& prices, int fee) {\n        int n = prices.size();\n        if (n <= 1) return 0;\n        int buy = -prices[0];\n        int sell = 0;\n        for (int i = 1; i < n; i++) {\n            int prevBuy = buy;\n            buy = max(buy, sell - prices[i]);\n            sell = max(sell, prevBuy + prices[i] - fee);\n        }\n        return sell;\n    }\n};\n",
        "fixing_exp": "\nCorrected the array size access from `length` to `size`",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 58928000,
            "display_runtime": "0",
            "question_id": "714",
            "elapsed_time": 93,
            "compare_result": "11111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928431685,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 44,
            "total_testcases": 44,
            "runtime_percentile": 100,
            "status_memory": "58.9 MB",
            "memory_percentile": 74.95660000000001,
            "pretty_lang": "C++",
            "submission_id": "1586018916",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "maximize-win-from-two-segments",
        "description": "There are some prizes on the X-axis. You are given an integer array prizePositions that is sorted in non-decreasing order, where prizePositions[i] is the position of the ith prize. There could be different prizes at the same position on the line. You are also given an integer k.\nYou are allowed to select two segments with integer endpoints. The length of each segment must be k. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.\n\nFor example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizePositions[i] <= 3 or 2 <= prizePositions[i] <= 4.\n\nReturn the maximum number of prizes you can win if you choose the two segments optimally.",
        "examples": [
            "Input: prizePositions = [1,1,2,2,3,3,5], k = 2\nOutput: 7\nExplanation: In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5].",
            "Input: prizePositions = [1,2,3,4], k = 0\nOutput: 2\nExplanation: For this example, one choice for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes."
        ],
        "constraints": "1 <= prizePositions.length <= 105\n1 <= prizePositions[i] <= 109\n0 <= k <= 109 \nprizePositions is sorted in non-decreasing order.",
        "release_time": 1675528605,
        "oracle_code": "class Solution \n{\npublic:\n    int maximizeWin(vector<int>& a, int k) \n    {\n        int n = a.size();\n        vector<pair<int, int>> b(n), s(n);\n        for (int i = 0; i < n; ++i)\n        {\n            int target = a[i] + k;\n            int idx = max(0, (int)(upper_bound(a.begin(), a.end(), target) - a.begin()) - 1);\n            b[i] = {i, idx};\n        }\n        \n        int mx = 0;\n        pair<int, int> curr;\n        for (int i = n - 1; i >= 0; --i)\n        {\n            if (b[i].second - b[i].first + 1 > mx)\n            {\n                mx = b[i].second - b[i].first + 1;\n                curr = {b[i].first, b[i].second}; \n            }\n            \n            s[i] = curr;\n        }\n        \n        int res = 1;\n        for (int i = 0; i < n; ++i)\n        {\n            int j = b[i].second;\n            \n            res = max(res, b[i].second - b[i].first + 1 + s[j].second - s[j].first + 1 - (s[j].first == b[i].second));\n        }\n        \n        return res;\n    }\n};",
        "content": "# Time Complexity: $$O(nlog(n))$$\\n\\n```\\nclass Solution \\n{\\npublic:\\n    int maximizeWin(vector<int>& a, int k) \\n    {\\n        int n = a.size();\\n        vector<pair<int, int>> b(n), s(n);\\n        for (int i = 0; i < n; ++i)\\n        {\\n            int target = a[i] + k;\\n            int idx = max(0, (int)(upper_bound(a.begin(), a.end(), target) - a.begin()) - 1);\\n            b[i] = {i, idx};\\n        }\\n        \\n        int mx = 0;\\n        pair<int, int> curr;\\n        for (int i = n - 1; i >= 0; --i)\\n        {\\n            if (b[i].second - b[i].first + 1 > mx)\\n            {\\n                mx = b[i].second - b[i].first + 1;\\n                curr = {b[i].first, b[i].second}; \\n            }\\n            \\n            s[i] = curr;\\n        }\\n        \\n        int res = 1;\\n        for (int i = 0; i < n; ++i)\\n        {\\n            int j = b[i].second;\\n            \\n            res = max(res, b[i].second - b[i].first + 1 + s[j].second - s[j].first + 1 - (s[j].first == b[i].second));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution \n{\npublic:\n    int maximizeWin(vector<int>& a, int k) \n    {\n        int n = a.size();\n        vector<pair<int, int>> b(n), s(n);\n        for (int i = 0; i < n; ++i)\n        {\n            int target = a[i] + k;\n            int idx = max(0, (int)(upper_bound(a.begin(), a.end(), target) - a.begin()) - 1);\n            delineate i, idx;\n            b[i] = {i, idx};\n        }\n        \n        int mx = 0;\n        pair<int, int> curr;\n        for (int i = n - 1; i >= 0; --i)\n        {\n            if (b[i].second - b[i].first + 1 > mx)\n            {\n                mx = b[i].second - b[i].first + 1;\n                curr = {b[i].first, b[i].second}; \n            }\n            \n            s[i] = curr;\n        }\n        \n        int res = 1;\n        for (int i = 0; i < n; ++i)\n        {\n            int j = b[i].second;\n            \n            res = max(res, b[i].second - b[i].first + 1 + s[j].second - s[j].first + 1 - (s[j].first == b[i].second));\n        }\n        \n        return res;\n    }\n};\n",
        "explanations": "\n\"delineate\" is not a keyword in C++ which makes the compiler throw an error.\n",
        "fixed_code": "\nclass Solution \n{\npublic:\n    int maximizeWin(vector<int>& a, int k) \n    {\n        sort(a.begin(), a.end());\n        int n = a.size();\n        vector<pair<int, int>> b(n), s(n);\n        for (int i = 0; i < n; ++i)\n        {\n            int target = a[i] + k;\n            int idx = max(0, (int)(upper_bound(a.begin(), a.end(), target) - a.begin()) - 1);\n            b[i] = {i, idx};\n        }\n        \n        int mx = 0;\n        pair<int, int> curr;\n        for (int i = n - 1; i >= 0; --i)\n        {\n            if (b[i].second - b[i].first + 1 > mx)\n            {\n                mx = b[i].second - b[i].first + 1;\n                curr = {b[i].first, b[i].second}; \n            }\n            \n            s[i] = curr;\n        }\n        \n        int res = 1;\n        for (int i = 0; i < n; ++i)\n        {\n            int j = b[i].second;\n            \n            res = max(res, b[i].second - b[i].first + 1 + s[j].second - s[j].first + 1 - (s[j].first == b[i].second));\n        }\n        \n        return res;\n    }\n};\n",
        "fixing_exp": "\nThe bug was that the vector b and s were not sorted before using, which could lead to incorrect results",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "36 ms",
            "memory": 67916000,
            "display_runtime": "36",
            "question_id": "2673",
            "elapsed_time": 143,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928443686,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 72,
            "total_testcases": 72,
            "runtime_percentile": 19.185700000000008,
            "status_memory": "67.9 MB",
            "memory_percentile": 17.44169999999996,
            "pretty_lang": "C++",
            "submission_id": "1586019153",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "frequency-tracker",
        "description": "Design a data structure that keeps track of the values in it and answers some queries regarding their frequencies.\nImplement the FrequencyTracker class.\n\nFrequencyTracker(): Initializes the FrequencyTracker object with an empty array initially.\nvoid add(int number): Adds number to the data structure.\nvoid deleteOne(int number): Deletes one occurrence of number from the data structure. The data structure may not contain number, and in this case nothing is deleted.\nbool hasFrequency(int frequency): Returns true if there is a number in the data structure that occurs frequency number of times, otherwise, it returns false.",
        "examples": [
            "Input\n[\"FrequencyTracker\", \"add\", \"add\", \"hasFrequency\"]\n[[], [3], [3], [2]]\nOutput\n[null, null, null, true]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.add(3); // The data structure now contains [3, 3]\nfrequencyTracker.hasFrequency(2); // Returns true, because 3 occurs twice",
            "Input\n[\"FrequencyTracker\", \"add\", \"deleteOne\", \"hasFrequency\"]\n[[], [1], [1], [1]]\nOutput\n[null, null, null, false]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.add(1); // The data structure now contains [1]\nfrequencyTracker.deleteOne(1); // The data structure becomes empty []\nfrequencyTracker.hasFrequency(1); // Returns false, because the data structure is empty",
            "Input\n[\"FrequencyTracker\", \"hasFrequency\", \"add\", \"hasFrequency\"]\n[[], [2], [3], [1]]\nOutput\n[null, false, null, true]\n\nExplanation\nFrequencyTracker frequencyTracker = new FrequencyTracker();\nfrequencyTracker.hasFrequency(2); // Returns false, because the data structure is empty\nfrequencyTracker.add(3); // The data structure now contains [3]\nfrequencyTracker.hasFrequency(1); // Returns true, because 3 occurs once"
        ],
        "constraints": "1 <= number <= 105\n1 <= frequency <= 105\nAt most, 2 *\u00a0105\u00a0calls will be made to add, deleteOne, and hasFrequency\u00a0in total.",
        "release_time": 1683432600,
        "oracle_code": "class FrequencyTracker {\npublic:\n    unordered_map<int,int> x,y;\n    void add(int number) {\n        x[number]++;\n        if(x[number]!=1) y[x[number]-1]--;\n        y[x[number]]++;\n    }\n    void deleteOne(int number) {\n        if(x[number]!=0){\n            x[number]--;\n            y[x[number]+1]--;\n            y[x[number]]++;\n        }\n    }\n    bool hasFrequency(int frequency) {\n        if(y[frequency]!=0) return true;\n        return false;\n    }\n};",
        "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass FrequencyTracker {\\npublic:\\n    unordered_map<int,int> x,y;\\n    void add(int number) {\\n        x[number]++;\\n        if(x[number]!=1) y[x[number]-1]--;\\n        y[x[number]]++;\\n    }\\n    void deleteOne(int number) {\\n        if(x[number]!=0){\\n            x[number]--;\\n            y[x[number]+1]--;\\n            y[x[number]]++;\\n        }\\n    }\\n    bool hasFrequency(int frequency) {\\n        if(y[frequency]!=0) return true;\\n        return false;\\n    }\\n};",
        "level": "medium",
        "buggy_code": "\nclass FrequencyTracker {\npublic:\n    unordered_map<int,int> x,y;\n    def add(number): \n        x[number]++;\n        if(x[number]!=1) y[x[number]-1]--;\n        y[x[number]]++;\n    def deleteOne(number): \n        if(x[number]!=0){\n            x[number]--;\n            y[x[number]+1]--;\n            y[x[number]]++;\n        }\n    def hasFrequency(frequency): \n        if(y[frequency]!=0) return true;\n        return false;\n};\n",
        "explanations": "\nThe bug is the use of 'def' keyword from Python to define methods, unrecognizable to C++.\n",
        "fixed_code": "\nclass FrequencyTracker {\npublic:\n    unordered_map<int,int> x, freqCount;\n    void add(int number){ \n        x[number]++;\n        if(x.count(number)!=1) freqCount[x[number]-1]--;\n        freqCount[x[number]]++;\n    }\n    void deleteOne(int number){ \n        if(x.count(number)!=0){\n            x[number]--;\n            freqCount[x[number]+1]--;\n            freqCount[x[number]]++;\n        }\n    }\n    bool hasFrequency(int frequency){ \n        return freqCount.count(frequency)!=0;\n    };\n",
        "fixing_exp": "\nAdded missing method modifiers (void) and corrected variable naming and initialization",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 153: Char 28: error: expected '}'",
            "full_compile_error": "Line 153: Char 28: error: expected '}'\n  153 | #pragma GCC optimize (\"O2\")\n      |                            ^\nLine 2: Char 24: note: to match this '{'\n    2 | class FrequencyTracker {\n      |                        ^",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "2778",
            "task_finish_time": 1742928453283,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586019341",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "kth-largest-element-in-a-stream",
        "description": "Design a class to find the kth largest element in a stream. Note that it is the kth largest element in the sorted order, not the kth distinct element.\nImplement KthLargest class:\n\nKthLargest(int k, int[] nums) Initializes the object with the integer k and the stream of integers nums.\nint add(int val) Appends the integer val to the stream and returns the element representing the kth largest element in the stream.",
        "examples": [
            "Input\n[\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\nOutput\n[null, 4, 5, 5, 8, 8]\n\nExplanation\nKthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\nkthLargest.add(3);   // return 4\nkthLargest.add(5);   // return 5\nkthLargest.add(10);  // return 5\nkthLargest.add(9);   // return 8\nkthLargest.add(4);   // return 8"
        ],
        "constraints": "1 <= k <= 104\n0 <= nums.length <= 104\n-104 <= nums[i] <= 104\n-104 <= val <= 104\nAt most 104 calls will be made to add.\nIt is guaranteed that there will be at least k elements in the array when you search for the kth element.",
        "release_time": 1684824347,
        "oracle_code": "class KthLargest {\npublic:\n    priority_queue<int,vector<int>,greater<int>> pq;\n    int position;\n    KthLargest(int k, vector<int>& nums) {\n        position=k;\n        for(int i=0; i<nums.size(); i++){\n            if(pq.size()<k){\n                pq.push(nums[i]);\n            }\n            else if(pq.top()<nums[i]){\n                pq.pop();\n                pq.push(nums[i]);\n            }\n        }\n    }\n    \n    int add(int val) {\n        if(pq.size()<position){\n            pq.push(val);\n        }\n        else if(pq.top()<val){\n            pq.pop();\n            pq.push(val);\n        }\n        return pq.top();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass KthLargest {\\npublic:\\n    priority_queue<int,vector<int>,greater<int>> pq;\\n    int position;\\n    KthLargest(int k, vector<int>& nums) {\\n        position=k;\\n        for(int i=0; i<nums.size(); i++){\\n            if(pq.size()<k){\\n                pq.push(nums[i]);\\n            }\\n            else if(pq.top()<nums[i]){\\n                pq.pop();\\n                pq.push(nums[i]);\\n            }\\n        }\\n    }\\n    \\n    int add(int val) {\\n        if(pq.size()<position){\\n            pq.push(val);\\n        }\\n        else if(pq.top()<val){\\n            pq.pop();\\n            pq.push(val);\\n        }\\n        return pq.top();\\n    }\\n};\\n\\n/**\\n * Your KthLargest object will be instantiated and called as such:\\n * KthLargest* obj = new KthLargest(k, nums);\\n * int param_1 = obj->add(val);\\n */\\n```",
        "level": "easy",
        "buggy_code": "\nclass KthLargest {\npublic:\n    priority_queue<int,vector<int>,greater<int>> pq;\n    int position;\n    KthLargest(int k, vector<int>& nums) {\n        position = k;\n        for(int i = 0; i < nums.size(); i++){\n            if(pq.size() < k){\n                pq.push(nums[i]);\n            }\n            else if(pq.peek() < nums[i]){\n                pq.pop();\n                pq.push(nums[i]);\n            }\n        }\n    }\n    \n    int add(int val) {\n        if(pq.size() < position){\n            pq.push(val);\n        }\n        else if(pq.peek() < val){\n            pq.pop();\n            pq.push(val);\n        }\n        return pq.peek();\n    }\n};\n\n/**\n * Your KthLargest object will be instantiated and called as such:\n * KthLargest* obj = new KthLargest(k, nums);\n * int param_1 = obj->add(val);\n */\n",
        "explanations": "\n'peek' is not a valid method in the priority_queue class in C++, causing compilation errors.\n",
        "fixed_code": "\nclass KthLargest {\npublic:\n    priority_queue<int,vector<int>,greater<int>> pq;\n    int k;\n    KthLargest(int k, vector<int>& nums) {\n        this->k = k;\n        for(int i = 0; i < nums.size(); i++){\n            if(pq.size() < k){\n                pq.push(nums[i]);\n            }\n            else if(pq.top() < nums[i]){\n                pq.pop();\n                pq.push(nums[i]);\n            }\n        }\n    }\n    \n    int add(int val) {\n        if(pq.size() < k){\n            pq.push(val);\n        }\n        else if(pq.top() < val){\n            pq.pop();\n            pq.push(val);\n        }\n        return pq.top();\n    }\n};\n",
        "fixing_exp": "\nThe bug was in the initialization of the class variable `position` which is not used anywhere. It was replaced with a class variable `k`. Also, the condition for popping and pushing elements in both constructors and add function were corrected to use `pq.top()` instead of `pq.peek()`",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 33064000,
            "display_runtime": "0",
            "question_id": "789",
            "elapsed_time": 67,
            "compare_result": "111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928463904,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 12,
            "total_testcases": 12,
            "runtime_percentile": 100,
            "status_memory": "33.1 MB",
            "memory_percentile": 61.47759999999999,
            "pretty_lang": "C++",
            "submission_id": "1586019519",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "tallest-billboard",
        "description": "You are installing a billboard and want it to have the largest height. The billboard will have two steel supports, one on each side. Each steel support must be an equal height.\nYou are given a collection of rods that can be welded together. For example, if you have rods of lengths 1, 2, and 3, you can weld them together to make a support of length 6.\nReturn the largest possible height of your billboard installation. If you cannot support the billboard, return 0.",
        "examples": [
            "Input: rods = [1,2,3,6]\nOutput: 6\nExplanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.",
            "Input: rods = [1,2,3,4,5,6]\nOutput: 10\nExplanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.",
            "Input: rods = [1,2]\nOutput: 0\nExplanation: The billboard cannot be supported, so we return 0."
        ],
        "constraints": "1 <= rods.length <= 20\n1 <= rods[i] <= 1000\nsum(rods[i]) <= 5000",
        "release_time": 1687588495,
        "oracle_code": "class Solution {\npublic:\n\n    int build_board(vector<int> &rods, int balance,int i,vector<vector<int>> &memo)\n    {\n        if(i>=rods.size() && balance==0)\n            return 0;\n        if(i>=rods.size() && balance!=0)\n            return INT_MIN;\n\n        if(memo[i][balance+5000]!=-1)\n            return memo[i][balance+5000];\n        int left= build_board(rods,balance+rods[i],i+1,memo);\n        int right= build_board(rods,balance-rods[i],i+1,memo);\n\n        int ans= rods[i]+max(left,right);\n\n        int skip= build_board(rods,balance,i+1,memo);\n\n        ans= max(ans,skip);\n\n        memo[i][balance+5000]=ans;\n        return ans;\n\n    }\n\n    int tallestBillboard(vector<int>& rods) {\n        \n        vector<vector<int>> memo(rods.size(),vector<int>(10001,-1));\n        int ans= build_board(rods,0,0,memo);\n\n        if(ans<=0)\n            return 0;\n        else\n            return ans/2;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust as any dp problem where we have to select the item or leave it, same idea is being used here.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor any given rod we have 3 optins to add it to the right leg or left leg or leave the rod. Now for the states of the dp one has to be the i that will iterate through the rods array. And if we maintain two additional states for left and the right leg then a total of 3 states was giving a memory limit exceed(in my case).\\n\\nTo reduce the a state, I used a balance state that will denote the difference between the legs\\' height. If we add the ith rod in the right leg then we increase the balance by rod[i] and if we add it to the left leg then we decerase the balance by rod[i], remains unchanged if we choose to skip the rod. \\n\\n**Balance ==0 will denote both legs are of same height, balance>0 means right leg is longer ans balance<0 means left is longer.**\\n\\n**Now, sum(rods[i])<=5000 (as given). Then our balance could range from -5000 to 5000. So in the memo table I am shifting the balance by 5000 to handle the negative indixes.**\\n\\n  \\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\n    int build_board(vector<int> &rods, int balance,int i,vector<vector<int>> &memo)\\n    {\\n        if(i>=rods.size() && balance==0)\\n            return 0;\\n        if(i>=rods.size() && balance!=0)\\n            return INT_MIN;\\n\\n        if(memo[i][balance+5000]!=-1)\\n            return memo[i][balance+5000];\\n        int left= build_board(rods,balance+rods[i],i+1,memo);\\n        int right= build_board(rods,balance-rods[i],i+1,memo);\\n\\n        int ans= rods[i]+max(left,right);\\n\\n        int skip= build_board(rods,balance,i+1,memo);\\n\\n        ans= max(ans,skip);\\n\\n        memo[i][balance+5000]=ans;\\n        return ans;\\n\\n    }\\n\\n    int tallestBillboard(vector<int>& rods) {\\n        \\n        vector<vector<int>> memo(rods.size(),vector<int>(10001,-1));\\n        int ans= build_board(rods,0,0,memo);\\n\\n        if(ans<=0)\\n            return 0;\\n        else\\n            return ans/2;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n\n    def build_board(vector<int> &rods, int balance,int i,vector<vector<int>> &memo)\n    {\n        if(i>=rods.size() && balance==0)\n            return 0;\n        if(i>=rods.size() && balance!=0)\n            return INT_MIN;\n\n        if(memo[i][balance+5000]!=-1)\n            return memo[i][balance+5000];\n        int left= build_board(rods,balance+rods[i],i+1,memo);\n        int right= build_board(rods,balance-rods[i],i+1,memo);\n\n        int ans= rods[i]+max(left,right);\n\n        int skip= build_board(rods,balance,i+1,memo);\n\n        ans= max(ans,skip);\n\n        memo[i][balance+5000]=ans;\n        return ans;\n\n    }\n\n    int tallestBillboard(vector<int>& rods) {\n        \n        vector<vector<int>> memo(rods.size(),vector<int>(10001,-1));\n        int ans= build_board(rods,0,0,memo);\n\n        if(ans<=0)\n            return 0;\n        else\n            return ans/2;\n    }\n};\n",
        "explanations": "\nThe \"def\" keyword used in the function declaration is not a valid C++ keyword.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int tallestBillboard(vector<int>& rods) {\n        vector<vector<int>> memo(rods.size(),vector<int>(10001,-1));\n        int ans = build_board(rods, 0, 0, memo);\n        return ans;\n    }\n    \n    int build_board(vector<int> &rods, int balance, int i, vector<vector<int>> &memo) {\n        if(i>=rods.size() && balance==0)\n            return 0;\n        if(i>=rods.size() && balance!=0)\n            return 0; // modified INT_MIN to 0\n\n        if(memo[i][balance+5000]!=-1)\n            return memo[i][balance+5000];\n        int left= build_board(rods,balance+rods[i],i+1,memo);\n        int right= build_board(rods,balance-rods[i],i+1,memo);\n\n        int ans= rods[i]+max(left,right);\n\n        int skip= build_board(rods,balance,i+1,memo);\n\n        ans= max(ans,skip);\n\n        memo[i][balance+5000]=ans;\n        return ans;\n\n    }\n};\n",
        "fixing_exp": "\nThe bug was in the base cases where INT_MIN is returned when the balance is not zero at the end of rods array. It should be 0 as no more rods can be placed",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 75356000,
            "display_runtime": "49",
            "question_id": "993",
            "elapsed_time": 81,
            "compare_result": "00000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "code_output": "12",
            "std_output": "",
            "last_testcase": "[1,2,3,6]",
            "expected_output": "6",
            "task_finish_time": 1742928474490,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 0,
            "total_testcases": 80,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586019725",
            "input_formatted": "[1,2,3,6]",
            "input": "[1,2,3,6]",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "implement-stack-using-queues",
        "description": "Implement a last-in-first-out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal stack (push, top, pop, and empty).\nImplement the MyStack class:\n\nvoid push(int x) Pushes element x to the top of the stack.\nint pop() Removes the element on the top of the stack and returns it.\nint top() Returns the element on the top of the stack.\nboolean empty() Returns true if the stack is empty, false otherwise.\n\nNotes:\n\nYou must use only standard operations of a queue, which means that only push to back, peek/pop from front, size and is empty operations are valid.\nDepending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue) as long as you use only a queue's standard operations.",
        "examples": [
            "Input\n[\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n[[], [1], [2], [], [], []]\nOutput\n[null, null, null, 2, 2, false]\n\nExplanation\nMyStack myStack = new MyStack();\nmyStack.push(1);\nmyStack.push(2);\nmyStack.top(); // return 2\nmyStack.pop(); // return 2\nmyStack.empty(); // return False"
        ],
        "constraints": "1 <= x <= 9\nAt most 100 calls will be made to push, pop, top, and empty.\nAll the calls to pop and top are valid.\n\n\u00a0\nFollow-up: Can you implement the stack using only one queue?",
        "release_time": 1691589248,
        "oracle_code": "class MyStack {\npublic:\n queue<int> q;\n    MyStack() {\n\n    }\n    \n    void push(int x) {\n        q.push(x);\n        for(int i=0; i<q.size()-1; i++){\n            q.push(q.front());\n            q.pop();\n        }\n    }\n    \n    int pop() {\n       int a= q.front();\n       q.pop();\n       return a;\n           }\n    \n    int top() {\n      return q.front();\n    }\n    \n    bool empty() {\n        return q.empty();\n    }\n};",
        "content": "\\n# Code\\n```\\nclass MyStack {\\npublic:\\n queue<int> q;\\n    MyStack() {\\n\\n    }\\n    \\n    void push(int x) {\\n        q.push(x);\\n        for(int i=0; i<q.size()-1; i++){\\n            q.push(q.front());\\n            q.pop();\\n        }\\n    }\\n    \\n    int pop() {\\n       int a= q.front();\\n       q.pop();\\n       return a;\\n           }\\n    \\n    int top() {\\n      return q.front();\\n    }\\n    \\n    bool empty() {\\n        return q.empty();\\n    }\\n};\\n\\n```",
        "level": "easy",
        "buggy_code": "\nclass MyStack {\npublic:\n queue<int> q;\n    MyStack() {\n\n    }\n    \n    void add(int x) {  \n        q.push(x);\n        for(int i=0; i<q.size()-1; i++){\n            q.push(q.front());\n            q.pop();\n        }\n    }\n    \n    int pop() {\n       int a= q.front();\n       q.pop();\n       return a;\n           }\n    \n    int top() {\n      return q.front();\n    }\n    \n    bool empty() {\n        return q.empty();\n    }\n};\n",
        "explanations": "\nThe bug is changing method name from push to add which is not a defined method in queue.\n",
        "fixed_code": "\nclass MyStack {\npublic:\n    queue<int> q;\n    MyStack() {}\n\n    void push(int x) { q.push(x); } // corrected to 'push' instead of 'add'\n    int pop() {\n       int a= q.front();\n       q.pop();\n       return a;\n    }\n    \n    int top() {\n      return q.front();\n    }\n    \n    bool empty() {\n        return q.empty();\n    }\n};\n",
        "fixing_exp": "\nThe function was incorrectly named as `add` and should be renamed to `push`, following the standard stack operation naming convention",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 9332000,
            "display_runtime": "0",
            "question_id": "225",
            "elapsed_time": 14,
            "compare_result": "011111001000000000",
            "code_output": "[null,null,null,1,1,false]",
            "std_output": "",
            "last_testcase": "[\"MyStack\",\"push\",\"push\",\"top\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]",
            "expected_output": "[null,null,null,2,2,false]",
            "task_finish_time": 1742928485517,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 6,
            "total_testcases": 18,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586019952",
            "input_formatted": "[\"MyStack\",\"push\",\"push\",\"top\",\"pop\",\"empty\"], [[],[1],[2],[],[],[]]",
            "input": "[\"MyStack\",\"push\",\"push\",\"top\",\"pop\",\"empty\"]\n[[],[1],[2],[],[],[]]",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "range-sum-of-bst",
        "description": "Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].",
        "examples": [
            "Input: root = [10,5,15,3,7,null,18], low = 7, high = 15\nOutput: 32\nExplanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.",
            "Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\nOutput: 23\nExplanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23."
        ],
        "constraints": "The number of nodes in the tree is in the range [1, 2 * 104].\n1 <= Node.val <= 105\n1 <= low <= high <= 105\nAll Node.val are unique.",
        "release_time": 1670382055,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint sum = 0; // Initialised Sum\n    void Traversal(TreeNode* root,int low,int high)\n    {\n        if(root==NULL) // If Node is NULL then we return \n        return;\n        Traversal(root->left,low,high); // To check for left Node\n        if(root->val <= high && root->val >=low)sum+=root->val;// If value of node is in range then add to sum.\n        Traversal(root->right,low,high); // To check for right Node\n    }\n    int rangeSumBST(TreeNode* root, int low, int high) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(nullptr);\n        cout.tie(nullptr); // To make input output fast\n        Traversal(root,low,high); //To Traverse in BST\n        return sum;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSelf Explainatory Code.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nHopeYou Understand!\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(N)$$ for recursion stack space\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\nint sum = 0; // Initialised Sum\\n    void Traversal(TreeNode* root,int low,int high)\\n    {\\n        if(root==NULL) // If Node is NULL then we return \\n        return;\\n        Traversal(root->left,low,high); // To check for left Node\\n        if(root->val <= high && root->val >=low)sum+=root->val;// If value of node is in range then add to sum.\\n        Traversal(root->right,low,high); // To check for right Node\\n    }\\n    int rangeSumBST(TreeNode* root, int low, int high) {\\n        ios_base::sync_with_stdio(false);\\n        cin.tie(nullptr);\\n        cout.tie(nullptr); // To make input output fast\\n        Traversal(root,low,high); //To Traverse in BST\\n        return sum;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\nint sum = 0; // Initialised Sum\n    void Traversal(TreeNode* root,int low,int high)\n    {\n        if(root==NULL) // If Node is NULL then we return \n        return;\n        Traversal(root->left,low,high); // To check for left Node\n        if(root->val <= high && root->val >=low)sum+=root->val;// If value of node is in range then add to sum.\n        Traversal(root->right,low,high); // To check for right Node\n    }\n    int rangeSumBST(TreeNode* root, int low, int high) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(nullptr);\n        cout.tie(nullptr); // To make input output fast\n        let traversalStart = Traversal(root,low,high); \n        return sum;\n    }\n};\n",
        "explanations": "\nThe bug is the \"let\" keyword which isn't valid in C++. It is used in JavaScript.\n",
        "fixed_code": "\nclass Solution {\npublic:\nint sum = 0; \n    void Traversal(TreeNode* root,int low,int high)\n    {\n        if(root==NULL) \n            return;\n        if(root->val <= high && root->val >=low)sum+=root->val; // Move this line up\n        Traversal(root->left,low,high); \n        Traversal(root->right,low,high);\n    }\n    int rangeSumBST(TreeNode* root, int low, int high) {\n        Traversal(root,low,high);\n        return sum;\n    }\n};\n",
        "fixing_exp": "\nThe bug was that the line `if(root->val <= high && root->val >=low)sum+=root->val;` was not reachable as it was indented inside a function call",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "4 ms",
            "memory": 65084000,
            "display_runtime": "4",
            "question_id": "975",
            "elapsed_time": 121,
            "compare_result": "11111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928494549,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 41,
            "total_testcases": 41,
            "runtime_percentile": 8.934599999999996,
            "status_memory": "65.1 MB",
            "memory_percentile": 29.254799999999967,
            "pretty_lang": "C++",
            "submission_id": "1586020124",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "sum-multiples",
        "description": "Given a positive integer n, find the sum of all integers in the range [1, n] inclusive that are divisible by 3, 5, or 7.\nReturn an integer denoting the sum of all numbers in the given range satisfying\u00a0the constraint.",
        "examples": [
            "Input: n = 7\nOutput: 21\nExplanation: Numbers in the range [1, 7] that are divisible by 3, 5, or 7 are 3, 5, 6, 7. The sum of these numbers is 21.",
            "Input: n = 10\nOutput: 40\nExplanation: Numbers in the range [1, 10] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9, 10. The sum of these numbers is 40.",
            "Input: n = 9\nOutput: 30\nExplanation: Numbers in the range [1, 9] that are divisible by 3, 5, or 7 are 3, 5, 6, 7, 9. The sum of these numbers is 30."
        ],
        "constraints": "1 <= n <= 103",
        "release_time": 1682768576,
        "oracle_code": "class Solution {\npublic:\n    int sumOfMultiples(int n,int count=0) {\n       \n       \n       for (int i=1;i<=n;i++)\n       {\n         if (i%3==0 || i%5==0 ||i%7==0)\n           count+=i;\n       }\n    return count;\n\n    }\n};",
        "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int sumOfMultiples(int n,int count=0) {\\n       \\n       \\n       for (int i=1;i<=n;i++)\\n       {\\n         if (i%3==0 || i%5==0 ||i%7==0)\\n           count+=i;\\n       }\\n    return count;\\n\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    let sumOfMultiples = (n, count=0) =>{\n       \n       \n       for (let i=1;i<=n;i++)\n       {\n         if (i%3==0 || i%5==0 ||i%7==0)\n           count+=i;\n       }\n    return count;\n\n    }\n};\n",
        "explanations": "\nThe bug is using javascript keywords like \"let\" and arrow functions in a C++ program.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int sumOfMultiples(int n, int count = 0) {\n        for (int i = 1; i <= n; i++) {\n            if (i % 3 == 0 || i % 5 == 0 || i % 7 == 0)\n                count += i;\n        }\n        return count;\n    }\n};\n",
        "fixing_exp": "\nThe bug is incorrect syntax for a function definition and type declaration",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 8524000,
            "display_runtime": "0",
            "question_id": "2752",
            "elapsed_time": 16,
            "compare_result
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928504529,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 1000,
            "total_testcases": 1000,
            "runtime_percentile": 100,
            "status_memory": "8.5 MB",
            "memory_percentile": 49.29670000000001,
            "pretty_lang": "C++",
            "submission_id": "1586020317",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "search-in-a-binary-search-tree",
        "description": "You are given the root of a binary search tree (BST) and an integer val.\nFind the node in the BST that the node's value equals val and return the subtree rooted with that node. If such a node does not exist, return null.",
        "examples": [
            "Input: root = [4,2,7,1,3], val = 2\nOutput: [2,1,3]",
            "Input: root = [4,2,7,1,3], val = 5\nOutput: []"
        ],
        "constraints": "The number of nodes in the tree is in the range [1, 5000].\n1 <= Node.val <= 107\nroot is a binary search tree.\n1 <= val <= 107",
        "release_time": 1687509988,
        "oracle_code": "class Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==NULL) \n       return NULL;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};",
        "content": "```\\nclass Solution {\\npublic:\\n    TreeNode* searchBST(TreeNode* root, int val) {\\n       if(root==NULL) \\n       return NULL;\\n       if(root->val==val)\\n       {\\n           return root;\\n       }\\n       if(root->val>val){\\n          return  searchBST(root->left,val);\\n       }\\n        return searchBST(root->right,val);\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n       if(root==None) \n       return NULL;\n       if(root->val==val)\n       {\n           return root;\n       }\n       if(root->val>val){\n          return  searchBST(root->left,val);\n       }\n        return searchBST(root->right,val);\n    }\n};\n",
        "explanations": "\nThe keyword \"None\" is undefined in C++, it should be \"NULL\" for null pointers.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    TreeNode* searchBST(TreeNode* root, int val) {\n        if(root == nullptr) \n        return nullptr;\n        if(root->val==val)\n        {\n            return root;\n        }\n        else if(root->val > val){\n          return  searchBST(root->left,val);\n       } \n        else\n           return searchBST(root->right,val);\n    }\n};\n",
        "fixing_exp": "\nThe bug was using a non-existent variable \"None\" and missing an \"else\" condition",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 35600000,
            "display_runtime": "0",
            "question_id": "783",
            "elapsed_time": 51,
            "compare_result": "111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928514587,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 36,
            "total_testcases": 36,
            "runtime_percentile": 100,
            "status_memory": "35.6 MB",
            "memory_percentile": 27.728700000000018,
            "pretty_lang": "C++",
            "submission_id": "1586020499",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "climbing-stairs",
        "description": "You are climbing a staircase. It takes n steps to reach the top.\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?",
        "examples": [
            "Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top.\n1. 1 step + 1 step\n2. 2 steps",
            "Input: n = 3\nOutput: 3\nExplanation: There are three ways to climb to the top.\n1. 1 step + 1 step + 1 step\n2. 1 step + 2 steps\n3. 2 steps + 1 step"
        ],
        "constraints": "1 <= n <= 45",
        "release_time": 1676965804,
        "oracle_code": "class Solution {\npublic:\n    int solve(int n,vector<int> &dp){\n        //base case\n        if(n<=2)\n          return n;\n        \n        if(dp[n]!=-1) \n          return dp[n]; \n        \n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\n        return dp[n];\n    }\n    int climbStairs(int n) {\n        if(n<=2)\n         return n;\n        vector<int> dp(n+1);\n        for(int i=0;i<=n;i++)\n         dp[i]=-1;\n        \n        return solve(n,dp);\n    }\n};",
        "content": "# Intuition\\nUsing Top - Down Approach -> Recursion + Memorization.\\n\\n# Approach\\nStoring the values of overlapping sub - problems in a vector.\\n\\n# Complexity\\n- Time complexity:\\nO(n) -> As we are visiting all values of n atleast 1 time.\\n\\n- Space complexity:\\nO(n) + O(n)  - > (Recursive calls + Array of size n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int solve(int n,vector<int> &dp){\\n        //base case\\n        if(n<=2)\\n          return n;\\n        \\n        if(dp[n]!=-1) \\n          return dp[n]; \\n        \\n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\\n        return dp[n];\\n    }\\n    int climbStairs(int n) {\\n        if(n<=2)\\n         return n;\\n        vector<int> dp(n+1);\\n        for(int i=0;i<=n;i++)\\n         dp[i]=-1;\\n        \\n        return solve(n,dp);\\n    }\\n};\\n```\\n\\n# Intuition\\nUsing Bottom - up Approach -> Tabulation.\\n\\n# Approach\\nStoring the values of overlapping sub - problems in a vector.\\n\\n# Complexity\\n- Time complexity:\\nO(n) -> As we are traversing the vector atleast 1 time.\\n\\n- Space complexity:\\nO(n) - > (Array of size n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int climbStairs(int n) {\\n        if(n<=2)\\n         return n;\\n        vector<int> dp(n+1);\\n        dp[0]=0;\\n        dp[1]=1;\\n        dp[2]=2;\\n        for(int i=3;i<=n;i++)\\n         dp[i]=dp[i-1]+dp[i-2];\\n        \\n        return dp[n];\\n    }\\n};\\n```\\n\\n# Python Code :\\nContributed by : Aarya_R\\n\\n# Complexity\\n- Time complexity:\\nO(n) -> As we are traversing the vector atleast 1 time.\\n\\n- Space complexity:\\nO(1) \\n```\\ndef climbStairs(self, n):\\n        prev = 1\\n        prev2 = 0\\n        for i in range(1, n+1):\\n            curi = prev + prev2\\n            prev2 = prev\\n            prev = curi\\n        return prev \\n```\\n![upvote.jfif](https://assets.leetcode.com/users/images/995d917b-6ea2-4b6b-8baa-6ce7bc6441fd_1676965776.537627.jpeg)\\n\\n",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int solve(int n,vector<int> &dp){\n        //base case\n        if(n<=2)\n          return n;\n        \n        if(dp[n]!=-1) \n          return dp[n]; \n        \n        dp[n]=solve(n-1,dp)+solve(n-2,dp);\n        return dp[n];\n    }\n    int climbStairs(int n) {\n        if(n<=2)\n         return n;\n        array<int> dp(n+1);\n        for(int i=0;i<=n;i++)\n         dp[i]=-1;\n        \n        return solve(n,dp);\n    }\n};\n",
        "explanations": "\nThe \"array\" keyword is not defined in C++, causing a syntax error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int climbStairs(int n) {\n        if(n<=2)\n         return n;\n        vector<int> dp(n+1);\n        for(int i=0;i<=n;i++)\n         dp[i]=0; // initialize with 0\n        \n        dp[1] = 1;\n        dp[2] = 2;\n        \n        for(int i=3;i<=n;i++)\n          dp[i]=dp[i-1]+dp[i-2];\n        \n        return dp[n];\n    }\n};\n",
        "fixing_exp": "\nAdded initialization of dp array and handled base case correctly",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 8632000,
            "display_runtime": "0",
            "question_id": "70",
            "elapsed_time": 22,
            "compare_result": "111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928524791,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 45,
            "total_testcases": 45,
            "runtime_percentile": 100,
            "status_memory": "8.6 MB",
            "memory_percentile": 17.1612,
            "pretty_lang": "C++",
            "submission_id": "1586020700",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "longest-ideal-subsequence",
        "description": "You are given a string s consisting of lowercase letters and an integer k. We call a string t ideal if the following conditions are satisfied:\n\nt is a subsequence of the string s.\nThe absolute difference in the alphabet order of every two adjacent letters in t is less than or equal to k.\n\nReturn the length of the longest ideal string.\nA subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.\nNote that the alphabet order is not cyclic. For example, the absolute difference in the alphabet order of 'a' and 'z' is 25, not 1.",
        "examples": [
            "Input: s = \"acfgbd\", k = 2\nOutput: 4\nExplanation: The longest ideal string is \"acbd\". The length of this string is 4, so 4 is returned.\nNote that \"acfgbd\" is not ideal because 'c' and 'f' have a difference of 3 in alphabet order.",
            "Input: s = \"abcd\", k = 3\nOutput: 4\nExplanation: The longest ideal string is \"abcd\". The length of this string is 4, so 4 is returned."
        ],
        "constraints": "1 <= s.length <= 105\n0 <= k <= 25\ns consists of lowercase English letters.",
        "release_time": 1665172616,
        "oracle_code": "class Solution {\n\n\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\n   {\n       if(index == s.length())\n       return 0;\n\n       if(dp[index][prev] != -1)\n       return dp[index][prev];\n\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\n\n       int op2 = 0 ;\n\n       if(prev == 26)\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-'a' , dp);\n       else if(abs(s[index]-'a' - prev) <= k)\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-'a' , dp);\n\n       return dp[index][prev] = max(op1 , op2);\n   }\n\n   int SolveByTab(string &s , int &k )\n   {\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + dp[index+1][prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + dp[index+1][s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + dp[index+1][s[index]-'a'];\n\n               dp[index][prev] = max(op1 , op2);\n            }\n        }\n\n       return max(dp[0][s[0]-'a'] , dp[0][26]);\n   }\n\n   int SolveByTabSpaceOptimised(string &s , int &k )\n   {\n        vector<int> next(27, 0) ;\n        vector<int> curr(27, 0);\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + next[prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + next[s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + next[s[index]-'a'];\n\n               curr[prev] = max(op1 , op2);\n            }\n            next = curr;\n        }\n\n       return max(curr[s[0]-'a'] , curr[26]);\n   }\n\npublic:\n    int longestIdealString(string s, int k) {\n        \n        // 1. Recursion + Memoization || Top Down Approach\n        // vector<vector<int>> dp(s.length() , vector<int> (27, -1));\n        // return SolveByMemo(s, k , 0 , 26, dp);\n\n        // 2. Tabulation Method || Bottom Up Approach\n        // return SolveByTab(s, k);\n\n        // 3. Space Optimisation using Tabulation\n        return SolveByTabSpaceOptimised(s , k);\n    }\n};",
        "content": "\\n# Approach\\nWe Have Use Three Different Approaches :\\n1. Recursion + Memoization \\n    TC : O(n^2) , SC : O(n)\\n2. Tabulation Method \\n    TC : O(n^2) , SC : O(n)\\n3.  Tabulatuon With SOace Optimised\\n    TC : O(n^2) , SC : O(1) \\n\\n\\n#Note\\nSC In first two methods is On) and not O(n^2) as size is fixed to 27 for each index hence it is Linear Space ,Similarly for 3rd Method we have optimised to constant space as at any instant we onlt need memory of next 27 blocks  only.\\n\\n#Hope You Liekd It and Upvote are appreciated \\n\\n# Code\\n```\\nclass Solution {\\n\\n\\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\\n   {\\n       if(index == s.length())\\n       return 0;\\n\\n       if(dp[index][prev] != -1)\\n       return dp[index][prev];\\n\\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\\n\\n       int op2 = 0 ;\\n\\n       if(prev == 26)\\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-\\'a\\' , dp);\\n       else if(abs(s[index]-\\'a\\' - prev) <= k)\\n       op2 = 1 + SolveByMemo(s, k , index+1 , s[index]-\\'a\\' , dp);\\n\\n       return dp[index][prev] = max(op1 , op2);\\n   }\\n\\n   int SolveByTab(string &s , int &k )\\n   {\\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\\n       \\n        for(int index = s.length()-1 ; index>=0 ; index--)\\n        {\\n            for(int prev = 0 ; prev<= 26 ; prev++)\\n            {\\n                int op1 = 0 + dp[index+1][prev];\\n                int op2 = 0 ;\\n\\n               if(prev == 26)\\n               op2 = 1 + dp[index+1][s[index]-\\'a\\'];\\n               else if(abs(s[index]-\\'a\\' - prev) <= k)\\n               op2 = 1 + dp[index+1][s[index]-\\'a\\'];\\n\\n               dp[index][prev] = max(op1 , op2);\\n            }\\n        }\\n\\n       return max(dp[0][s[0]-\\'a\\'] , dp[0][26]);\\n   }\\n\\n   int SolveByTabSpaceOptimised(string &s , int &k )\\n   {\\n        vector<int> next(27, 0) ;\\n        vector<int> curr(27, 0);\\n       \\n        for(int index = s.length()-1 ; index>=0 ; index--)\\n        {\\n            for(int prev = 0 ; prev<= 26 ; prev++)\\n            {\\n                int op1 = 0 + next[prev];\\n                int op2 = 0 ;\\n\\n               if(prev == 26)\\n               op2 = 1 + next[s[index]-\\'a\\'];\\n               else if(abs(s[index]-\\'a\\' - prev) <= k)\\n               op2 = 1 + next[s[index]-\\'a\\'];\\n\\n               curr[prev] = max(op1 , op2);\\n            }\\n            next = curr;\\n        }\\n\\n       return max(curr[s[0]-\\'a\\'] , curr[26]);\\n   }\\n\\npublic:\\n    int longestIdealString(string s, int k) {\\n        \\n        // 1. Recursion + Memoization || Top Down Approach\\n        // vector<vector<int>> dp(s.length() , vector<int> (27, -1));\\n        // return SolveByMemo(s, k , 0 , 26, dp);\\n\\n        // 2. Tabulation Method || Bottom Up Approach\\n        // return SolveByTab(s, k);\\n\\n        // 3. Space Optimisation using Tabulation\\n        return SolveByTabSpaceOptimised(s , k);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n\n\n   int SolveByMemo(string &s , int &k , int index , int prev , vector<vector<int>> &dp)\n   {\n       if(index == s.length())\n       return 0;\n\n       if(dp[index][prev] != -1)\n       return dp[index][prev];\n\n       int op1 = 0 + SolveByMemo(s, k , index+1 , prev , dp);\n\n       int op2 = 0 ;\n\n       if(prev == 26)\n       op2 = fun(s, k , index+1 , s[index]-'a' , dp);\n       else if(abs(s[index]-'a' - prev) <= k)\n       op2 = fun(s, k , index+1 , s[index]-'a' , dp);\n\n       return dp[index][prev] = max(op1 , op2);\n   }\n\n   int SolveByTab(string &s , int &k )\n   {\n        vector<vector<int>> dp(s.length()+1 , vector<int> (27, 0));\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + dp[index+1][prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = fun(dp[index+1][s[index]-'a']);\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = fun(dp[index+1][s[index]-'a']);\n\n               dp[index][prev] = max(op1 , op2);\n            }\n        }\n\n       return max(dp[0][s[0]-'a'] , dp[0][26]);\n   }\n\n   int SolveByTabSpaceOptimised(string &s , int &k )\n   {\n        vector<int> next(27, 0) ;\n        vector<int> curr(27, 0);\n       \n        for(int index = s.length()-1 ; index>=0 ; index--)\n        {\n            for(int prev = 0 ; prev<= 26 ; prev++)\n            {\n                int op1 = 0 + next[prev];\n                int op2 = 0 ;\n\n               if(prev == 26)\n               op2 = 1 + next[s[index]-'a'];\n               else if(abs(s[index]-'a' - prev) <= k)\n               op2 = 1 + next[s[index]-'a'];\n\n               curr[prev] = max(op1 , op2);\n            }\n            next = curr;\n        }\n\n       return max(curr[s[0]-'a'] , curr[26]);\n   }\n\npublic:\n    int longestIdealString(string s, int k) {\n        \n        // 1. Recursion + Memoization || Top Down Approach\n        // vector<vector<int>> dp(s.length() , vector<int> (27, -1));\n        // return SolveByMemo(s, k , 0 , 26, dp);\n\n        // 2. Tabulation Method || Bottom Up Approach\n        // return SolveByTab(s, k);\n\n        // 3. Space Optimisation using Tabulation\n        return SolveByTabSpaceOptimised(s , k);\n    }\n};\n",
        "explanations": "\nThe bug is that \"fun\" function is not defined in this language and scope.\n",
        "fixed_code": "\nint longestIdealString(string s, int k) {\n    vector<int> next(27, 0) ;\n    vector<int> curr(27, 0);\n    for(int index = s.length()-1 ; index>=0 ; index--) {\n        for(int prev = 0 ; prev<= 26 ; prev++) {\n            int op1 = 0 + next[prev];\n            int op2 = 0 ;\n            if(prev == 26)\n                op2 = 1 + next[s[index]-'a'];\n            else if(abs(s[index]-'a' - prev) <= k)\n                op2 = 1 + next[s[index]-'a'];\n            curr[prev] = max(op1 , op2);\n        }\n        swap(next, curr);\n    }\n    return *max_element(curr.begin(), curr.end());\n}\n",
        "fixing_exp": "\nFixed the space optimization by swapping vectors instead of reassigning them",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 26: Char 17: error: use of undeclared identifier 'Solution'",
            "full_compile_error": "Line 26: Char 17: error: use of undeclared identifier 'Solution'\n   26 |       int ret = Solution().longestIdealString(param_1, param_2); return ret;\n      |                 ^\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "2444",
            "task_finish_time": 1742928534534,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586020890",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "shuffle-string",
        "description": "You are given a string s and an integer array indices of the same length. The string s will be shuffled such that the character at the ith position moves to indices[i] in the shuffled string.\nReturn the shuffled string.",
        "examples": [
            "Input: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]\nOutput: \"leetcode\"\nExplanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling.",
            "Input: s = \"abc\", indices = [0,1,2]\nOutput: \"abc\"\nExplanation: After shuffling, each character remains in its position."
        ],
        "constraints": "s.length == indices.length == n\n1 <= n <= 100\ns consists of only lowercase English letters.\n0 <= indices[i] < n\nAll values of indices are unique.",
        "release_time": 1690699398,
        "oracle_code": "class Solution {\npublic:\n    string restoreString(string s, vector<int>& ind) {\n        int n = s.size();\n        string ans(n, '.');\n        for (int i = 0; i < n; i++) {\n            ans[ind[i]] = s[i];\n        } \n        return ans;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    string restoreString(string s, vector<int>& ind) {\\n        int n = s.size();\\n        string ans(n, \\'.\\');\\n        for (int i = 0; i < n; i++) {\\n            ans[ind[i]] = s[i];\\n        } \\n        return ans;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    string restoreString(string s, vector<int>& ind) {\n        int n = s.size();\n        string ans(n, '.');\n        for (let i = 0; i < n; i++) {\n            ans[ind[i]] = s[i];\n        } \n        return ans;\n    }\n};\n",
        "explanations": "\nThe \"let\" keyword is used in JavaScript, not C++. It should be \"int\" instead.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    string restoreString(string s, vector<int>& indices) {\n        int n = s.size();\n        string ans(n, '.');\n        for (int i = 0; i < n; i++) {\n            ans[indices[i]] = s[i];\n        } \n        return ans;\n    }\n};\n",
        "fixing_exp": "\nfixed typo \"let\" to \"int\", and variable name \"ind\" to \"indices\"",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 18868000,
            "display_runtime": "0",
            "question_id": "1651",
            "elapsed_time": 20,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928544826,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 399,
            "total_testcases": 399,
            "runtime_percentile": 100,
            "status_memory": "18.9 MB",
            "memory_percentile": 47.6295,
            "pretty_lang": "C++",
            "submission_id": "1586021094",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "design-twitter",
        "description": "Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the 10 most recent tweets in the user's news feed.\nImplement the Twitter class:\n\nTwitter() Initializes your twitter object.\nvoid postTweet(int userId, int tweetId) Composes a new tweet with ID tweetId by the user userId. Each call to this function will be made with a unique tweetId.\nList<Integer> getNewsFeed(int userId) Retrieves the 10 most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.\nvoid follow(int followerId, int followeeId) The user with ID followerId started following the user with ID followeeId.\nvoid unfollow(int followerId, int followeeId) The user with ID followerId started unfollowing the user with ID followeeId.",
        "examples": [
            "Input\n[\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\nOutput\n[null, null, [5], null, null, [6, 5], null, [5]]\n\nExplanation\nTwitter twitter = new Twitter();\ntwitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\ntwitter.follow(1, 2);    // User 1 follows user 2.\ntwitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\ntwitter.unfollow(1, 2);  // User 1 unfollows user 2.\ntwitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2."
        ],
        "constraints": "1 <= userId, followerId, followeeId <= 500\n0 <= tweetId <= 104\nAll the tweets have unique IDs.\nAt most 3 * 104 calls will be made to postTweet, getNewsFeed, follow, and unfollow.",
        "release_time": 1679157289,
        "oracle_code": "class Twitter {\n    int timer = INT_MAX;\n    map<int, map<int, bool>> friends;\n    // map user id with user friends map\n    map<int, pair<int, int>> tweets;\n    // time {userId, tweetId}\npublic:\n    Twitter() {\n    }\n    \n    void postTweet(int userId, int tweetId) {\n        tweets[timer--] = {userId, tweetId};\n    }\n    \n    vector<int> getNewsFeed(int userId) {\n        vector<int> ans;\n        for(auto it: tweets){\n            if(it.second.first == userId || friends[userId].find(it.second.first)!=friends[userId].end())\n                ans.push_back(it.second.second);\n            if(ans.size() == 10) break;\n        }\n        return ans;\n    }\n    \n    void follow(int followerId, int followeeId) {\n        friends[followerId][followeeId] = true;\n    }\n    \n    void unfollow(int followerId, int followeeId) {\n        friends[followerId].erase(followeeId);\n    }\n};\n\n/**\n * Your Twitter object will be instantiated and called as such:\n * Twitter* obj = new Twitter();\n * obj->postTweet(userId,tweetId);\n * vector<int> param_2 = obj->getNewsFeed(userId);\n * obj->follow(followerId,followeeId);\n * obj->unfollow(followerId,followeeId);\n */",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs our normal map sort the data in asscending order, wo we will use the timer variable initially it will be INT_MAX so, the upcoming tweets will be at starting.\\n\\nWhen fetching the tweets we simply check is the tweet id belongs to the userId or any of its friend if yes add it to answer and do, it till we fetch the top 10 recent tweets by the user or its friend\\n# Code\\n```\\nclass Twitter {\\n    int timer = INT_MAX;\\n    map<int, map<int, bool>> friends;\\n    // map user id with user friends map\\n    map<int, pair<int, int>> tweets;\\n    // time {userId, tweetId}\\npublic:\\n    Twitter() {\\n    }\\n    \\n    void postTweet(int userId, int tweetId) {\\n        tweets[timer--] = {userId, tweetId};\\n    }\\n    \\n    vector<int> getNewsFeed(int userId) {\\n        vector<int> ans;\\n        for(auto it: tweets){\\n            if(it.second.first == userId || friends[userId].find(it.second.first)!=friends[userId].end())\\n                ans.push_back(it.second.second);\\n            if(ans.size() == 10) break;\\n        }\\n        return ans;\\n    }\\n    \\n    void follow(int followerId, int followeeId) {\\n        friends[followerId][followeeId] = true;\\n    }\\n    \\n    void unfollow(int followerId, int followeeId) {\\n        friends[followerId].erase(followeeId);\\n    }\\n};\\n\\n/**\\n * Your Twitter object will be instantiated and called as such:\\n * Twitter* obj = new Twitter();\\n * obj->postTweet(userId,tweetId);\\n * vector<int> param_2 = obj->getNewsFeed(userId);\\n * obj->follow(followerId,followeeId);\\n * obj->unfollow(followerId,followeeId);\\n */\\n```",
        "level": "medium",
        "buggy_code": "\nclass Twitter {\n    int timer = INT_MAX;\n    map<int, map<int, bool>> friends;\n    map<int, pair<int, int>> tweets;\n\npublic:\n    Twitter() {\n    }\n    \n    void postTweet(int userId, int tweetId) {\n        tweets[timer--] = {userId, tweetId};\n    }\n    \n    vector<int> getNewsFeed(int userId) {\n        vector<int> ans;\n        for(auto it: tweets){\n            if(it.second.first == userId || friends[userId].find(it.second.first)!=friends[userId].end())\n                ans.push_back(it.second.second);\n            if(ans.length() == 10) break;\n        }\n        return ans;\n    }\n    \n    void follow(int followerId, int followeeId) {\n        friends[followerId][followeeId] = true;\n    }\n    \n    void unfollow(int followerId, int followeeId) {\n        friends[followerId].erase(followeeId);\n    }\n};\n<bug>\n<exp>\nUsed .length() which is incorrect, it should be .size() for vectors in C++.\n</exp",
        "explanations": "\nUsed .length() which is incorrect, it should be .size() for vectors in C++.\n",
        "fixed_code": "\nclass Twitter {\n    int timer = INT_MAX;\n    map<int, map<int, bool>> friends;\n    map<int, pair<int, int>> tweets;\n\npublic:\n    Twitter() {\n    }\n    \n    void postTweet(int userId, int tweetId) {\n        tweets[timer--] = {userId, tweetId};\n    }\n    \n    vector<int> getNewsFeed(int userId) {\n        vector<int> ans;\n        for(auto it: tweets){\n            if(it.second.first == userId || friends[userId].find(it.second.first)!=friends[userId].end())\n                ans.push_back(it.second.second);\n            if(ans.size() == 10) break;\n        }\n        return ans;\n    }\n    \n    void follow(int followerId, int followeeId) {\n        friends[followerId][followeeId] = true;\n    }\n    \n    void unfollow(int followerId, int followeeId) {\n        friends[followerId].erase(followeeId);\n    }\n};\n",
        "fixing_exp": "\nUsed .size() which is correct for vectors in C++",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 14,
            "lang": "cpp",
            "run_success": false,
            "status_runtime": "N/A",
            "memory": 56328000,
            "display_runtime": "3542",
            "question_id": "355",
            "elapsed_time": 3702,
            "compare_result": "11111111111111110",
            "code_output": "[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
            "std_output": "",
            "last_testcase": "[\"Twitter\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"postTweet\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\",\"getNewsFeed\"]\n[[],[3,0],[3,1],[3,2],[3,3],[3,4],[3,5],[3,6],[3,7],[3,8],[3,9],[3,10],[3,11],[3,12],[3,13],[3,14],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,21],[3,22],[3,23],[3,24],[3,25],[3,26],[3,27],[3,28],[3,29],[3,30],[3,31],[3,32],[3,33],[3,34],[3,35],[3,36],[3,37],[3,38],[3,39],[3,40],[3,41],[3,42],[3,43],[3,44],[3,45],[3,46],[3,47],[3,48],[3,49],[3,50],[3,51],[3,52],[3,53],[3,54],[3,55],[3,56],[3,57],[3,58],[3,59],[3,60],[3,61],[3,62],[3,63],[3,64],[3,65],[3,66],[3,67],[3,68],[3,69],[3,70],[3,71],[3,72],[3,73],[3,74],[3,75],[3,76],[3,77],[3,78],[3,79],[3,80],[3,81],[3,82],[3,83],[3,84],[3,85],[3,86],[3,87],[3,88],[3,89],[3,90],[3,91],[3,92],[3,93],[3,94],[3,95],[3,96],[3,97],[3,98],[3,99],[3,100],[3,101],[3,102],[3,103],[3,104],[3,105],[3,106],[3,107],[3,108],[3,109],[3,110],[3,111],[3,112],[3,113],[3,114],[3,115],[3,116],[3,117],[3,118],[3,119],[3,120],[3,121],[3,122],[3,123],[3,124],[3,125],[3,126],[3,127],[3,128],[3,129],[3,130],[3,131],[3,132],[3,133],[3,134],[3,135],[3,136],[3,137],[3,138],[3,139],[3,140],[3,141],[3,142],[3,143],[3,144],[3,145],[3,146],[3,147],[3,148],[3,149],[3,150],[3,151],[3,152],[3,153],[3,154],[3,155],[3,156],[3,157],[3,158],[3,159],[3,160],[3,161],[3,162],[3,163],[3,164],[3,165],[3,166],[3,167],[3,168],[3,169],[3,170],[3,171],[3,172],[3,173],[3,174],[3,175],[3,176],[3,177],[3,178],[3,179],[3,180],[3,181],[3,182],[3,183],[3,184],[3,185],[3,186],[3,187],[3,188],[3,189],[3,190],[3,191],[3,192],[3,193],[3,194],[3,195],[3,196],[3,197],[3,198],[3,199],[3,200],[3,201],[3,202],[3,203],[3,204],[3,205],[3,206],[3,207],[3,208],[3,209],[3,210],[3,211],[3,212],[3,213],[3,214],[3,215],[3,216],[3,217],[3,218],[3,219],[3,220],[3,221],[3,222],[3,223],[3,224],[3,225],[3,226],[3,227],[3,228],[3,229],[3,230],[3,231],[3,232],[3,233],[3,234],[3,235],[3,236],[3,237],[3,238],[3,239],[3,240],[3,241],[3,242],[3,243],[3,244],[3,245],[3,246],[3,247],[3,248],[3,249],[3,250],[3,251],[3,252],[3,253],[3,254],[3,255],[3,256],[3,257],[3,258],[3,259],[3,260],[3,261],[3,262],[3,263],[3,264],[3,265],[3,266],[3,267],[3,268],[3,269],[3,270],[3,271],[3,272],[3,273],[3,274],[3,275],[3,276],[3,277],[3,278],[3,279],[3,280],[3,281],[3,282],[3,283],[3,284],[3,285],[3,286],[3,287],[3,288],[3,289],[3,290],[3,291],[3,292],[3,293],[3,294],[3,295],[3,296],[3,297],[3,298],[3,299],[3,300],[3,301],[3,302],[3,303],[3,304],[3,305],[3,306],[3,307],[3,308],[3,309],[3,310],[3,311],[3,312],[3,313],[3,314],[3,315],[3,316],[3,317],[3,318],[3,319],[3,320],[3,321],[3,322],[3,323],[3,324],[3,325],[3,326],[3,327],[3,328],[3,329],[3,330],[3,331],[3,332],[3,333],[3,334],[3,335],[3,336],[3,337],[3,338],[3,339],[3,340],[3,341],[3,342],[3,343],[3,344],[3,345],[3,346],[3,347],[3,348],[3,349],[3,350],[3,351],[3,352],[3,353],[3,354],[3,355],[3,356],[3,357],[3,358],[3,359],[3,360],[3,361],[3,362],[3,363],[3,364],[3,365],[3,366],[3,367],[3,368],[3,369],[3,370],[3,371],[3,372],[3,373],[3,374],[3,375],[3,376],[3,377],[3,378],[3,379],[3,380],[3,381],[3,382],[3,383],[3,384],[3,385],[3,386],[3,387],[3,388],[3,389],[3,390],[3,391],[3,392],[3,393],[3,394],[3,395],[3,396],[3,397],[3,398],[3,399],[3,400],[3,401],[3,402],[3,403],[3,404],[3,405],[3,406],[3,407],[3,408],[3,409],[3,410],[3,411],[3,412],[3,413],[3,414],[3,415],[3,416],[3,417],[3,418],[3,419],[3,420],[3,421],[3,422],[3,423],[3,424],[3,425],[3,426],[3,427],[3,428],[3,429],[3,430],[3,431],[3,432],[3,433],[3,434],[3,435],[3,436],[3,437],[3,438],[3,439],[3,440],[3,441],[3,442],[3,443],[3,444],[3,445],[3,446],[3,447],[3,448],[3,449],[3,450],[3,451],[3,452],[3,453],[3,454],[3,455],[3,456],[3,457],[3,458],[3,459],[3,460],[3,461],[3,462],[3,463],[3,464],[3,465],[3,466],[3,467],[3,468],[3,469],[3,470],[3,471],[3,472],[3,473],[3,474],[3,475],[3,476],[3,477],[3,478],[3,479],[3,480],[3,481],[3,482],[3,483],[3,484],[3,485],[3,486],[3,487],[3,488],[3,489],[3,490],[3,491],[3,492],[3,493],[3,494],[3,495],[3,496],[3,497],[3,498],[3,499],[3,500],[3,501],[3,502],[3,503],[3,504],[3,505],[3,506],[3,507],[3,508],[3,509],[3,510],[3,511],[3,512],[3,513],[3,514],[3,515],[3,516],[3,517],[3,518],[3,519],[3,520],[3,521],[3,522],[3,523],[3,524],[3,525],[3,526],[3,527],[3,528],[3,529],[3,530],[3,531],[3,532],[3,533],[3,534],[3,535],[3,536],[3,537],[3,538],[3,539],[3,540],[3,541],[3,542],[3,543],[3,544],[3,545],[3,546],[3,547],[3,548],[3,549],[3,550],[3,551],[3,552],[3,553],[3,554],[3,555],[3,556],[3,557],[3,558],[3,559],[3,560],[3,561],[3,562],[3,563],[3,564],[3,565],[3,566],[3,567],[3,568],[3,569],[3,570],[3,571],[3,572],[3,573],[3,574],[3,575],[3,576],[3,577],[3,578],[3,579],[3,580],[3,581],[3,582],[3,583],[3,584],[3,585],[3,586],[3,587],[3,588],[3,589],[3,590],[3,591],[3,592],[3,593],[3,594],[3,595],[3,596],[3,597],[3,598],[3,599],[3,600],[3,601],[3,602],[3,603],[3,604],[3,605],[3,606],[3,607],[3,608],[3,609],[3,610],[3,611],[3,612],[3,613],[3,614],[3,615],[3,616],[3,617],[3,618],[3,619],[3,620],[3,621],[3,622],[3,623],[3,624],[3,625],[3,626],[3,627],[3,628],[3,629],[3,630],[3,631],[3,632],[3,633],[3,634],[3,635],[3,636],[3,637],[3,638],[3,639],[3,640],[3,641],[3,642],[3,643],[3,644],[3,645],[3,646],[3,647],[3,648],[3,649],[3,650],[3,651],[3,652],[3,653],[3,654],[3,655],[3,656],[3,657],[3,658],[3,659],[3,660],[3,661],[3,662],[3,663],[3,664],[3,665],[3,666],[3,667],[3,668],[3,669],[3,670],[3,671],[3,672],[3,673],[3,674],[3,675],[3,676],[3,677],[3,678],[3,679],[3,680],[3,681],[3,682],[3,683],[3,684],[3,685],[3,686],[3,687],[3,688],[3,689],[3,690],[3,691],[3,692],[3,693],[3,694],[3,695],[3,696],[3,697],[3,698],[3,699],[3,700],[3,701],[3,702],[3,703],[3,704],[3,705],[3,706],[3,707],[3,708],[3,709],[3,710],[3,711],[3,712],[3,713],[3,714],[3,715],[3,716],[3,717],[3,718],[3,719],[3,720],[3,721],[3,722],[3,723],[3,724],[3,725],[3,726],[3,727],[3,728],[3,729],[3,730],[3,731],[3,732],[3,733],[3,734],[3,735],[3,736],[3,737],[3,738],[3,739],[3,740],[3,741],[3,742],[3,743],[3,744],[3,745],[3,746],[3,747],[3,748],[3,749],[3,750],[3,751],[3,752],[3,753],[3,754],[3,755],[3,756],[3,757],[3,758],[3,759],[3,760],[3,761],[3,762],[3,763],[3,764],[3,765],[3,766],[3,767],[3,768],[3,769],[3,770],[3,771],[3,772],[3,773],[3,774],[3,775],[3,776],[3,777],[3,778],[3,779],[3,780],[3,781],[3,782],[3,783],[3,784],[3,785],[3,786],[3,787],[3,788],[3,789],[3,790],[3,791],[3,792],[3,793],[3,794],[3,795],[3,796],[3,797],[3,798],[3,799],[3,800],[3,801],[3,802],[3,803],[3,804],[3,805],[3,806],[3,807],[3,808],[3,809],[3,810],[3,811],[3,812],[3,813],[3,814],[3,815],[3,816],[3,817],[3,818],[3,819],[3,820],[3,821],[3,822],[3,823],[3,824],[3,825],[3,826],[3,827],[3,828],[3,829],[3,830],[3,831],[3,832],[3,833],[3,834],[3,835],[3,836],[3,837],[3,838],[3,839],[3,840],[3,841],[3,842],[3,843],[3,844],[3,845],[3,846],[3,847],[3,848],[3,849],[3,850],[3,851],[3,852],[3,853],[3,854],[3,855],[3,856],[3,857],[3,858],[3,859],[3,860],[3,861],[3,862],[3,863],[3,864],[3,865],[3,866],[3,867],[3,868],[3,869],[3,870],[3,871],[3,872],[3,873],[3,874],[3,875],[3,876],[3,877],[3,878],[3,879],[3,880],[3,881],[3,882],[3,883],[3,884],[3,885],[3,886],[3,887],[3,888],[3,889],[3,890],[3,891],[3,892],[3,893],[3,894],[3,895],[3,896],[3,897],[3,898],[3,899],[3,900],[3,901],[3,902],[3,903],[3,904],[3,905],[3,906],[3,907],[3,908],[3,909],[3,910],[3,911],[3,912],[3,913],[3,914],[3,915],[3,916],[3,917],[3,918],[3,919],[3,920],[3,921],[3,922],[3,923],[3,924],[3,925],[3,926],[3,927],[3,928],[3,929],[3,930],[3,931],[3,932],[3,933],[3,934],[3,935],[3,936],[3,937],[3,938],[3,939],[3,940],[3,941],[3,942],[3,943],[3,944],[3,945],[3,946],[3,947],[3,948],[3,949],[3,950],[3,951],[3,952],[3,953],[3,954],[3,955],[3,956],[3,957],[3,958],[3,959],[3,960],[3,961],[3,962],[3,963],[3,964],[3,965],[3,966],[3,967],[3,968],[3,969],[3,970],[3,971],[3,972],[3,973],[3,974],[3,975],[3,976],[3,977],[3,978],[3,979],[3,980],[3,981],[3,982],[3,983],[3,984],[3,985],[3,986],[3,987],[3,988],[3,989],[3,990],[3,991],[3,992],[3,993],[3,994],[3,995],[3,996],[3,997],[3,998],[3,999],[3,1000],[3,1001],[3,1002],[3,1003],[3,1004],[3,1005],[3,1006],[3,1007],[3,1008],[3,1009],[3,1010],[3,1011],[3,1012],[3,1013],[3,1014],[3,1015],[3,1016],[3,1017],[3,1018],[3,1019],[3,1020],[3,1021],[3,1022],[3,1023],[3,1024],[3,1025],[3,1026],[3,1027],[3,1028],[3,1029],[3,1030],[3,1031],[3,1032],[3,1033],[3,1034],[3,1035],[3,1036],[3,1037],[3,1038],[3,1039],[3,1040],[3,1041],[3,1042],[3,1043],[3,1044],[3,1045],[3,1046],[3,1047],[3,1048],[3,1049],[3,1050],[3,1051],[3,1052],[3,1053],[3,1054],[3,1055],[3,1056],[3,1057],[3,1058],[3,1059],[3,1060],[3,1061],[3,1062],[3,1063],[3,1064],[3,1065],[3,1066],[3,1067],[3,1068],[3,1069],[3,1070],[3,1071],[3,1072],[3,1073],[3,1074],[3,1075],[3,1076],[3,1077],[3,1078],[3,1079],[3,1080],[3,1081],[3,1082],[3,1083],[3,1084],[3,1085],[3,1086],[3,1087],[3,1088],[3,1089],[3,1090],[3,1091],[3,1092],[3,1093],[3,1094],[3,1095],[3,1096],[3,1097],[3,1098],[3,1099],[3,1100],[3,1101],[3,1102],[3,1103],[3,1104],[3,1105],[3,1106],[3,1107],[3,1108],[3,1109],[3,1110],[3,1111],[3,1112],[3,1113],[3,1114],[3,1115],[3,1116],[3,1117],[3,1118],[3,1119],[3,1120],[3,1121],[3,1122],[3,1123],[3,1124],[3,1125],[3,1126],[3,1127],[3,1128],[3,1129],[3,1130],[3,1131],[3,1132],[3,1133],[3,1134],[3,1135],[3,1136],[3,1137],[3,1138],[3,1139],[3,1140],[3,1141],[3,1142],[3,1143],[3,1144],[3,1145],[3,1146],[3,1147],[3,1148],[3,1149],[3,1150],[3,1151],[3,1152],[3,1153],[3,1154],[3,1155],[3,1156],[3,1157],[3,1158],[3,1159],[3,1160],[3,1161],[3,1162],[3,1163],[3,1164],[3,1165],[3,1166],[3,1167],[3,1168],[3,1169],[3,1170],[3,1171],[3,1172],[3,1173],[3,1174],[3,1175],[3,1176],[3,1177],[3,1178],[3,1179],[3,1180],[3,1181],[3,1182],[3,1183],[3,1184],[3,1185],[3,1186],[3,1187],[3,1188],[3,1189],[3,1190],[3,1191],[3,1192],[3,1193],[3,1194],[3,1195],[3,1196],[3,1197],[3,1198],[3,1199],[3,1200],[3,1201],[3,1202],[3,1203],[3,1204],[3,1205],[3,1206],[3,1207],[3,1208],[3,1209],[3,1210],[3,1211],[3,1212],[3,1213],[3,1214],[3,1215],[3,1216],[3,1217],[3,1218],[3,1219],[3,1220],[3,1221],[3,1222],[3,1223],[3,1224],[3,1225],[3,1226],[3,1227],[3,1228],[3,1229],[3,1230],[3,1231],[3,1232],[3,1233],[3,1234],[3,1235],[3,1236],[3,1237],[3,1238],[3,1239],[3,1240],[3,1241],[3,1242],[3,1243],[3,1244],[3,1245],[3,1246],[3,1247],[3,1248],[3,1249],[3,1250],[3,1251],[3,1252],[3,1253],[3,1254],[3,1255],[3,1256],[3,1257],[3,1258],[3,1259],[3,1260],[3,1261],[3,1262],[3,1263],[3,1264],[3,1265],[3,1266],[3,1267],[3,1268],[3,1269],[3,1270],[3,1271],[3,1272],[3,1273],[3,1274],[3,1275],[3,1276],[3,1277],[3,1278],[3,1279],[3,1280],[3,1281],[3,1282],[3,1283],[3,1284],[3,1285],[3,1286],[3,1287],[3,1288],[3,1289],[3,1290],[3,1291],[3,1292],[3,1293],[3,1294],[3,1295],[3,1296],[3,1297],[3,1298],[3,1299],[3,1300],[3,1301],[3,1302],[3,1303],[3,1304],[3,1305],[3,1306],[3,1307],[3,1308],[3,1309],[3,1310],[3,1311],[3,1312],[3,1313],[3,1314],[3,1315],[3,1316],[3,1317],[3,1318],[3,1319],[3,1320],[3,1321],[3,1322],[3,1323],[3,1324],[3,1325],[3,1326],[3,1327],[3,1328],[3,1329],[3,1330],[3,1331],[3,1332],[3,1333],[3,1334],[3,1335],[3,1336],[3,1337],[3,1338],[3,1339],[3,1340],[3,1341],[3,1342],[3,1343],[3,1344],[3,1345],[3,1346],[3,1347],[3,1348],[3,1349],[3,1350],[3,1351],[3,1352],[3,1353],[3,1354],[3,1355],[3,1356],[3,1357],[3,1358],[3,1359],[3,1360],[3,1361],[3,1362],[3,1363],[3,1364],[3,1365],[3,1366],[3,1367],[3,1368],[3,1369],[3,1370],[3,1371],[3,1372],[3,1373],[3,1374],[3,1375],[3,1376],[3,1377],[3,1378],[3,1379],[3,1380],[3,1381],[3,1382],[3,1383],[3,1384],[3,1385],[3,1386],[3,1387],[3,1388],[3,1389],[3,1390],[3,1391],[3,1392],[3,1393],[3,1394],[3,1395],[3,1396],[3,1397],[3,1398],[3,1399],[3,1400],[3,1401],[3,1402],[3,1403],[3,1404],[3,1405],[3,1406],[3,1407],[3,1408],[3,1409],[3,1410],[3,1411],[3,1412],[3,1413],[3,1414],[3,1415],[3,1416],[3,1417],[3,1418],[3,1419],[3,1420],[3,1421],[3,1422],[3,1423],[3,1424],[3,1425],[3,1426],[3,1427],[3,1428],[3,1429],[3,1430],[3,1431],[3,1432],[3,1433],[3,1434],[3,1435],[3,1436],[3,1437],[3,1438],[3,1439],[3,1440],[3,1441],[3,1442],[3,1443],[3,1444],[3,1445],[3,1446],[3,1447],[3,1448],[3,1449],[3,1450],[3,1451],[3,1452],[3,1453],[3,1454],[3,1455],[3,1456],[3,1457],[3,1458],[3,1459],[3,1460],[3,1461],[3,1462],[3,1463],[3,1464],[3,1465],[3,1466],[3,1467],[3,1468],[3,1469],[3,1470],[3,1471],[3,1472],[3,1473],[3,1474],[3,1475],[3,1476],[3,1477],[3,1478],[3,1479],[3,1480],[3,1481],[3,1482],[3,1483],[3,1484],[3,1485],[3,1486],[3,1487],[3,1488],[3,1489],[3,1490],[3,1491],[3,1492],[3,1493],[3,1494],[3,1495],[3,1496],[3,1497],[3,1498],[3,1499],[3,1500],[3,1501],[3,1502],[3,1503],[3,1504],[3,1505],[3,1506],[3,1507],[3,1508],[3,1509],[3,1510],[3,1511],[3,1512],[3,1513],[3,1514],[3,1515],[3,1516],[3,1517],[3,1518],[3,1519],[3,1520],[3,1521],[3,1522],[3,1523],[3,1524],[3,1525],[3,1526],[3,1527],[3,1528],[3,1529],[3,1530],[3,1531],[3,1532],[3,1533],[3,1534],[3,1535],[3,1536],[3,1537],[3,1538],[3,1539],[3,1540],[3,1541],[3,1542],[3,1543],[3,1544],[3,1545],[3,1546],[3,1547],[3,1548],[3,1549],[3,1550],[3,1551],[3,1552],[3,1553],[3,1554],[3,1555],[3,1556],[3,1557],[3,1558],[3,1559],[3,1560],[3,1561],[3,1562],[3,1563],[3,1564],[3,1565],[3,1566],[3,1567],[3,1568],[3,1569],[3,1570],[3,1571],[3,1572],[3,1573],[3,1574],[3,1575],[3,1576],[3,1577],[3,1578],[3,1579],[3,1580],[3,1581],[3,1582],[3,1583],[3,1584],[3,1585],[3,1586],[3,1587],[3,1588],[3,1589],[3,1590],[3,1591],[3,1592],[3,1593],[3,1594],[3,1595],[3,1596],[3,1597],[3,1598],[3,1599],[3,1600],[3,1601],[3,1602],[3,1603],[3,1604],[3,1605],[3,1606],[3,1607],[3,1608],[3,1609],[3,1610],[3,1611],[3,1612],[3,1613],[3,1614],[3,1615],[3,1616],[3,1617],[3,1618],[3,1619],[3,1620],[3,1621],[3,1622],[3,1623],[3,1624],[3,1625],[3,1626],[3,1627],[3,1628],[3,1629],[3,1630],[3,1631],[3,1632],[3,1633],[3,1634],[3,1635],[3,1636],[3,1637],[3,1638],[3,1639],[3,1640],[3,1641],[3,1642],[3,1643],[3,1644],[3,1645],[3,1646],[3,1647],[3,1648],[3,1649],[3,1650],[3,1651],[3,1652],[3,1653],[3,1654],[3,1655],[3,1656],[3,1657],[3,1658],[3,1659],[3,1660],[3,1661],[3,1662],[3,1663],[3,1664],[3,1665],[3,1666],[3,1667],[3,1668],[3,1669],[3,1670],[3,1671],[3,1672],[3,1673],[3,1674],[3,1675],[3,1676],[3,1677],[3,1678],[3,1679],[3,1680],[3,1681],[3,1682],[3,1683],[3,1684],[3,1685],[3,1686],[3,1687],[3,1688],[3,1689],[3,1690],[3,1691],[3,1692],[3,1693],[3,1694],[3,1695],[3,1696],[3,1697],[3,1698],[3,1699],[3,1700],[3,1701],[3,1702],[3,1703],[3,1704],[3,1705],[3,1706],[3,1707],[3,1708],[3,1709],[3,1710],[3,1711],[3,1712],[3,1713],[3,1714],[3,1715],[3,1716],[3,1717],[3,1718],[3,1719],[3,1720],[3,1721],[3,1722],[3,1723],[3,1724],[3,1725],[3,1726],[3,1727],[3,1728],[3,1729],[3,1730],[3,1731],[3,1732],[3,1733],[3,1734],[3,1735],[3,1736],[3,1737],[3,1738],[3,1739],[3,1740],[3,1741],[3,1742],[3,1743],[3,1744],[3,1745],[3,1746],[3,1747],[3,1748],[3,1749],[3,1750],[3,1751],[3,1752],[3,1753],[3,1754],[3,1755],[3,1756],[3,1757],[3,1758],[3,1759],[3,1760],[3,1761],[3,1762],[3,1763],[3,1764],[3,1765],[3,1766],[3,1767],[3,1768],[3,1769],[3,1770],[3,1771],[3,1772],[3,1773],[3,1774],[3,1775],[3,1776],[3,1777],[3,1778],[3,1779],[3,1780],[3,1781],[3,1782],[3,1783],[3,1784],[3,1785],[3,1786],[3,1787],[3,1788],[3,1789],[3,1790],[3,1791],[3,1792],[3,1793],[3,1794],[3,1795],[3,1796],[3,1797],[3,1798],[3,1799],[3,1800],[3,1801],[3,1802],[3,1803],[3,1804],[3,1805],[3,1806],[3,1807],[3,1808],[3,1809],[3,1810],[3,1811],[3,1812],[3,1813],[3,1814],[3,1815],[3,1816],[3,1817],[3,1818],[3,1819],[3,1820],[3,1821],[3,1822],[3,1823],[3,1824],[3,1825],[3,1826],[3,1827],[3,1828],[3,1829],[3,1830],[3,1831],[3,1832],[3,1833],[3,1834],[3,1835],[3,1836],[3,1837],[3,1838],[3,1839],[3,1840],[3,1841],[3,1842],[3,1843],[3,1844],[3,1845],[3,1846],[3,1847],[3,1848],[3,1849],[3,1850],[3,1851],[3,1852],[3,1853],[3,1854],[3,1855],[3,1856],[3,1857],[3,1858],[3,1859],[3,1860],[3,1861],[3,1862],[3,1863],[3,1864],[3,1865],[3,1866],[3,1867],[3,1868],[3,1869],[3,1870],[3,1871],[3,1872],[3,1873],[3,1874],[3,1875],[3,1876],[3,1877],[3,1878],[3,1879],[3,1880],[3,1881],[3,1882],[3,1883],[3,1884],[3,1885],[3,1886],[3,1887],[3,1888],[3,1889],[3,1890],[3,1891],[3,1892],[3,1893],[3,1894],[3,1895],[3,1896],[3,1897],[3,1898],[3,1899],[3,1900],[3,1901],[3,1902],[3,1903],[3,1904],[3,1905],[3,1906],[3,1907],[3,1908],[3,1909],[3,1910],[3,1911],[3,1912],[3,1913],[3,1914],[3,1915],[3,1916],[3,1917],[3,1918],[3,1919],[3,1920],[3,1921],[3,1922],[3,1923],[3,1924],[3,1925],[3,1926],[3,1927],[3,1928],[3,1929],[3,1930],[3,1931],[3,1932],[3,1933],[3,1934],[3,1935],[3,1936],[3,1937],[3,1938],[3,1939],[3,1940],[3,1941],[3,1942],[3,1943],[3,1944],[3,1945],[3,1946],[3,1947],[3,1948],[3,1949],[3,1950],[3,1951],[3,1952],[3,1953],[3,1954],[3,1955],[3,1956],[3,1957],[3,1958],[3,1959],[3,1960],[3,1961],[3,1962],[3,1963],[3,1964],[3,1965],[3,1966],[3,1967],[3,1968],[3,1969],[3,1970],[3,1971],[3,1972],[3,1973],[3,1974],[3,1975],[3,1976],[3,1977],[3,1978],[3,1979],[3,1980],[3,1981],[3,1982],[3,1983],[3,1984],[3,1985],[3,1986],[3,1987],[3,1988],[3,1989],[3,1990],[3,1991],[3,1992],[3,1993],[3,1994],[3,1995],[3,1996],[3,1997],[3,1998],[3,1999],[3,2000],[3,2001],[3,2002],[3,2003],[3,2004],[3,2005],[3,2006],[3,2007],[3,2008],[3,2009],[3,2010],[3,2011],[3,2012],[3,2013],[3,2014],[3,2015],[3,2016],[3,2017],[3,2018],[3,2019],[3,2020],[3,2021],[3,2022],[3,2023],[3,2024],[3,2025],[3,2026],[3,2027],[3,2028],[3,2029],[3,2030],[3,2031],[3,2032],[3,2033],[3,2034],[3,2035],[3,2036],[3,2037],[3,2038],[3,2039],[3,2040],[3,2041],[3,2042],[3,2043],[3,2044],[3,2045],[3,2046],[3,2047],[3,2048],[3,2049],[3,2050],[3,2051],[3,2052],[3,2053],[3,2054],[3,2055],[3,2056],[3,2057],[3,2058],[3,2059],[3,2060],[3,2061],[3,2062],[3,2063],[3,2064],[3,2065],[3,2066],[3,2067],[3,2068],[3,2069],[3,2070],[3,2071],[3,2072],[3,2073],[3,2074],[3,2075],[3,2076],[3,2077],[3,2078],[3,2079],[3,2080],[3,2081],[3,2082],[3,2083],[3,2084],[3,2085],[3,2086],[3,2087],[3,2088],[3,2089],[3,2090],[3,2091],[3,2092],[3,2093],[3,2094],[3,2095],[3,2096],[3,2097],[3,2098],[3,2099],[3,2100],[3,2101],[3,2102],[3,2103],[3,2104],[3,2105],[3,2106],[3,2107],[3,2108],[3,2109],[3,2110],[3,2111],[3,2112],[3,2113],[3,2114],[3,2115],[3,2116],[3,2117],[3,2118],[3,2119],[3,2120],[3,2121],[3,2122],[3,2123],[3,2124],[3,2125],[3,2126],[3,2127],[3,2128],[3,2129],[3,2130],[3,2131],[3,2132],[3,2133],[3,2134],[3,2135],[3,2136],[3,2137],[3,2138],[3,2139],[3,2140],[3,2141],[3,2142],[3,2143],[3,2144],[3,2145],[3,2146],[3,2147],[3,2148],[3,2149],[3,2150],[3,2151],[3,2152],[3,2153],[3,2154],[3,2155],[3,2156],[3,2157],[3,2158],[3,2159],[3,2160],[3,2161],[3,2162],[3,2163],[3,2164],[3,2165],[3,2166],[3,2167],[3,2168],[3,2169],[3,2170],[3,2171],[3,2172],[3,2173],[3,2174],[3,2175],[3,2176],[3,2177],[3,2178],[3,2179],[3,2180],[3,2181],[3,2182],[3,2183],[3,2184],[3,2185],[3,2186],[3,2187],[3,2188],[3,2189],[3,2190],[3,2191],[3,2192],[3,2193],[3,2194],[3,2195],[3,2196],[3,2197],[3,2198],[3,2199],[3,2200],[3,2201],[3,2202],[3,2203],[3,2204],[3,2205],[3,2206],[3,2207],[3,2208],[3,2209],[3,2210],[3,2211],[3,2212],[3,2213],[3,2214],[3,2215],[3,2216],[3,2217],[3,2218],[3,2219],[3,2220],[3,2221],[3,2222],[3,2223],[3,2224],[3,2225],[3,2226],[3,2227],[3,2228],[3,2229],[3,2230],[3,2231],[3,2232],[3,2233],[3,2234],[3,2235],[3,2236],[3,2237],[3,2238],[3,2239],[3,2240],[3,2241],[3,2242],[3,2243],[3,2244],[3,2245],[3,2246],[3,2247],[3,2248],[3,2249],[3,2250],[3,2251],[3,2252],[3,2253],[3,2254],[3,2255],[3,2256],[3,2257],[3,2258],[3,2259],[3,2260],[3,2261],[3,2262],[3,2263],[3,2264],[3,2265],[3,2266],[3,2267],[3,2268],[3,2269],[3,2270],[3,2271],[3,2272],[3,2273],[3,2274],[3,2275],[3,2276],[3,2277],[3,2278],[3,2279],[3,2280],[3,2281],[3,2282],[3,2283],[3,2284],[3,2285],[3,2286],[3,2287],[3,2288],[3,2289],[3,2290],[3,2291],[3,2292],[3,2293],[3,2294],[3,2295],[3,2296],[3,2297],[3,2298],[3,2299],[3,2300],[3,2301],[3,2302],[3,2303],[3,2304],[3,2305],[3,2306],[3,2307],[3,2308],[3,2309],[3,2310],[3,2311],[3,2312],[3,2313],[3,2314],[3,2315],[3,2316],[3,2317],[3,2318],[3,2319],[3,2320],[3,2321],[3,2322],[3,2323],[3,2324],[3,2325],[3,2326],[3,2327],[3,2328],[3,2329],[3,2330],[3,2331],[3,2332],[3,2333],[3,2334],[3,2335],[3,2336],[3,2337],[3,2338],[3,2339],[3,2340],[3,2341],[3,2342],[3,2343],[3,2344],[3,2345],[3,2346],[3,2347],[3,2348],[3,2349],[3,2350],[3,2351],[3,2352],[3,2353],[3,2354],[3,2355],[3,2356],[3,2357],[3,2358],[3,2359],[3,2360],[3,2361],[3,2362],[3,2363],[3,2364],[3,2365],[3,2366],[3,2367],[3,2368],[3,2369],[3,2370],[3,2371],[3,2372],[3,2373],[3,2374],[3,2375],[3,2376],[3,2377],[3,2378],[3,2379],[3,2380],[3,2381],[3,2382],[3,2383],[3,2384],[3,2385],[3,2386],[3,2387],[3,2388],[3,2389],[3,2390],[3,2391],[3,2392],[3,2393],[3,2394],[3,2395],[3,2396],[3,2397],[3,2398],[3,2399],[3,2400],[3,2401],[3,2402],[3,2403],[3,2404],[3,2405],[3,2406],[3,2407],[3,2408],[3,2409],[3,2410],[3,2411],[3,2412],[3,2413],[3,2414],[3,2415],[3,2416],[3,2417],[3,2418],[3,2419],[3,2420],[3,2421],[3,2422],[3,2423],[3,2424],[3,2425],[3,2426],[3,2427],[3,2428],[3,2429],[3,2430],[3,2431],[3,2432],[3,2433],[3,2434],[3,2435],[3,2436],[3,2437],[3,2438],[3,2439],[3,2440],[3,2441],[3,2442],[3,2443],[3,2444],[3,2445],[3,2446],[3,2447],[3,2448],[3,2449],[3,2450],[3,2451],[3,2452],[3,2453],[3,2454],[3,2455],[3,2456],[3,2457],[3,2458],[3,2459],[3,2460],[3,2461],[3,2462],[3,2463],[3,2464],[3,2465],[3,2466],[3,2467],[3,2468],[3,2469],[3,2470],[3,2471],[3,2472],[3,2473],[3,2474],[3,2475],[3,2476],[3,2477],[3,2478],[3,2479],[3,2480],[3,2481],[3,2482],[3,2483],[3,2484],[3,2485],[3,2486],[3,2487],[3,2488],[3,2489],[3,2490],[3,2491],[3,2492],[3,2493],[3,2494],[3,2495],[3,2496],[3,2497],[3,2498],[3,2499],[3,2500],[3,2501],[3,2502],[3,2503],[3,2504],[3,2505],[3,2506],[3,2507],[3,2508],[3,2509],[3,2510],[3,2511],[3,2512],[3,2513],[3,2514],[3,2515],[3,2516],[3,2517],[3,2518],[3,2519],[3,2520],[3,2521],[3,2522],[3,2523],[3,2524],[3,2525],[3,2526],[3,2527],[3,2528],[3,2529],[3,2530],[3,2531],[3,2532],[3,2533],[3,2534],[3,2535],[3,2536],[3,2537],[3,2538],[3,2539],[3,2540],[3,2541],[3,2542],[3,2543],[3,2544],[3,2545],[3,2546],[3,2547],[3,2548],[3,2549],[3,2550],[3,2551],[3,2552],[3,2553],[3,2554],[3,2555],[3,2556],[3,2557],[3,2558],[3,2559],[3,2560],[3,2561],[3,2562],[3,2563],[3,2564],[3,2565],[3,2566],[3,2567],[3,2568],[3,2569],[3,2570],[3,2571],[3,2572],[3,2573],[3,2574],[3,2575],[3,2576],[3,2577],[3,2578],[3,2579],[3,2580],[3,2581],[3,2582],[3,2583],[3,2584],[3,2585],[3,2586],[3,2587],[3,2588],[3,2589],[3,2590],[3,2591],[3,2592],[3,2593],[3,2594],[3,2595],[3,2596],[3,2597],[3,2598],[3,2599],[3,2600],[3,2601],[3,2602],[3,2603],[3,2604],[3,2605],[3,2606],[3,2607],[3,2608],[3,2609],[3,2610],[3,2611],[3,2612],[3,2613],[3,2614],[3,2615],[3,2616],[3,2617],[3,2618],[3,2619],[3,2620],[3,2621],[3,2622],[3,2623],[3,2624],[3,2625],[3,2626],[3,2627],[3,2628],[3,2629],[3,2630],[3,2631],[3,2632],[3,2633],[3,2634],[3,2635],[3,2636],[3,2637],[3,2638],[3,2639],[3,2640],[3,2641],[3,2642],[3,2643],[3,2644],[3,2645],[3,2646],[3,2647],[3,2648],[3,2649],[3,2650],[3,2651],[3,2652],[3,2653],[3,2654],[3,2655],[3,2656],[3,2657],[3,2658],[3,2659],[3,2660],[3,2661],[3,2662],[3,2663],[3,2664],[3,2665],[3,2666],[3,2667],[3,2668],[3,2669],[3,2670],[3,2671],[3,2672],[3,2673],[3,2674],[3,2675],[3,2676],[3,2677],[3,2678],[3,2679],[3,2680],[3,2681],[3,2682],[3,2683],[3,2684],[3,2685],[3,2686],[3,2687],[3,2688],[3,2689],[3,2690],[3,2691],[3,2692],[3,2693],[3,2694],[3,2695],[3,2696],[3,2697],[3,2698],[3,2699],[3,2700],[3,2701],[3,2702],[3,2703],[3,2704],[3,2705],[3,2706],[3,2707],[3,2708],[3,2709],[3,2710],[3,2711],[3,2712],[3,2713],[3,2714],[3,2715],[3,2716],[3,2717],[3,2718],[3,2719],[3,2720],[3,2721],[3,2722],[3,2723],[3,2724],[3,2725],[3,2726],[3,2727],[3,2728],[3,2729],[3,2730],[3,2731],[3,2732],[3,2733],[3,2734],[3,2735],[3,2736],[3,2737],[3,2738],[3,2739],[3,2740],[3,2741],[3,2742],[3,2743],[3,2744],[3,2745],[3,2746],[3,2747],[3,2748],[3,2749],[3,2750],[3,2751],[3,2752],[3,2753],[3,2754],[3,2755],[3,2756],[3,2757],[3,2758],[3,2759],[3,2760],[3,2761],[3,2762],[3,2763],[3,2764],[3,2765],[3,2766],[3,2767],[3,2768],[3,2769],[3,2770],[3,2771],[3,2772],[3,2773],[3,2774],[3,2775],[3,2776],[3,2777],[3,2778],[3,2779],[3,2780],[3,2781],[3,2782],[3,2783],[3,2784],[3,2785],[3,2786],[3,2787],[3,2788],[3,2789],[3,2790],[3,2791],[3,2792],[3,2793],[3,2794],[3,2795],[3,2796],[3,2797],[3,2798],[3,2799],[3,2800],[3,2801],[3,2802],[3,2803],[3,2804],[3,2805],[3,2806],[3,2807],[3,2808],[3,2809],[3,2810],[3,2811],[3,2812],[3,2813],[3,2814],[3,2815],[3,2816],[3,2817],[3,2818],[3,2819],[3,2820],[3,2821],[3,2822],[3,2823],[3,2824],[3,2825],[3,2826],[3,2827],[3,2828],[3,2829],[3,2830],[3,2831],[3,2832],[3,2833],[3,2834],[3,2835],[3,2836],[3,2837],[3,2838],[3,2839],[3,2840],[3,2841],[3,2842],[3,2843],[3,2844],[3,2845],[3,2846],[3,2847],[3,2848],[3,2849],[3,2850],[3,2851],[3,2852],[3,2853],[3,2854],[3,2855],[3,2856],[3,2857],[3,2858],[3,2859],[3,2860],[3,2861],[3,2862],[3,2863],[3,2864],[3,2865],[3,2866],[3,2867],[3,2868],[3,2869],[3,2870],[3,2871],[3,2872],[3,2873],[3,2874],[3,2875],[3,2876],[3,2877],[3,2878],[3,2879],[3,2880],[3,2881],[3,2882],[3,2883],[3,2884],[3,2885],[3,2886],[3,2887],[3,2888],[3,2889],[3,2890],[3,2891],[3,2892],[3,2893],[3,2894],[3,2895],[3,2896],[3,2897],[3,2898],[3,2899],[3,2900],[3,2901],[3,2902],[3,2903],[3,2904],[3,2905],[3,2906],[3,2907],[3,2908],[3,2909],[3,2910],[3,2911],[3,2912],[3,2913],[3,2914],[3,2915],[3,2916],[3,2917],[3,2918],[3,2919],[3,2920],[3,2921],[3,2922],[3,2923],[3,2924],[3,2925],[3,2926],[3,2927],[3,2928],[3,2929],[3,2930],[3,2931],[3,2932],[3,2933],[3,2934],[3,2935],[3,2936],[3,2937],[3,2938],[3,2939],[3,2940],[3,2941],[3,2942],[3,2943],[3,2944],[3,2945],[3,2946],[3,2947],[3,2948],[3,2949],[3,2950],[3,2951],[3,2952],[3,2953],[3,2954],[3,2955],[3,2956],[3,2957],[3,2958],[3,2959],[3,2960],[3,2961],[3,2962],[3,2963],[3,2964],[3,2965],[3,2966],[3,2967],[3,2968],[3,2969],[3,2970],[3,2971],[3,2972],[3,2973],[3,2974],[3,2975],[3,2976],[3,2977],[3,2978],[3,2979],[3,2980],[3,2981],[3,2982],[3,2983],[3,2984],[3,2985],[3,2986],[3,2987],[3,2988],[3,2989],[3,2990],[3,2991],[3,2992],[3,2993],[3,2994],[3,2995],[3,2996],[3,2997],[3,2998],[3,2999],[3,3000],[3,3001],[3,3002],[3,3003],[3,3004],[3,3005],[3,3006],[3,3007],[3,3008],[3,3009],[3,3010],[3,3011],[3,3012],[3,3013],[3,3014],[3,3015],[3,3016],[3,3017],[3,3018],[3,3019],[3,3020],[3,3021],[3,3022],[3,3023],[3,3024],[3,3025],[3,3026],[3,3027],[3,3028],[3,3029],[3,3030],[3,3031],[3,3032],[3,3033],[3,3034],[3,3035],[3,3036],[3,3037],[3,3038],[3,3039],[3,3040],[3,3041],[3,3042],[3,3043],[3,3044],[3,3045],[3,3046],[3,3047],[3,3048],[3,3049],[3,3050],[3,3051],[3,3052],[3,3053],[3,3054],[3,3055],[3,3056],[3,3057],[3,3058],[3,3059],[3,3060],[3,3061],[3,3062],[3,3063],[3,3064],[3,3065],[3,3066],[3,3067],[3,3068],[3,3069],[3,3070],[3,3071],[3,3072],[3,3073],[3,3074],[3,3075],[3,3076],[3,3077],[3,3078],[3,3079],[3,3080],[3,3081],[3,3082],[3,3083],[3,3084],[3,3085],[3,3086],[3,3087],[3,3088],[3,3089],[3,3090],[3,3091],[3,3092],[3,3093],[3,3094],[3,3095],[3,3096],[3,3097],[3,3098],[3,3099],[3,3100],[3,3101],[3,3102],[3,3103],[3,3104],[3,3105],[3,3106],[3,3107],[3,3108],[3,3109],[3,3110],[3,3111],[3,3112],[3,3113],[3,3114],[3,3115],[3,3116],[3,3117],[3,3118],[3,3119],[3,3120],[3,3121],[3,3122],[3,3123],[3,3124],[3,3125],[3,3126],[3,3127],[3,3128],[3,3129],[3,3130],[3,3131],[3,3132],[3,3133],[3,3134],[3,3135],[3,3136],[3,3137],[3,3138],[3,3139],[3,3140],[3,3141],[3,3142],[3,3143],[3,3144],[3,3145],[3,3146],[3,3147],[3,3148],[3,3149],[3,3150],[3,3151],[3,3152],[3,3153],[3,3154],[3,3155],[3,3156],[3,3157],[3,3158],[3,3159],[3,3160],[3,3161],[3,3162],[3,3163],[3,3164],[3,3165],[3,3166],[3,3167],[3,3168],[3,3169],[3,3170],[3,3171],[3,3172],[3,3173],[3,3174],[3,3175],[3,3176],[3,3177],[3,3178],[3,3179],[3,3180],[3,3181],[3,3182],[3,3183],[3,3184],[3,3185],[3,3186],[3,3187],[3,3188],[3,3189],[3,3190],[3,3191],[3,3192],[3,3193],[3,3194],[3,3195],[3,3196],[3,3197],[3,3198],[3,3199],[3,3200],[3,3201],[3,3202],[3,3203],[3,3204],[3,3205],[3,3206],[3,3207],[3,3208],[3,3209],[3,3210],[3,3211],[3,3212],[3,3213],[3,3214],[3,3215],[3,3216],[3,3217],[3,3218],[3,3219],[3,3220],[3,3221],[3,3222],[3,3223],[3,3224],[3,3225],[3,3226],[3,3227],[3,3228],[3,3229],[3,3230],[3,3231],[3,3232],[3,3233],[3,3234],[3,3235],[3,3236],[3,3237],[3,3238],[3,3239],[3,3240],[3,3241],[3,3242],[3,3243],[3,3244],[3,3245],[3,3246],[3,3247],[3,3248],[3,3249],[3,3250],[3,3251],[3,3252],[3,3253],[3,3254],[3,3255],[3,3256],[3,3257],[3,3258],[3,3259],[3,3260],[3,3261],[3,3262],[3,3263],[3,3264],[3,3265],[3,3266],[3,3267],[3,3268],[3,3269],[3,3270],[3,3271],[3,3272],[3,3273],[3,3274],[3,3275],[3,3276],[3,3277],[3,3278],[3,3279],[3,3280],[3,3281],[3,3282],[3,3283],[3,3284],[3,3285],[3,3286],[3,3287],[3,3288],[3,3289],[3,3290],[3,3291],[3,3292],[3,3293],[3,3294],[3,3295],[3,3296],[3,3297],[3,3298],[3,3299],[3,3300],[3,3301],[3,3302],[3,3303],[3,3304],[3,3305],[3,3306],[3,3307],[3,3308],[3,3309],[3,3310],[3,3311],[3,3312],[3,3313],[3,3314],[3,3315],[3,3316],[3,3317],[3,3318],[3,3319],[3,3320],[3,3321],[3,3322],[3,3323],[3,3324],[3,3325],[3,3326],[3,3327],[3,3328],[3,3329],[3,3330],[3,3331],[3,3332],[3,3333],[3,3334],[3,3335],[3,3336],[3,3337],[3,3338],[3,3339],[3,3340],[3,3341],[3,3342],[3,3343],[3,3344],[3,3345],[3,3346],[3,3347],[3,3348],[3,3349],[3,3350],[3,3351],[3,3352],[3,3353],[3,3354],[3,3355],[3,3356],[3,3357],[3,3358],[3,3359],[3,3360],[3,3361],[3,3362],[3,3363],[3,3364],[3,3365],[3,3366],[3,3367],[3,3368],[3,3369],[3,3370],[3,3371],[3,3372],[3,3373],[3,3374],[3,3375],[3,3376],[3,3377],[3,3378],[3,3379],[3,3380],[3,3381],[3,3382],[3,3383],[3,3384],[3,3385],[3,3386],[3,3387],[3,3388],[3,3389],[3,3390],[3,3391],[3,3392],[3,3393],[3,3394],[3,3395],[3,3396],[3,3397],[3,3398],[3,3399],[3,3400],[3,3401],[3,3402],[3,3403],[3,3404],[3,3405],[3,3406],[3,3407],[3,3408],[3,3409],[3,3410],[3,3411],[3,3412],[3,3413],[3,3414],[3,3415],[3,3416],[3,3417],[3,3418],[3,3419],[3,3420],[3,3421],[3,3422],[3,3423],[3,3424],[3,3425],[3,3426],[3,3427],[3,3428],[3,3429],[3,3430],[3,3431],[3,3432],[3,3433],[3,3434],[3,3435],[3,3436],[3,3437],[3,3438],[3,3439],[3,3440],[3,3441],[3,3442],[3,3443],[3,3444],[3,3445],[3,3446],[3,3447],[3,3448],[3,3449],[3,3450],[3,3451],[3,3452],[3,3453],[3,3454],[3,3455],[3,3456],[3,3457],[3,3458],[3,3459],[3,3460],[3,3461],[3,3462],[3,3463],[3,3464],[3,3465],[3,3466],[3,3467],[3,3468],[3,3469],[3,3470],[3,3471],[3,3472],[3,3473],[3,3474],[3,3475],[3,3476],[3,3477],[3,3478],[3,3479],[3,3480],[3,3481],[3,3482],[3,3483],[3,3484],[3,3485],[3,3486],[3,3487],[3,3488],[3,3489],[3,3490],[3,3491],[3,3492],[3,3493],[3,3494],[3,3495],[3,3496],[3,3497],[3,3498],[3,3499],[3,3500],[3,3501],[3,3502],[3,3503],[3,3504],[3,3505],[3,3506],[3,3507],[3,3508],[3,3509],[3,3510],[3,3511],[3,3512],[3,3513],[3,3514],[3,3515],[3,3516],[3,3517],[3,3518],[3,3519],[3,3520],[3,3521],[3,3522],[3,3523],[3,3524],[3,3525],[3,3526],[3,3527],[3,3528],[3,3529],[3,3530],[3,3531],[3,3532],[3,3533],[3,3534],[3,3535],[3,3536],[3,3537],[3,3538],[3,3539],[3,3540],[3,3541],[3,3542],[3,3543],[3,3544],[3,3545],[3,3546],[3,3547],[3,3548],[3,3549],[3,3550],[3,3551],[3,3552],[3,3553],[3,3554],[3,3555],[3,3556],[3,3557],[3,3558],[3,3559],[3,3560],[3,3561],[3,3562],[3,3563],[3,3564],[3,3565],[3,3566],[3,3567],[3,3568],[3,3569],[3,3570],[3,3571],[3,3572],[3,3573],[3,3574],[3,3575],[3,3576],[3,3577],[3,3578],[3,3579],[3,3580],[3,3581],[3,3582],[3,3583],[3,3584],[3,3585],[3,3586],[3,3587],[3,3588],[3,3589],[3,3590],[3,3591],[3,3592],[3,3593],[3,3594],[3,3595],[3,3596],[3,3597],[3,3598],[3,3599],[3,3600],[3,3601],[3,3602],[3,3603],[3,3604],[3,3605],[3,3606],[3,3607],[3,3608],[3,3609],[3,3610],[3,3611],[3,3612],[3,3613],[3,3614],[3,3615],[3,3616],[3,3617],[3,3618],[3,3619],[3,3620],[3,3621],[3,3622],[3,3623],[3,3624],[3,3625],[3,3626],[3,3627],[3,3628],[3,3629],[3,3630],[3,3631],[3,3632],[3,3633],[3,3634],[3,3635],[3,3636],[3,3637],[3,3638],[3,3639],[3,3640],[3,3641],[3,3642],[3,3643],[3,3644],[3,3645],[3,3646],[3,3647],[3,3648],[3,3649],[3,3650],[3,3651],[3,3652],[3,3653],[3,3654],[3,3655],[3,3656],[3,3657],[3,3658],[3,3659],[3,3660],[3,3661],[3,3662],[3,3663],[3,3664],[3,3665],[3,3666],[3,3667],[3,3668],[3,3669],[3,3670],[3,3671],[3,3672],[3,3673],[3,3674],[3,3675],[3,3676],[3,3677],[3,3678],[3,3679],[3,3680],[3,3681],[3,3682],[3,3683],[3,3684],[3,3685],[3,3686],[3,3687],[3,3688],[3,3689],[3,3690],[3,3691],[3,3692],[3,3693],[3,3694],[3,3695],[3,3696],[3,3697],[3,3698],[3,3699],[3,3700],[3,3701],[3,3702],[3,3703],[3,3704],[3,3705],[3,3706],[3,3707],[3,3708],[3,3709],[3,3710],[3,3711],[3,3712],[3,3713],[3,3714],[3,3715],[3,3716],[3,3717],[3,3718],[3,3719],[3,3720],[3,3721],[3,3722],[3,3723],[3,3724],[3,3725],[3,3726],[3,3727],[3,3728],[3,3729],[3,3730],[3,3731],[3,3732],[3,3733],[3,3734],[3,3735],[3,3736],[3,3737],[3,3738],[3,3739],[3,3740],[3,3741],[3,3742],[3,3743],[3,3744],[3,3745],[3,3746],[3,3747],[3,3748],[3,3749],[3,3750],[3,3751],[3,3752],[3,3753],[3,3754],[3,3755],[3,3756],[3,3757],[3,3758],[3,3759],[3,3760],[3,3761],[3,3762],[3,3763],[3,3764],[3,3765],[3,3766],[3,3767],[3,3768],[3,3769],[3,3770],[3,3771],[3,3772],[3,3773],[3,3774],[3,3775],[3,3776],[3,3777],[3,3778],[3,3779],[3,3780],[3,3781],[3,3782],[3,3783],[3,3784],[3,3785],[3,3786],[3,3787],[3,3788],[3,3789],[3,3790],[3,3791],[3,3792],[3,3793],[3,3794],[3,3795],[3,3796],[3,3797],[3,3798],[3,3799],[3,3800],[3,3801],[3,3802],[3,3803],[3,3804],[3,3805],[3,3806],[3,3807],[3,3808],[3,3809],[3,3810],[3,3811],[3,3812],[3,3813],[3,3814],[3,3815],[3,3816],[3,3817],[3,3818],[3,3819],[3,3820],[3,3821],[3,3822],[3,3823],[3,3824],[3,3825],[3,3826],[3,3827],[3,3828],[3,3829],[3,3830],[3,3831],[3,3832],[3,3833],[3,3834],[3,3835],[3,3836],[3,3837],[3,3838],[3,3839],[3,3840],[3,3841],[3,3842],[3,3843],[3,3844],[3,3845],[3,3846],[3,3847],[3,3848],[3,3849],[3,3850],[3,3851],[3,3852],[3,3853],[3,3854],[3,3855],[3,3856],[3,3857],[3,3858],[3,3859],[3,3860],[3,3861],[3,3862],[3,3863],[3,3864],[3,3865],[3,3866],[3,3867],[3,3868],[3,3869],[3,3870],[3,3871],[3,3872],[3,3873],[3,3874],[3,3875],[3,3876],[3,3877],[3,3878],[3,3879],[3,3880],[3,3881],[3,3882],[3,3883],[3,3884],[3,3885],[3,3886],[3,3887],[3,3888],[3,3889],[3,3890],[3,3891],[3,3892],[3,3893],[3,3894],[3,3895],[3,3896],[3,3897],[3,3898],[3,3899],[3,3900],[3,3901],[3,3902],[3,3903],[3,3904],[3,3905],[3,3906],[3,3907],[3,3908],[3,3909],[3,3910],[3,3911],[3,3912],[3,3913],[3,3914],[3,3915],[3,3916],[3,3917],[3,3918],[3,3919],[3,3920],[3,3921],[3,3922],[3,3923],[3,3924],[3,3925],[3,3926],[3,3927],[3,3928],[3,3929],[3,3930],[3,3931],[3,3932],[3,3933],[3,3934],[3,3935],[3,3936],[3,3937],[3,3938],[3,3939],[3,3940],[3,3941],[3,3942],[3,3943],[3,3944],[3,3945],[3,3946],[3,3947],[3,3948],[3,3949],[3,3950],[3,3951],[3,3952],[3,3953],[3,3954],[3,3955],[3,3956],[3,3957],[3,3958],[3,3959],[3,3960],[3,3961],[3,3962],[3,3963],[3,3964],[3,3965],[3,3966],[3,3967],[3,3968],[3,3969],[3,3970],[3,3971],[3,3972],[3,3973],[3,3974],[3,3975],[3,3976],[3,3977],[3,3978],[3,3979],[3,3980],[3,3981],[3,3982],[3,3983],[3,3984],[3,3985],[3,3986],[3,3987],[3,3988],[3,3989],[3,3990],[3,3991],[3,3992],[3,3993],[3,3994],[3,3995],[3,3996],[3,3997],[3,3998],[3,3999],[3,4000],[3,4001],[3,4002],[3,4003],[3,4004],[3,4005],[3,4006],[3,4007],[3,4008],[3,4009],[3,4010],[3,4011],[3,4012],[3,4013],[3,4014],[3,4015],[3,4016],[3,4017],[3,4018],[3,4019],[3,4020],[3,4021],[3,4022],[3,4023],[3,4024],[3,4025],[3,4026],[3,4027],[3,4028],[3,4029],[3,4030],[3,4031],[3,4032],[3,4033],[3,4034],[3,4035],[3,4036],[3,4037],[3,4038],[3,4039],[3,4040],[3,4041],[3,4042],[3,4043],[3,4044],[3,4045],[3,4046],[3,4047],[3,4048],[3,4049],[3,4050],[3,4051],[3,4052],[3,4053],[3,4054],[3,4055],[3,4056],[3,4057],[3,4058],[3,4059],[3,4060],[3,4061],[3,4062],[3,4063],[3,4064],[3,4065],[3,4066],[3,4067],[3,4068],[3,4069],[3,4070],[3,4071],[3,4072],[3,4073],[3,4074],[3,4075],[3,4076],[3,4077],[3,4078],[3,4079],[3,4080],[3,4081],[3,4082],[3,4083],[3,4084],[3,4085],[3,4086],[3,4087],[3,4088],[3,4089],[3,4090],[3,4091],[3,4092],[3,4093],[3,4094],[3,4095],[3,4096],[3,4097],[3,4098],[3,4099],[3,4100],[3,4101],[3,4102],[3,4103],[3,4104],[3,4105],[3,4106],[3,4107],[3,4108],[3,4109],[3,4110],[3,4111],[3,4112],[3,4113],[3,4114],[3,4115],[3,4116],[3,4117],[3,4118],[3,4119],[3,4120],[3,4121],[3,4122],[3,4123],[3,4124],[3,4125],[3,4126],[3,4127],[3,4128],[3,4129],[3,4130],[3,4131],[3,4132],[3,4133],[3,4134],[3,4135],[3,4136],[3,4137],[3,4138],[3,4139],[3,4140],[3,4141],[3,4142],[3,4143],[3,4144],[3,4145],[3,4146],[3,4147],[3,4148],[3,4149],[3,4150],[3,4151],[3,4152],[3,4153],[3,4154],[3,4155],[3,4156],[3,4157],[3,4158],[3,4159],[3,4160],[3,4161],[3,4162],[3,4163],[3,4164],[3,4165],[3,4166],[3,4167],[3,4168],[3,4169],[3,4170],[3,4171],[3,4172],[3,4173],[3,4174],[3,4175],[3,4176],[3,4177],[3,4178],[3,4179],[3,4180],[3,4181],[3,4182],[3,4183],[3,4184],[3,4185],[3,4186],[3,4187],[3,4188],[3,4189],[3,4190],[3,4191],[3,4192],[3,4193],[3,4194],[3,4195],[3,4196],[3,4197],[3,4198],[3,4199],[3,4200],[3,4201],[3,4202],[3,4203],[3,4204],[3,4205],[3,4206],[3,4207],[3,4208],[3,4209],[3,4210],[3,4211],[3,4212],[3,4213],[3,4214],[3,4215],[3,4216],[3,4217],[3,4218],[3,4219],[3,4220],[3,4221],[3,4222],[3,4223],[3,4224],[3,4225],[3,4226],[3,4227],[3,4228],[3,4229],[3,4230],[3,4231],[3,4232],[3,4233],[3,4234],[3,4235],[3,4236],[3,4237],[3,4238],[3,4239],[3,4240],[3,4241],[3,4242],[3,4243],[3,4244],[3,4245],[3,4246],[3,4247],[3,4248],[3,4249],[3,4250],[3,4251],[3,4252],[3,4253],[3,4254],[3,4255],[3,4256],[3,4257],[3,4258],[3,4259],[3,4260],[3,4261],[3,4262],[3,4263],[3,4264],[3,4265],[3,4266],[3,4267],[3,4268],[3,4269],[3,4270],[3,4271],[3,4272],[3,4273],[3,4274],[3,4275],[3,4276],[3,4277],[3,4278],[3,4279],[3,4280],[3,4281],[3,4282],[3,4283],[3,4284],[3,4285],[3,4286],[3,4287],[3,4288],[3,4289],[3,4290],[3,4291],[3,4292],[3,4293],[3,4294],[3,4295],[3,4296],[3,4297],[3,4298],[3,4299],[3,4300],[3,4301],[3,4302],[3,4303],[3,4304],[3,4305],[3,4306],[3,4307],[3,4308],[3,4309],[3,4310],[3,4311],[3,4312],[3,4313],[3,4314],[3,4315],[3,4316],[3,4317],[3,4318],[3,4319],[3,4320],[3,4321],[3,4322],[3,4323],[3,4324],[3,4325],[3,4326],[3,4327],[3,4328],[3,4329],[3,4330],[3,4331],[3,4332],[3,4333],[3,4334],[3,4335],[3,4336],[3,4337],[3,4338],[3,4339],[3,4340],[3,4341],[3,4342],[3,4343],[3,4344],[3,4345],[3,4346],[3,4347],[3,4348],[3,4349],[3,4350],[3,4351],[3,4352],[3,4353],[3,4354],[3,4355],[3,4356],[3,4357],[3,4358],[3,4359],[3,4360],[3,4361],[3,4362],[3,4363],[3,4364],[3,4365],[3,4366],[3,4367],[3,4368],[3,4369],[3,4370],[3,4371],[3,4372],[3,4373],[3,4374],[3,4375],[3,4376],[3,4377],[3,4378],[3,4379],[3,4380],[3,4381],[3,4382],[3,4383],[3,4384],[3,4385],[3,4386],[3,4387],[3,4388],[3,4389],[3,4390],[3,4391],[3,4392],[3,4393],[3,4394],[3,4395],[3,4396],[3,4397],[3,4398],[3,4399],[3,4400],[3,4401],[3,4402],[3,4403],[3,4404],[3,4405],[3,4406],[3,4407],[3,4408],[3,4409],[3,4410],[3,4411],[3,4412],[3,4413],[3,4414],[3,4415],[3,4416],[3,4417],[3,4418],[3,4419],[3,4420],[3,4421],[3,4422],[3,4423],[3,4424],[3,4425],[3,4426],[3,4427],[3,4428],[3,4429],[3,4430],[3,4431],[3,4432],[3,4433],[3,4434],[3,4435],[3,4436],[3,4437],[3,4438],[3,4439],[3,4440],[3,4441],[3,4442],[3,4443],[3,4444],[3,4445],[3,4446],[3,4447],[3,4448],[3,4449],[3,4450],[3,4451],[3,4452],[3,4453],[3,4454],[3,4455],[3,4456],[3,4457],[3,4458],[3,4459],[3,4460],[3,4461],[3,4462],[3,4463],[3,4464],[3,4465],[3,4466],[3,4467],[3,4468],[3,4469],[3,4470],[3,4471],[3,4472],[3,4473],[3,4474],[3,4475],[3,4476],[3,4477],[3,4478],[3,4479],[3,4480],[3,4481],[3,4482],[3,4483],[3,4484],[3,4485],[3,4486],[3,4487],[3,4488],[3,4489],[3,4490],[3,4491],[3,4492],[3,4493],[3,4494],[3,4495],[3,4496],[3,4497],[3,4498],[3,4499],[3,4500],[3,4501],[3,4502],[3,4503],[3,4504],[3,4505],[3,4506],[3,4507],[3,4508],[3,4509],[3,4510],[3,4511],[3,4512],[3,4513],[3,4514],[3,4515],[3,4516],[3,4517],[3,4518],[3,4519],[3,4520],[3,4521],[3,4522],[3,4523],[3,4524],[3,4525],[3,4526],[3,4527],[3,4528],[3,4529],[3,4530],[3,4531],[3,4532],[3,4533],[3,4534],[3,4535],[3,4536],[3,4537],[3,4538],[3,4539],[3,4540],[3,4541],[3,4542],[3,4543],[3,4544],[3,4545],[3,4546],[3,4547],[3,4548],[3,4549],[3,4550],[3,4551],[3,4552],[3,4553],[3,4554],[3,4555],[3,4556],[3,4557],[3,4558],[3,4559],[3,4560],[3,4561],[3,4562],[3,4563],[3,4564],[3,4565],[3,4566],[3,4567],[3,4568],[3,4569],[3,4570],[3,4571],[3,4572],[3,4573],[3,4574],[3,4575],[3,4576],[3,4577],[3,4578],[3,4579],[3,4580],[3,4581],[3,4582],[3,4583],[3,4584],[3,4585],[3,4586],[3,4587],[3,4588],[3,4589],[3,4590],[3,4591],[3,4592],[3,4593],[3,4594],[3,4595],[3,4596],[3,4597],[3,4598],[3,4599],[3,4600],[3,4601],[3,4602],[3,4603],[3,4604],[3,4605],[3,4606],[3,4607],[3,4608],[3,4609],[3,4610],[3,4611],[3,4612],[3,4613],[3,4614],[3,4615],[3,4616],[3,4617],[3,4618],[3,4619],[3,4620],[3,4621],[3,4622],[3,4623],[3,4624],[3,4625],[3,4626],[3,4627],[3,4628],[3,4629],[3,4630],[3,4631],[3,4632],[3,4633],[3,4634],[3,4635],[3,4636],[3,4637],[3,4638],[3,4639],[3,4640],[3,4641],[3,4642],[3,4643],[3,4644],[3,4645],[3,4646],[3,4647],[3,4648],[3,4649],[3,4650],[3,4651],[3,4652],[3,4653],[3,4654],[3,4655],[3,4656],[3,4657],[3,4658],[3,4659],[3,4660],[3,4661],[3,4662],[3,4663],[3,4664],[3,4665],[3,4666],[3,4667],[3,4668],[3,4669],[3,4670],[3,4671],[3,4672],[3,4673],[3,4674],[3,4675],[3,4676],[3,4677],[3,4678],[3,4679],[3,4680],[3,4681],[3,4682],[3,4683],[3,4684],[3,4685],[3,4686],[3,4687],[3,4688],[3,4689],[3,4690],[3,4691],[3,4692],[3,4693],[3,4694],[3,4695],[3,4696],[3,4697],[3,4698],[3,4699],[3,4700],[3,4701],[3,4702],[3,4703],[3,4704],[3,4705],[3,4706],[3,4707],[3,4708],[3,4709],[3,4710],[3,4711],[3,4712],[3,4713],[3,4714],[3,4715],[3,4716],[3,4717],[3,4718],[3,4719],[3,4720],[3,4721],[3,4722],[3,4723],[3,4724],[3,4725],[3,4726],[3,4727],[3,4728],[3,4729],[3,4730],[3,4731],[3,4732],[3,4733],[3,4734],[3,4735],[3,4736],[3,4737],[3,4738],[3,4739],[3,4740],[3,4741],[3,4742],[3,4743],[3,4744],[3,4745],[3,4746],[3,4747],[3,4748],[3,4749],[3,4750],[3,4751],[3,4752],[3,4753],[3,4754],[3,4755],[3,4756],[3,4757],[3,4758],[3,4759],[3,4760],[3,4761],[3,4762],[3,4763],[3,4764],[3,4765],[3,4766],[3,4767],[3,4768],[3,4769],[3,4770],[3,4771],[3,4772],[3,4773],[3,4774],[3,4775],[3,4776],[3,4777],[3,4778],[3,4779],[3,4780],[3,4781],[3,4782],[3,4783],[3,4784],[3,4785],[3,4786],[3,4787],[3,4788],[3,4789],[3,4790],[3,4791],[3,4792],[3,4793],[3,4794],[3,4795],[3,4796],[3,4797],[3,4798],[3,4799],[3,4800],[3,4801],[3,4802],[3,4803],[3,4804],[3,4805],[3,4806],[3,4807],[3,4808],[3,4809],[3,4810],[3,4811],[3,4812],[3,4813],[3,4814],[3,4815],[3,4816],[3,4817],[3,4818],[3,4819],[3,4820],[3,4821],[3,4822],[3,4823],[3,4824],[3,4825],[3,4826],[3,4827],[3,4828],[3,4829],[3,4830],[3,4831],[3,4832],[3,4833],[3,4834],[3,4835],[3,4836],[3,4837],[3,4838],[3,4839],[3,4840],[3,4841],[3,4842],[3,4843],[3,4844],[3,4845],[3,4846],[3,4847],[3,4848],[3,4849],[3,4850],[3,4851],[3,4852],[3,4853],[3,4854],[3,4855],[3,4856],[3,4857],[3,4858],[3,4859],[3,4860],[3,4861],[3,4862],[3,4863],[3,4864],[3,4865],[3,4866],[3,4867],[3,4868],[3,4869],[3,4870],[3,4871],[3,4872],[3,4873],[3,4874],[3,4875],[3,4876],[3,4877],[3,4878],[3,4879],[3,4880],[3,4881],[3,4882],[3,4883],[3,4884],[3,4885],[3,4886],[3,4887],[3,4888],[3,4889],[3,4890],[3,4891],[3,4892],[3,4893],[3,4894],[3,4895],[3,4896],[3,4897],[3,4898],[3,4899],[3,4900],[3,4901],[3,4902],[3,4903],[3,4904],[3,4905],[3,4906],[3,4907],[3,4908],[3,4909],[3,4910],[3,4911],[3,4912],[3,4913],[3,4914],[3,4915],[3,4916],[3,4917],[3,4918],[3,4919],[3,4920],[3,4921],[3,4922],[3,4923],[3,4924],[3,4925],[3,4926],[3,4927],[3,4928],[3,4929],[3,4930],[3,4931],[3,4932],[3,4933],[3,4934],[3,4935],[3,4936],[3,4937],[3,4938],[3,4939],[3,4940],[3,4941],[3,4942],[3,4943],[3,4944],[3,4945],[3,4946],[3,4947],[3,4948],[3,4949],[3,4950],[3,4951],[3,4952],[3,4953],[3,4954],[3,4955],[3,4956],[3,4957],[3,4958],[3,4959],[3,4960],[3,4961],[3,4962],[3,4963],[3,4964],[3,4965],[3,4966],[3,4967],[3,4968],[3,4969],[3,4970],[3,4971],[3,4972],[3,4973],[3,4974],[3,4975],[3,4976],[3,4977],[3,4978],[3,4979],[3,4980],[3,4981],[3,4982],[3,4983],[3,4984],[3,4985],[3,4986],[3,4987],[3,4988],[3,4989],[3,4990],[3,4991],[3,4992],[3,4993],[3,4994],[3,4995],[3,4996],[3,4997],[3,4998],[3,4999],[3,5000],[3,5001],[3,5002],[3,5003],[3,5004],[3,5005],[3,5006],[3,5007],[3,5008],[3,5009],[3,5010],[3,5011],[3,5012],[3,5013],[3,5014],[3,5015],[3,5016],[3,5017],[3,5018],[3,5019],[3,5020],[3,5021],[3,5022],[3,5023],[3,5024],[3,5025],[3,5026],[3,5027],[3,5028],[3,5029],[3,5030],[3,5031],[3,5032],[3,5033],[3,5034],[3,5035],[3,5036],[3,5037],[3,5038],[3,5039],[3,5040],[3,5041],[3,5042],[3,5043],[3,5044],[3,5045],[3,5046],[3,5047],[3,5048],[3,5049],[3,5050],[3,5051],[3,5052],[3,5053],[3,5054],[3,5055],[3,5056],[3,5057],[3,5058],[3,5059],[3,5060],[3,5061],[3,5062],[3,5063],[3,5064],[3,5065],[3,5066],[3,5067],[3,5068],[3,5069],[3,5070],[3,5071],[3,5072],[3,5073],[3,5074],[3,5075],[3,5076],[3,5077],[3,5078],[3,5079],[3,5080],[3,5081],[3,5082],[3,5083],[3,5084],[3,5085],[3,5086],[3,5087],[3,5088],[3,5089],[3,5090],[3,5091],[3,5092],[3,5093],[3,5094],[3,5095],[3,5096],[3,5097],[3,5098],[3,5099],[3,5100],[3,5101],[3,5102],[3,5103],[3,5104],[3,5105],[3,5106],[3,5107],[3,5108],[3,5109],[3,5110],[3,5111],[3,5112],[3,5113],[3,5114],[3,5115],[3,5116],[3,5117],[3,5118],[3,5119],[3,5120],[3,5121],[3,5122],[3,5123],[3,5124],[3,5125],[3,5126],[3,5127],[3,5128],[3,5129],[3,5130],[3,5131],[3,5132],[3,5133],[3,5134],[3,5135],[3,5136],[3,5137],[3,5138],[3,5139],[3,5140],[3,5141],[3,5142],[3,5143],[3,5144],[3,5145],[3,5146],[3,5147],[3,5148],[3,5149],[3,5150],[3,5151],[3,5152],[3,5153],[3,5154],[3,5155],[3,5156],[3,5157],[3,5158],[3,5159],[3,5160],[3,5161],[3,5162],[3,5163],[3,5164],[3,5165],[3,5166],[3,5167],[3,5168],[3,5169],[3,5170],[3,5171],[3,5172],[3,5173],[3,5174],[3,5175],[3,5176],[3,5177],[3,5178],[3,5179],[3,5180],[3,5181],[3,5182],[3,5183],[3,5184],[3,5185],[3,5186],[3,5187],[3,5188],[3,5189],[3,5190],[3,5191],[3,5192],[3,5193],[3,5194],[3,5195],[3,5196],[3,5197],[3,5198],[3,5199],[3,5200],[3,5201],[3,5202],[3,5203],[3,5204],[3,5205],[3,5206],[3,5207],[3,5208],[3,5209],[3,5210],[3,5211],[3,5212],[3,5213],[3,5214],[3,5215],[3,5216],[3,5217],[3,5218],[3,5219],[3,5220],[3,5221],[3,5222],[3,5223],[3,5224],[3,5225],[3,5226],[3,5227],[3,5228],[3,5229],[3,5230],[3,5231],[3,5232],[3,5233],[3,5234],[3,5235],[3,5236],[3,5237],[3,5238],[3,5239],[3,5240],[3,5241],[3,5242],[3,5243],[3,5244],[3,5245],[3,5246],[3,5247],[3,5248],[3,5249],[3,5250],[3,5251],[3,5252],[3,5253],[3,5254],[3,5255],[3,5256],[3,5257],[3,5258],[3,5259],[3,5260],[3,5261],[3,5262],[3,5263],[3,5264],[3,5265],[3,5266],[3,5267],[3,5268],[3,5269],[3,5270],[3,5271],[3,5272],[3,5273],[3,5274],[3,5275],[3,5276],[3,5277],[3,5278],[3,5279],[3,5280],[3,5281],[3,5282],[3,5283],[3,5284],[3,5285],[3,5286],[3,5287],[3,5288],[3,5289],[3,5290],[3,5291],[3,5292],[3,5293],[3,5294],[3,5295],[3,5296],[3,5297],[3,5298],[3,5299],[3,5300],[3,5301],[3,5302],[3,5303],[3,5304],[3,5305],[3,5306],[3,5307],[3,5308],[3,5309],[3,5310],[3,5311],[3,5312],[3,5313],[3,5314],[3,5315],[3,5316],[3,5317],[3,5318],[3,5319],[3,5320],[3,5321],[3,5322],[3,5323],[3,5324],[3,5325],[3,5326],[3,5327],[3,5328],[3,5329],[3,5330],[3,5331],[3,5332],[3,5333],[3,5334],[3,5335],[3,5336],[3,5337],[3,5338],[3,5339],[3,5340],[3,5341],[3,5342],[3,5343],[3,5344],[3,5345],[3,5346],[3,5347],[3,5348],[3,5349],[3,5350],[3,5351],[3,5352],[3,5353],[3,5354],[3,5355],[3,5356],[3,5357],[3,5358],[3,5359],[3,5360],[3,5361],[3,5362],[3,5363],[3,5364],[3,5365],[3,5366],[3,5367],[3,5368],[3,5369],[3,5370],[3,5371],[3,5372],[3,5373],[3,5374],[3,5375],[3,5376],[3,5377],[3,5378],[3,5379],[3,5380],[3,5381],[3,5382],[3,5383],[3,5384],[3,5385],[3,5386],[3,5387],[3,5388],[3,5389],[3,5390],[3,5391],[3,5392],[3,5393],[3,5394],[3,5395],[3,5396],[3,5397],[3,5398],[3,5399],[3,5400],[3,5401],[3,5402],[3,5403],[3,5404],[3,5405],[3,5406],[3,5407],[3,5408],[3,5409],[3,5410],[3,5411],[3,5412],[3,5413],[3,5414],[3,5415],[3,5416],[3,5417],[3,5418],[3,5419],[3,5420],[3,5421],[3,5422],[3,5423],[3,5424],[3,5425],[3,5426],[3,5427],[3,5428],[3,5429],[3,5430],[3,5431],[3,5432],[3,5433],[3,5434],[3,5435],[3,5436],[3,5437],[3,5438],[3,5439],[3,5440],[3,5441],[3,5442],[3,5443],[3,5444],[3,5445],[3,5446],[3,5447],[3,5448],[3,5449],[3,5450],[3,5451],[3,5452],[3,5453],[3,5454],[3,5455],[3,5456],[3,5457],[3,5458],[3,5459],[3,5460],[3,5461],[3,5462],[3,5463],[3,5464],[3,5465],[3,5466],[3,5467],[3,5468],[3,5469],[3,5470],[3,5471],[3,5472],[3,5473],[3,5474],[3,5475],[3,5476],[3,5477],[3,5478],[3,5479],[3,5480],[3,5481],[3,5482],[3,5483],[3,5484],[3,5485],[3,5486],[3,5487],[3,5488],[3,5489],[3,5490],[3,5491],[3,5492],[3,5493],[3,5494],[3,5495],[3,5496],[3,5497],[3,5498],[3,5499],[3,5500],[3,5501],[3,5502],[3,5503],[3,5504],[3,5505],[3,5506],[3,5507],[3,5508],[3,5509],[3,5510],[3,5511],[3,5512],[3,5513],[3,5514],[3,5515],[3,5516],[3,5517],[3,5518],[3,5519],[3,5520],[3,5521],[3,5522],[3,5523],[3,5524],[3,5525],[3,5526],[3,5527],[3,5528],[3,5529],[3,5530],[3,5531],[3,5532],[3,5533],[3,5534],[3,5535],[3,5536],[3,5537],[3,5538],[3,5539],[3,5540],[3,5541],[3,5542],[3,5543],[3,5544],[3,5545],[3,5546],[3,5547],[3,5548],[3,5549],[3,5550],[3,5551],[3,5552],[3,5553],[3,5554],[3,5555],[3,5556],[3,5557],[3,5558],[3,5559],[3,5560],[3,5561],[3,5562],[3,5563],[3,5564],[3,5565],[3,5566],[3,5567],[3,5568],[3,5569],[3,5570],[3,5571],[3,5572],[3,5573],[3,5574],[3,5575],[3,5576],[3,5577],[3,5578],[3,5579],[3,5580],[3,5581],[3,5582],[3,5583],[3,5584],[3,5585],[3,5586],[3,5587],[3,5588],[3,5589],[3,5590],[3,5591],[3,5592],[3,5593],[3,5594],[3,5595],[3,5596],[3,5597],[3,5598],[3,5599],[3,5600],[3,5601],[3,5602],[3,5603],[3,5604],[3,5605],[3,5606],[3,5607],[3,5608],[3,5609],[3,5610],[3,5611],[3,5612],[3,5613],[3,5614],[3,5615],[3,5616],[3,5617],[3,5618],[3,5619],[3,5620],[3,5621],[3,5622],[3,5623],[3,5624],[3,5625],[3,5626],[3,5627],[3,5628],[3,5629],[3,5630],[3,5631],[3,5632],[3,5633],[3,5634],[3,5635],[3,5636],[3,5637],[3,5638],[3,5639],[3,5640],[3,5641],[3,5642],[3,5643],[3,5644],[3,5645],[3,5646],[3,5647],[3,5648],[3,5649],[3,5650],[3,5651],[3,5652],[3,5653],[3,5654],[3,5655],[3,5656],[3,5657],[3,5658],[3,5659],[3,5660],[3,5661],[3,5662],[3,5663],[3,5664],[3,5665],[3,5666],[3,5667],[3,5668],[3,5669],[3,5670],[3,5671],[3,5672],[3,5673],[3,5674],[3,5675],[3,5676],[3,5677],[3,5678],[3,5679],[3,5680],[3,5681],[3,5682],[3,5683],[3,5684],[3,5685],[3,5686],[3,5687],[3,5688],[3,5689],[3,5690],[3,5691],[3,5692],[3,5693],[3,5694],[3,5695],[3,5696],[3,5697],[3,5698],[3,5699],[3,5700],[3,5701],[3,5702],[3,5703],[3,5704],[3,5705],[3,5706],[3,5707],[3,5708],[3,5709],[3,5710],[3,5711],[3,5712],[3,5713],[3,5714],[3,5715],[3,5716],[3,5717],[3,5718],[3,5719],[3,5720],[3,5721],[3,5722],[3,5723],[3,5724],[3,5725],[3,5726],[3,5727],[3,5728],[3,5729],[3,5730],[3,5731],[3,5732],[3,5733],[3,5734],[3,5735],[3,5736],[3,5737],[3,5738],[3,5739],[3,5740],[3,5741],[3,5742],[3,5743],[3,5744],[3,5745],[3,5746],[3,5747],[3,5748],[3,5749],[3,5750],[3,5751],[3,5752],[3,5753],[3,5754],[3,5755],[3,5756],[3,5757],[3,5758],[3,5759],[3,5760],[3,5761],[3,5762],[3,5763],[3,5764],[3,5765],[3,5766],[3,5767],[3,5768],[3,5769],[3,5770],[3,5771],[3,5772],[3,5773],[3,5774],[3,5775],[3,5776],[3,5777],[3,5778],[3,5779],[3,5780],[3,5781],[3,5782],[3,5783],[3,5784],[3,5785],[3,5786],[3,5787],[3,5788],[3,5789],[3,5790],[3,5791],[3,5792],[3,5793],[3,5794],[3,5795],[3,5796],[3,5797],[3,5798],[3,5799],[3,5800],[3,5801],[3,5802],[3,5803],[3,5804],[3,5805],[3,5806],[3,5807],[3,5808],[3,5809],[3,5810],[3,5811],[3,5812],[3,5813],[3,5814],[3,5815],[3,5816],[3,5817],[3,5818],[3,5819],[3,5820],[3,5821],[3,5822],[3,5823],[3,5824],[3,5825],[3,5826],[3,5827],[3,5828],[3,5829],[3,5830],[3,5831],[3,5832],[3,5833],[3,5834],[3,5835],[3,5836],[3,5837],[3,5838],[3,5839],[3,5840],[3,5841],[3,5842],[3,5843],[3,5844],[3,5845],[3,5846],[3,5847],[3,5848],[3,5849],[3,5850],[3,5851],[3,5852],[3,5853],[3,5854],[3,5855],[3,5856],[3,5857],[3,5858],[3,5859],[3,5860],[3,5861],[3,5862],[3,5863],[3,5864],[3,5865],[3,5866],[3,5867],[3,5868],[3,5869],[3,5870],[3,5871],[3,5872],[3,5873],[3,5874],[3,5875],[3,5876],[3,5877],[3,5878],[3,5879],[3,5880],[3,5881],[3,5882],[3,5883],[3,5884],[3,5885],[3,5886],[3,5887],[3,5888],[3,5889],[3,5890],[3,5891],[3,5892],[3,5893],[3,5894],[3,5895],[3,5896],[3,5897],[3,5898],[3,5899],[3,5900],[3,5901],[3,5902],[3,5903],[3,5904],[3,5905],[3,5906],[3,5907],[3,5908],[3,5909],[3,5910],[3,5911],[3,5912],[3,5913],[3,5914],[3,5915],[3,5916],[3,5917],[3,5918],[3,5919],[3,5920],[3,5921],[3,5922],[3,5923],[3,5924],[3,5925],[3,5926],[3,5927],[3,5928],[3,5929],[3,5930],[3,5931],[3,5932],[3,5933],[3,5934],[3,5935],[3,5936],[3,5937],[3,5938],[3,5939],[3,5940],[3,5941],[3,5942],[3,5943],[3,5944],[3,5945],[3,5946],[3,5947],[3,5948],[3,5949],[3,5950],[3,5951],[3,5952],[3,5953],[3,5954],[3,5955],[3,5956],[3,5957],[3,5958],[3,5959],[3,5960],[3,5961],[3,5962],[3,5963],[3,5964],[3,5965],[3,5966],[3,5967],[3,5968],[3,5969],[3,5970],[3,5971],[3,5972],[3,5973],[3,5974],[3,5975],[3,5976],[3,5977],[3,5978],[3,5979],[3,5980],[3,5981],[3,5982],[3,5983],[3,5984],[3,5985],[3,5986],[3,5987],[3,5988],[3,5989],[3,5990],[3,5991],[3,5992],[3,5993],[3,5994],[3,5995],[3,5996],[3,5997],[3,5998],[3,5999],[3,6000],[3,6001],[3,6002],[3,6003],[3,6004],[3,6005],[3,6006],[3,6007],[3,6008],[3,6009],[3,6010],[3,6011],[3,6012],[3,6013],[3,6014],[3,6015],[3,6016],[3,6017],[3,6018],[3,6019],[3,6020],[3,6021],[3,6022],[3,6023],[3,6024],[3,6025],[3,6026],[3,6027],[3,6028],[3,6029],[3,6030],[3,6031],[3,6032],[3,6033],[3,6034],[3,6035],[3,6036],[3,6037],[3,6038],[3,6039],[3,6040],[3,6041],[3,6042],[3,6043],[3,6044],[3,6045],[3,6046],[3,6047],[3,6048],[3,6049],[3,6050],[3,6051],[3,6052],[3,6053],[3,6054],[3,6055],[3,6056],[3,6057],[3,6058],[3,6059],[3,6060],[3,6061],[3,6062],[3,6063],[3,6064],[3,6065],[3,6066],[3,6067],[3,6068],[3,6069],[3,6070],[3,6071],[3,6072],[3,6073],[3,6074],[3,6075],[3,6076],[3,6077],[3,6078],[3,6079],[3,6080],[3,6081],[3,6082],[3,6083],[3,6084],[3,6085],[3,6086],[3,6087],[3,6088],[3,6089],[3,6090],[3,6091],[3,6092],[3,6093],[3,6094],[3,6095],[3,6096],[3,6097],[3,6098],[3,6099],[3,6100],[3,6101],[3,6102],[3,6103],[3,6104],[3,6105],[3,6106],[3,6107],[3,6108],[3,6109],[3,6110],[3,6111],[3,6112],[3,6113],[3,6114],[3,6115],[3,6116],[3,6117],[3,6118],[3,6119],[3,6120],[3,6121],[3,6122],[3,6123],[3,6124],[3,6125],[3,6126],[3,6127],[3,6128],[3,6129],[3,6130],[3,6131],[3,6132],[3,6133],[3,6134],[3,6135],[3,6136],[3,6137],[3,6138],[3,6139],[3,6140],[3,6141],[3,6142],[3,6143],[3,6144],[3,6145],[3,6146],[3,6147],[3,6148],[3,6149],[3,6150],[3,6151],[3,6152],[3,6153],[3,6154],[3,6155],[3,6156],[3,6157],[3,6158],[3,6159],[3,6160],[3,6161],[3,6162],[3,6163],[3,6164],[3,6165],[3,6166],[3,6167],[3,6168],[3,6169],[3,6170],[3,6171],[3,6172],[3,6173],[3,6174],[3,6175],[3,6176],[3,6177],[3,6178],[3,6179],[3,6180],[3,6181],[3,6182],[3,6183],[3,6184],[3,6185],[3,6186],[3,6187],[3,6188],[3,6189],[3,6190],[3,6191],[3,6192],[3,6193],[3,6194],[3,6195],[3,6196],[3,6197],[3,6198],[3,6199],[3,6200],[3,6201],[3,6202],[3,6203],[3,6204],[3,6205],[3,6206],[3,6207],[3,6208],[3,6209],[3,6210],[3,6211],[3,6212],[3,6213],[3,6214],[3,6215],[3,6216],[3,6217],[3,6218],[3,6219],[3,6220],[3,6221],[3,6222],[3,6223],[3,6224],[3,6225],[3,6226],[3,6227],[3,6228],[3,6229],[3,6230],[3,6231],[3,6232],[3,6233],[3,6234],[3,6235],[3,6236],[3,6237],[3,6238],[3,6239],[3,6240],[3,6241],[3,6242],[3,6243],[3,6244],[3,6245],[3,6246],[3,6247],[3,6248],[3,6249],[3,6250],[3,6251],[3,6252],[3,6253],[3,6254],[3,6255],[3,6256],[3,6257],[3,6258],[3,6259],[3,6260],[3,6261],[3,6262],[3,6263],[3,6264],[3,6265],[3,6266],[3,6267],[3,6268],[3,6269],[3,6270],[3,6271],[3,6272],[3,6273],[3,6274],[3,6275],[3,6276],[3,6277],[3,6278],[3,6279],[3,6280],[3,6281],[3,6282],[3,6283],[3,6284],[3,6285],[3,6286],[3,6287],[3,6288],[3,6289],[3,6290],[3,6291],[3,6292],[3,6293],[3,6294],[3,6295],[3,6296],[3,6297],[3,6298],[3,6299],[3,6300],[3,6301],[3,6302],[3,6303],[3,6304],[3,6305],[3,6306],[3,6307],[3,6308],[3,6309],[3,6310],[3,6311],[3,6312],[3,6313],[3,6314],[3,6315],[3,6316],[3,6317],[3,6318],[3,6319],[3,6320],[3,6321],[3,6322],[3,6323],[3,6324],[3,6325],[3,6326],[3,6327],[3,6328],[3,6329],[3,6330],[3,6331],[3,6332],[3,6333],[3,6334],[3,6335],[3,6336],[3,6337],[3,6338],[3,6339],[3,6340],[3,6341],[3,6342],[3,6343],[3,6344],[3,6345],[3,6346],[3,6347],[3,6348],[3,6349],[3,6350],[3,6351],[3,6352],[3,6353],[3,6354],[3,6355],[3,6356],[3,6357],[3,6358],[3,6359],[3,6360],[3,6361],[3,6362],[3,6363],[3,6364],[3,6365],[3,6366],[3,6367],[3,6368],[3,6369],[3,6370],[3,6371],[3,6372],[3,6373],[3,6374],[3,6375],[3,6376],[3,6377],[3,6378],[3,6379],[3,6380],[3,6381],[3,6382],[3,6383],[3,6384],[3,6385],[3,6386],[3,6387],[3,6388],[3,6389],[3,6390],[3,6391],[3,6392],[3,6393],[3,6394],[3,6395],[3,6396],[3,6397],[3,6398],[3,6399],[3,6400],[3,6401],[3,6402],[3,6403],[3,6404],[3,6405],[3,6406],[3,6407],[3,6408],[3,6409],[3,6410],[3,6411],[3,6412],[3,6413],[3,6414],[3,6415],[3,6416],[3,6417],[3,6418],[3,6419],[3,6420],[3,6421],[3,6422],[3,6423],[3,6424],[3,6425],[3,6426],[3,6427],[3,6428],[3,6429],[3,6430],[3,6431],[3,6432],[3,6433],[3,6434],[3,6435],[3,6436],[3,6437],[3,6438],[3,6439],[3,6440],[3,6441],[3,6442],[3,6443],[3,6444],[3,6445],[3,6446],[3,6447],[3,6448],[3,6449],[3,6450],[3,6451],[3,6452],[3,6453],[3,6454],[3,6455],[3,6456],[3,6457],[3,6458],[3,6459],[3,6460],[3,6461],[3,6462],[3,6463],[3,6464],[3,6465],[3,6466],[3,6467],[3,6468],[3,6469],[3,6470],[3,6471],[3,6472],[3,6473],[3,6474],[3,6475],[3,6476],[3,6477],[3,6478],[3,6479],[3,6480],[3,6481],[3,6482],[3,6483],[3,6484],[3,6485],[3,6486],[3,6487],[3,6488],[3,6489],[3,6490],[3,6491],[3,6492],[3,6493],[3,6494],[3,6495],[3,6496],[3,6497],[3,6498],[3,6499],[3,6500],[3,6501],[3,6502],[3,6503],[3,6504],[3,6505],[3,6506],[3,6507],[3,6508],[3,6509],[3,6510],[3,6511],[3,6512],[3,6513],[3,6514],[3,6515],[3,6516],[3,6517],[3,6518],[3,6519],[3,6520],[3,6521],[3,6522],[3,6523],[3,6524],[3,6525],[3,6526],[3,6527],[3,6528],[3,6529],[3,6530],[3,6531],[3,6532],[3,6533],[3,6534],[3,6535],[3,6536],[3,6537],[3,6538],[3,6539],[3,6540],[3,6541],[3,6542],[3,6543],[3,6544],[3,6545],[3,6546],[3,6547],[3,6548],[3,6549],[3,6550],[3,6551],[3,6552],[3,6553],[3,6554],[3,6555],[3,6556],[3,6557],[3,6558],[3,6559],[3,6560],[3,6561],[3,6562],[3,6563],[3,6564],[3,6565],[3,6566],[3,6567],[3,6568],[3,6569],[3,6570],[3,6571],[3,6572],[3,6573],[3,6574],[3,6575],[3,6576],[3,6577],[3,6578],[3,6579],[3,6580],[3,6581],[3,6582],[3,6583],[3,6584],[3,6585],[3,6586],[3,6587],[3,6588],[3,6589],[3,6590],[3,6591],[3,6592],[3,6593],[3,6594],[3,6595],[3,6596],[3,6597],[3,6598],[3,6599],[3,6600],[3,6601],[3,6602],[3,6603],[3,6604],[3,6605],[3,6606],[3,6607],[3,6608],[3,6609],[3,6610],[3,6611],[3,6612],[3,6613],[3,6614],[3,6615],[3,6616],[3,6617],[3,6618],[3,6619],[3,6620],[3,6621],[3,6622],[3,6623],[3,6624],[3,6625],[3,6626],[3,6627],[3,6628],[3,6629],[3,6630],[3,6631],[3,6632],[3,6633],[3,6634],[3,6635],[3,6636],[3,6637],[3,6638],[3,6639],[3,6640],[3,6641],[3,6642],[3,6643],[3,6644],[3,6645],[3,6646],[3,6647],[3,6648],[3,6649],[3,6650],[3,6651],[3,6652],[3,6653],[3,6654],[3,6655],[3,6656],[3,6657],[3,6658],[3,6659],[3,6660],[3,6661],[3,6662],[3,6663],[3,6664],[3,6665],[3,6666],[3,6667],[3,6668],[3,6669],[3,6670],[3,6671],[3,6672],[3,6673],[3,6674],[3,6675],[3,6676],[3,6677],[3,6678],[3,6679],[3,6680],[3,6681],[3,6682],[3,6683],[3,6684],[3,6685],[3,6686],[3,6687],[3,6688],[3,6689],[3,6690],[3,6691],[3,6692],[3,6693],[3,6694],[3,6695],[3,6696],[3,6697],[3,6698],[3,6699],[3,6700],[3,6701],[3,6702],[3,6703],[3,6704],[3,6705],[3,6706],[3,6707],[3,6708],[3,6709],[3,6710],[3,6711],[3,6712],[3,6713],[3,6714],[3,6715],[3,6716],[3,6717],[3,6718],[3,6719],[3,6720],[3,6721],[3,6722],[3,6723],[3,6724],[3,6725],[3,6726],[3,6727],[3,6728],[3,6729],[3,6730],[3,6731],[3,6732],[3,6733],[3,6734],[3,6735],[3,6736],[3,6737],[3,6738],[3,6739],[3,6740],[3,6741],[3,6742],[3,6743],[3,6744],[3,6745],[3,6746],[3,6747],[3,6748],[3,6749],[3,6750],[3,6751],[3,6752],[3,6753],[3,6754],[3,6755],[3,6756],[3,6757],[3,6758],[3,6759],[3,6760],[3,6761],[3,6762],[3,6763],[3,6764],[3,6765],[3,6766],[3,6767],[3,6768],[3,6769],[3,6770],[3,6771],[3,6772],[3,6773],[3,6774],[3,6775],[3,6776],[3,6777],[3,6778],[3,6779],[3,6780],[3,6781],[3,6782],[3,6783],[3,6784],[3,6785],[3,6786],[3,6787],[3,6788],[3,6789],[3,6790],[3,6791],[3,6792],[3,6793],[3,6794],[3,6795],[3,6796],[3,6797],[3,6798],[3,6799],[3,6800],[3,6801],[3,6802],[3,6803],[3,6804],[3,6805],[3,6806],[3,6807],[3,6808],[3,6809],[3,6810],[3,6811],[3,6812],[3,6813],[3,6814],[3,6815],[3,6816],[3,6817],[3,6818],[3,6819],[3,6820],[3,6821],[3,6822],[3,6823],[3,6824],[3,6825],[3,6826],[3,6827],[3,6828],[3,6829],[3,6830],[3,6831],[3,6832],[3,6833],[3,6834],[3,6835],[3,6836],[3,6837],[3,6838],[3,6839],[3,6840],[3,6841],[3,6842],[3,6843],[3,6844],[3,6845],[3,6846],[3,6847],[3,6848],[3,6849],[3,6850],[3,6851],[3,6852],[3,6853],[3,6854],[3,6855],[3,6856],[3,6857],[3,6858],[3,6859],[3,6860],[3,6861],[3,6862],[3,6863],[3,6864],[3,6865],[3,6866],[3,6867],[3,6868],[3,6869],[3,6870],[3,6871],[3,6872],[3,6873],[3,6874],[3,6875],[3,6876],[3,6877],[3,6878],[3,6879],[3,6880],[3,6881],[3,6882],[3,6883],[3,6884],[3,6885],[3,6886],[3,6887],[3,6888],[3,6889],[3,6890],[3,6891],[3,6892],[3,6893],[3,6894],[3,6895],[3,6896],[3,6897],[3,6898],[3,6899],[3,6900],[3,6901],[3,6902],[3,6903],[3,6904],[3,6905],[3,6906],[3,6907],[3,6908],[3,6909],[3,6910],[3,6911],[3,6912],[3,6913],[3,6914],[3,6915],[3,6916],[3,6917],[3,6918],[3,6919],[3,6920],[3,6921],[3,6922],[3,6923],[3,6924],[3,6925],[3,6926],[3,6927],[3,6928],[3,6929],[3,6930],[3,6931],[3,6932],[3,6933],[3,6934],[3,6935],[3,6936],[3,6937],[3,6938],[3,6939],[3,6940],[3,6941],[3,6942],[3,6943],[3,6944],[3,6945],[3,6946],[3,6947],[3,6948],[3,6949],[3,6950],[3,6951],[3,6952],[3,6953],[3,6954],[3,6955],[3,6956],[3,6957],[3,6958],[3,6959],[3,6960],[3,6961],[3,6962],[3,6963],[3,6964],[3,6965],[3,6966],[3,6967],[3,6968],[3,6969],[3,6970],[3,6971],[3,6972],[3,6973],[3,6974],[3,6975],[3,6976],[3,6977],[3,6978],[3,6979],[3,6980],[3,6981],[3,6982],[3,6983],[3,6984],[3,6985],[3,6986],[3,6987],[3,6988],[3,6989],[3,6990],[3,6991],[3,6992],[3,6993],[3,6994],[3,6995],[3,6996],[3,6997],[3,6998],[3,6999],[3,7000],[3,7001],[3,7002],[3,7003],[3,7004],[3,7005],[3,7006],[3,7007],[3,7008],[3,7009],[3,7010],[3,7011],[3,7012],[3,7013],[3,7014],[3,7015],[3,7016],[3,7017],[3,7018],[3,7019],[3,7020],[3,7021],[3,7022],[3,7023],[3,7024],[3,7025],[3,7026],[3,7027],[3,7028],[3,7029],[3,7030],[3,7031],[3,7032],[3,7033],[3,7034],[3,7035],[3,7036],[3,7037],[3,7038],[3,7039],[3,7040],[3,7041],[3,7042],[3,7043],[3,7044],[3,7045],[3,7046],[3,7047],[3,7048],[3,7049],[3,7050],[3,7051],[3,7052],[3,7053],[3,7054],[3,7055],[3,7056],[3,7057],[3,7058],[3,7059],[3,7060],[3,7061],[3,7062],[3,7063],[3,7064],[3,7065],[3,7066],[3,7067],[3,7068],[3,7069],[3,7070],[3,7071],[3,7072],[3,7073],[3,7074],[3,7075],[3,7076],[3,7077],[3,7078],[3,7079],[3,7080],[3,7081],[3,7082],[3,7083],[3,7084],[3,7085],[3,7086],[3,7087],[3,7088],[3,7089],[3,7090],[3,7091],[3,7092],[3,7093],[3,7094],[3,7095],[3,7096],[3,7097],[3,7098],[3,7099],[3,7100],[3,7101],[3,7102],[3,7103],[3,7104],[3,7105],[3,7106],[3,7107],[3,7108],[3,7109],[3,7110],[3,7111],[3,7112],[3,7113],[3,7114],[3,7115],[3,7116],[3,7117],[3,7118],[3,7119],[3,7120],[3,7121],[3,7122],[3,7123],[3,7124],[3,7125],[3,7126],[3,7127],[3,7128],[3,7129],[3,7130],[3,7131],[3,7132],[3,7133],[3,7134],[3,7135],[3,7136],[3,7137],[3,7138],[3,7139],[3,7140],[3,7141],[3,7142],[3,7143],[3,7144],[3,7145],[3,7146],[3,7147],[3,7148],[3,7149],[3,7150],[3,7151],[3,7152],[3,7153],[3,7154],[3,7155],[3,7156],[3,7157],[3,7158],[3,7159],[3,7160],[3,7161],[3,7162],[3,7163],[3,7164],[3,7165],[3,7166],[3,7167],[3,7168],[3,7169],[3,7170],[3,7171],[3,7172],[3,7173],[3,7174],[3,7175],[3,7176],[3,7177],[3,7178],[3,7179],[3,7180],[3,7181],[3,7182],[3,7183],[3,7184],[3,7185],[3,7186],[3,7187],[3,7188],[3,7189],[3,7190],[3,7191],[3,7192],[3,7193],[3,7194],[3,7195],[3,7196],[3,7197],[3,7198],[3,7199],[3,7200],[3,7201],[3,7202],[3,7203],[3,7204],[3,7205],[3,7206],[3,7207],[3,7208],[3,7209],[3,7210],[3,7211],[3,7212],[3,7213],[3,7214],[3,7215],[3,7216],[3,7217],[3,7218],[3,7219],[3,7220],[3,7221],[3,7222],[3,7223],[3,7224],[3,7225],[3,7226],[3,7227],[3,7228],[3,7229],[3,7230],[3,7231],[3,7232],[3,7233],[3,7234],[3,7235],[3,7236],[3,7237],[3,7238],[3,7239],[3,7240],[3,7241],[3,7242],[3,7243],[3,7244],[3,7245],[3,7246],[3,7247],[3,7248],[3,7249],[3,7250],[3,7251],[3,7252],[3,7253],[3,7254],[3,7255],[3,7256],[3,7257],[3,7258],[3,7259],[3,7260],[3,7261],[3,7262],[3,7263],[3,7264],[3,7265],[3,7266],[3,7267],[3,7268],[3,7269],[3,7270],[3,7271],[3,7272],[3,7273],[3,7274],[3,7275],[3,7276],[3,7277],[3,7278],[3,7279],[3,7280],[3,7281],[3,7282],[3,7283],[3,7284],[3,7285],[3,7286],[3,7287],[3,7288],[3,7289],[3,7290],[3,7291],[3,7292],[3,7293],[3,7294],[3,7295],[3,7296],[3,7297],[3,7298],[3,7299],[3,7300],[3,7301],[3,7302],[3,7303],[3,7304],[3,7305],[3,7306],[3,7307],[3,7308],[3,7309],[3,7310],[3,7311],[3,7312],[3,7313],[3,7314],[3,7315],[3,7316],[3,7317],[3,7318],[3,7319],[3,7320],[3,7321],[3,7322],[3,7323],[3,7324],[3,7325],[3,7326],[3,7327],[3,7328],[3,7329],[3,7330],[3,7331],[3,7332],[3,7333],[3,7334],[3,7335],[3,7336],[3,7337],[3,7338],[3,7339],[3,7340],[3,7341],[3,7342],[3,7343],[3,7344],[3,7345],[3,7346],[3,7347],[3,7348],[3,7349],[3,7350],[3,7351],[3,7352],[3,7353],[3,7354],[3,7355],[3,7356],[3,7357],[3,7358],[3,7359],[3,7360],[3,7361],[3,7362],[3,7363],[3,7364],[3,7365],[3,7366],[3,7367],[3,7368],[3,7369],[3,7370],[3,7371],[3,7372],[3,7373],[3,7374],[3,7375],[3,7376],[3,7377],[3,7378],[3,7379],[3,7380],[3,7381],[3,7382],[3,7383],[3,7384],[3,7385],[3,7386],[3,7387],[3,7388],[3,7389],[3,7390],[3,7391],[3,7392],[3,7393],[3,7394],[3,7395],[3,7396],[3,7397],[3,7398],[3,7399],[3,7400],[3,7401],[3,7402],[3,7403],[3,7404],[3,7405],[3,7406],[3,7407],[3,7408],[3,7409],[3,7410],[3,7411],[3,7412],[3,7413],[3,7414],[3,7415],[3,7416],[3,7417],[3,7418],[3,7419],[3,7420],[3,7421],[3,7422],[3,7423],[3,7424],[3,7425],[3,7426],[3,7427],[3,7428],[3,7429],[3,7430],[3,7431],[3,7432],[3,7433],[3,7434],[3,7435],[3,7436],[3,7437],[3,7438],[3,7439],[3,7440],[3,7441],[3,7442],[3,7443],[3,7444],[3,7445],[3,7446],[3,7447],[3,7448],[3,7449],[3,7450],[3,7451],[3,7452],[3,7453],[3,7454],[3,7455],[3,7456],[3,7457],[3,7458],[3,7459],[3,7460],[3,7461],[3,7462],[3,7463],[3,7464],[3,7465],[3,7466],[3,7467],[3,7468],[3,7469],[3,7470],[3,7471],[3,7472],[3,7473],[3,7474],[3,7475],[3,7476],[3,7477],[3,7478],[3,7479],[3,7480],[3,7481],[3,7482],[3,7483],[3,7484],[3,7485],[3,7486],[3,7487],[3,7488],[3,7489],[3,7490],[3,7491],[3,7492],[3,7493],[3,7494],[3,7495],[3,7496],[3,7497],[3,7498],[3,7499],[3,7500],[3,7501],[3,7502],[3,7503],[3,7504],[3,7505],[3,7506],[3,7507],[3,7508],[3,7509],[3,7510],[3,7511],[3,7512],[3,7513],[3,7514],[3,7515],[3,7516],[3,7517],[3,7518],[3,7519],[3,7520],[3,7521],[3,7522],[3,7523],[3,7524],[3,7525],[3,7526],[3,7527],[3,7528],[3,7529],[3,7530],[3,7531],[3,7532],[3,7533],[3,7534],[3,7535],[3,7536],[3,7537],[3,7538],[3,7539],[3,7540],[3,7541],[3,7542],[3,7543],[3,7544],[3,7545],[3,7546],[3,7547],[3,7548],[3,7549],[3,7550],[3,7551],[3,7552],[3,7553],[3,7554],[3,7555],[3,7556],[3,7557],[3,7558],[3,7559],[3,7560],[3,7561],[3,7562],[3,7563],[3,7564],[3,7565],[3,7566],[3,7567],[3,7568],[3,7569],[3,7570],[3,7571],[3,7572],[3,7573],[3,7574],[3,7575],[3,7576],[3,7577],[3,7578],[3,7579],[3,7580],[3,7581],[3,7582],[3,7583],[3,7584],[3,7585],[3,7586],[3,7587],[3,7588],[3,7589],[3,7590],[3,7591],[3,7592],[3,7593],[3,7594],[3,7595],[3,7596],[3,7597],[3,7598],[3,7599],[3,7600],[3,7601],[3,7602],[3,7603],[3,7604],[3,7605],[3,7606],[3,7607],[3,7608],[3,7609],[3,7610],[3,7611],[3,7612],[3,7613],[3,7614],[3,7615],[3,7616],[3,7617],[3,7618],[3,7619],[3,7620],[3,7621],[3,7622],[3,7623],[3,7624],[3,7625],[3,7626],[3,7627],[3,7628],[3,7629],[3,7630],[3,7631],[3,7632],[3,7633],[3,7634],[3,7635],[3,7636],[3,7637],[3,7638],[3,7639],[3,7640],[3,7641],[3,7642],[3,7643],[3,7644],[3,7645],[3,7646],[3,7647],[3,7648],[3,7649],[3,7650],[3,7651],[3,7652],[3,7653],[3,7654],[3,7655],[3,7656],[3,7657],[3,7658],[3,7659],[3,7660],[3,7661],[3,7662],[3,7663],[3,7664],[3,7665],[3,7666],[3,7667],[3,7668],[3,7669],[3,7670],[3,7671],[3,7672],[3,7673],[3,7674],[3,7675],[3,7676],[3,7677],[3,7678],[3,7679],[3,7680],[3,7681],[3,7682],[3,7683],[3,7684],[3,7685],[3,7686],[3,7687],[3,7688],[3,7689],[3,7690],[3,7691],[3,7692],[3,7693],[3,7694],[3,7695],[3,7696],[3,7697],[3,7698],[3,7699],[3,7700],[3,7701],[3,7702],[3,7703],[3,7704],[3,7705],[3,7706],[3,7707],[3,7708],[3,7709],[3,7710],[3,7711],[3,7712],[3,7713],[3,7714],[3,7715],[3,7716],[3,7717],[3,7718],[3,7719],[3,7720],[3,7721],[3,7722],[3,7723],[3,7724],[3,7725],[3,7726],[3,7727],[3,7728],[3,7729],[3,7730],[3,7731],[3,7732],[3,7733],[3,7734],[3,7735],[3,7736],[3,7737],[3,7738],[3,7739],[3,7740],[3,7741],[3,7742],[3,7743],[3,7744],[3,7745],[3,7746],[3,7747],[3,7748],[3,7749],[3,7750],[3,7751],[3,7752],[3,7753],[3,7754],[3,7755],[3,7756],[3,7757],[3,7758],[3,7759],[3,7760],[3,7761],[3,7762],[3,7763],[3,7764],[3,7765],[3,7766],[3,7767],[3,7768],[3,7769],[3,7770],[3,7771],[3,7772],[3,7773],[3,7774],[3,7775],[3,7776],[3,7777],[3,7778],[3,7779],[3,7780],[3,7781],[3,7782],[3,7783],[3,7784],[3,7785],[3,7786],[3,7787],[3,7788],[3,7789],[3,7790],[3,7791],[3,7792],[3,7793],[3,7794],[3,7795],[3,7796],[3,7797],[3,7798],[3,7799],[3,7800],[3,7801],[3,7802],[3,7803],[3,7804],[3,7805],[3,7806],[3,7807],[3,7808],[3,7809],[3,7810],[3,7811],[3,7812],[3,7813],[3,7814],[3,7815],[3,7816],[3,7817],[3,7818],[3,7819],[3,7820],[3,7821],[3,7822],[3,7823],[3,7824],[3,7825],[3,7826],[3,7827],[3,7828],[3,7829],[3,7830],[3,7831],[3,7832],[3,7833],[3,7834],[3,7835],[3,7836],[3,7837],[3,7838],[3,7839],[3,7840],[3,7841],[3,7842],[3,7843],[3,7844],[3,7845],[3,7846],[3,7847],[3,7848],[3,7849],[3,7850],[3,7851],[3,7852],[3,7853],[3,7854],[3,7855],[3,7856],[3,7857],[3,7858],[3,7859],[3,7860],[3,7861],[3,7862],[3,7863],[3,7864],[3,7865],[3,7866],[3,7867],[3,7868],[3,7869],[3,7870],[3,7871],[3,7872],[3,7873],[3,7874],[3,7875],[3,7876],[3,7877],[3,7878],[3,7879],[3,7880],[3,7881],[3,7882],[3,7883],[3,7884],[3,7885],[3,7886],[3,7887],[3,7888],[3,7889],[3,7890],[3,7891],[3,7892],[3,7893],[3,7894],[3,7895],[3,7896],[3,7897],[3,7898],[3,7899],[3,7900],[3,7901],[3,7902],[3,7903],[3,7904],[3,7905],[3,7906],[3,7907],[3,7908],[3,7909],[3,7910],[3,7911],[3,7912],[3,7913],[3,7914],[3,7915],[3,7916],[3,7917],[3,7918],[3,7919],[3,7920],[3,7921],[3,7922],[3,7923],[3,7924],[3,7925],[3,7926],[3,7927],[3,7928],[3,7929],[3,7930],[3,7931],[3,7932],[3,7933],[3,7934],[3,7935],[3,7936],[3,7937],[3,7938],[3,7939],[3,7940],[3,7941],[3,7942],[3,7943],[3,7944],[3,7945],[3,7946],[3,7947],[3,7948],[3,7949],[3,7950],[3,7951],[3,7952],[3,7953],[3,7954],[3,7955],[3,7956],[3,7957],[3,7958],[3,7959],[3,7960],[3,7961],[3,7962],[3,7963],[3,7964],[3,7965],[3,7966],[3,7967],[3,7968],[3,7969],[3,7970],[3,7971],[3,7972],[3,7973],[3,7974],[3,7975],[3,7976],[3,7977],[3,7978],[3,7979],[3,7980],[3,7981],[3,7982],[3,7983],[3,7984],[3,7985],[3,7986],[3,7987],[3,7988],[3,7989],[3,7990],[3,7991],[3,7992],[3,7993],[3,7994],[3,7995],[3,7996],[3,7997],[3,7998],[3,7999],[3,8000],[3,8001],[3,8002],[3,8003],[3,8004],[3,8005],[3,8006],[3,8007],[3,8008],[3,8009],[3,8010],[3,8011],[3,8012],[3,8013],[3,8014],[3,8015],[3,8016],[3,8017],[3,8018],[3,8019],[3,8020],[3,8021],[3,8022],[3,8023],[3,8024],[3,8025],[3,8026],[3,8027],[3,8028],[3,8029],[3,8030],[3,8031],[3,8032],[3,8033],[3,8034],[3,8035],[3,8036],[3,8037],[3,8038],[3,8039],[3,8040],[3,8041],[3,8042],[3,8043],[3,8044],[3,8045],[3,8046],[3,8047],[3,8048],[3,8049],[3,8050],[3,8051],[3,8052],[3,8053],[3,8054],[3,8055],[3,8056],[3,8057],[3,8058],[3,8059],[3,8060],[3,8061],[3,8062],[3,8063],[3,8064],[3,8065],[3,8066],[3,8067],[3,8068],[3,8069],[3,8070],[3,8071],[3,8072],[3,8073],[3,8074],[3,8075],[3,8076],[3,8077],[3,8078],[3,8079],[3,8080],[3,8081],[3,8082],[3,8083],[3,8084],[3,8085],[3,8086],[3,8087],[3,8088],[3,8089],[3,8090],[3,8091],[3,8092],[3,8093],[3,8094],[3,8095],[3,8096],[3,8097],[3,8098],[3,8099],[3,8100],[3,8101],[3,8102],[3,8103],[3,8104],[3,8105],[3,8106],[3,8107],[3,8108],[3,8109],[3,8110],[3,8111],[3,8112],[3,8113],[3,8114],[3,8115],[3,8116],[3,8117],[3,8118],[3,8119],[3,8120],[3,8121],[3,8122],[3,8123],[3,8124],[3,8125],[3,8126],[3,8127],[3,8128],[3,8129],[3,8130],[3,8131],[3,8132],[3,8133],[3,8134],[3,8135],[3,8136],[3,8137],[3,8138],[3,8139],[3,8140],[3,8141],[3,8142],[3,8143],[3,8144],[3,8145],[3,8146],[3,8147],[3,8148],[3,8149],[3,8150],[3,8151],[3,8152],[3,8153],[3,8154],[3,8155],[3,8156],[3,8157],[3,8158],[3,8159],[3,8160],[3,8161],[3,8162],[3,8163],[3,8164],[3,8165],[3,8166],[3,8167],[3,8168],[3,8169],[3,8170],[3,8171],[3,8172],[3,8173],[3,8174],[3,8175],[3,8176],[3,8177],[3,8178],[3,8179],[3,8180],[3,8181],[3,8182],[3,8183],[3,8184],[3,8185],[3,8186],[3,8187],[3,8188],[3,8189],[3,8190],[3,8191],[3,8192],[3,8193],[3,8194],[3,8195],[3,8196],[3,8197],[3,8198],[3,8199],[3,8200],[3,8201],[3,8202],[3,8203],[3,8204],[3,8205],[3,8206],[3,8207],[3,8208],[3,8209],[3,8210],[3,8211],[3,8212],[3,8213],[3,8214],[3,8215],[3,8216],[3,8217],[3,8218],[3,8219],[3,8220],[3,8221],[3,8222],[3,8223],[3,8224],[3,8225],[3,8226],[3,8227],[3,8228],[3,8229],[3,8230],[3,8231],[3,8232],[3,8233],[3,8234],[3,8235],[3,8236],[3,8237],[3,8238],[3,8239],[3,8240],[3,8241],[3,8242],[3,8243],[3,8244],[3,8245],[3,8246],[3,8247],[3,8248],[3,8249],[3,8250],[3,8251],[3,8252],[3,8253],[3,8254],[3,8255],[3,8256],[3,8257],[3,8258],[3,8259],[3,8260],[3,8261],[3,8262],[3,8263],[3,8264],[3,8265],[3,8266],[3,8267],[3,8268],[3,8269],[3,8270],[3,8271],[3,8272],[3,8273],[3,8274],[3,8275],[3,8276],[3,8277],[3,8278],[3,8279],[3,8280],[3,8281],[3,8282],[3,8283],[3,8284],[3,8285],[3,8286],[3,8287],[3,8288],[3,8289],[3,8290],[3,8291],[3,8292],[3,8293],[3,8294],[3,8295],[3,8296],[3,8297],[3,8298],[3,8299],[3,8300],[3,8301],[3,8302],[3,8303],[3,8304],[3,8305],[3,8306],[3,8307],[3,8308],[3,8309],[3,8310],[3,8311],[3,8312],[3,8313],[3,8314],[3,8315],[3,8316],[3,8317],[3,8318],[3,8319],[3,8320],[3,8321],[3,8322],[3,8323],[3,8324],[3,8325],[3,8326],[3,8327],[3,8328],[3,8329],[3,8330],[3,8331],[3,8332],[3,8333],[3,8334],[3,8335],[3,8336],[3,8337],[3,8338],[3,8339],[3,8340],[3,8341],[3,8342],[3,8343],[3,8344],[3,8345],[3,8346],[3,8347],[3,8348],[3,8349],[3,8350],[3,8351],[3,8352],[3,8353],[3,8354],[3,8355],[3,8356],[3,8357],[3,8358],[3,8359],[3,8360],[3,8361],[3,8362],[3,8363],[3,8364],[3,8365],[3,8366],[3,8367],[3,8368],[3,8369],[3,8370],[3,8371],[3,8372],[3,8373],[3,8374],[3,8375],[3,8376],[3,8377],[3,8378],[3,8379],[3,8380],[3,8381],[3,8382],[3,8383],[3,8384],[3,8385],[3,8386],[3,8387],[3,8388],[3,8389],[3,8390],[3,8391],[3,8392],[3,8393],[3,8394],[3,8395],[3,8396],[3,8397],[3,8398],[3,8399],[3,8400],[3,8401],[3,8402],[3,8403],[3,8404],[3,8405],[3,8406],[3,8407],[3,8408],[3,8409],[3,8410],[3,8411],[3,8412],[3,8413],[3,8414],[3,8415],[3,8416],[3,8417],[3,8418],[3,8419],[3,8420],[3,8421],[3,8422],[3,8423],[3,8424],[3,8425],[3,8426],[3,8427],[3,8428],[3,8429],[3,8430],[3,8431],[3,8432],[3,8433],[3,8434],[3,8435],[3,8436],[3,8437],[3,8438],[3,8439],[3,8440],[3,8441],[3,8442],[3,8443],[3,8444],[3,8445],[3,8446],[3,8447],[3,8448],[3,8449],[3,8450],[3,8451],[3,8452],[3,8453],[3,8454],[3,8455],[3,8456],[3,8457],[3,8458],[3,8459],[3,8460],[3,8461],[3,8462],[3,8463],[3,8464],[3,8465],[3,8466],[3,8467],[3,8468],[3,8469],[3,8470],[3,8471],[3,8472],[3,8473],[3,8474],[3,8475],[3,8476],[3,8477],[3,8478],[3,8479],[3,8480],[3,8481],[3,8482],[3,8483],[3,8484],[3,8485],[3,8486],[3,8487],[3,8488],[3,8489],[3,8490],[3,8491],[3,8492],[3,8493],[3,8494],[3,8495],[3,8496],[3,8497],[3,8498],[3,8499],[3,8500],[3,8501],[3,8502],[3,8503],[3,8504],[3,8505],[3,8506],[3,8507],[3,8508],[3,8509],[3,8510],[3,8511],[3,8512],[3,8513],[3,8514],[3,8515],[3,8516],[3,8517],[3,8518],[3,8519],[3,8520],[3,8521],[3,8522],[3,8523],[3,8524],[3,8525],[3,8526],[3,8527],[3,8528],[3,8529],[3,8530],[3,8531],[3,8532],[3,8533],[3,8534],[3,8535],[3,8536],[3,8537],[3,8538],[3,8539],[3,8540],[3,8541],[3,8542],[3,8543],[3,8544],[3,8545],[3,8546],[3,8547],[3,8548],[3,8549],[3,8550],[3,8551],[3,8552],[3,8553],[3,8554],[3,8555],[3,8556],[3,8557],[3,8558],[3,8559],[3,8560],[3,8561],[3,8562],[3,8563],[3,8564],[3,8565],[3,8566],[3,8567],[3,8568],[3,8569],[3,8570],[3,8571],[3,8572],[3,8573],[3,8574],[3,8575],[3,8576],[3,8577],[3,8578],[3,8579],[3,8580],[3,8581],[3,8582],[3,8583],[3,8584],[3,8585],[3,8586],[3,8587],[3,8588],[3,8589],[3,8590],[3,8591],[3,8592],[3,8593],[3,8594],[3,8595],[3,8596],[3,8597],[3,8598],[3,8599],[3,8600],[3,8601],[3,8602],[3,8603],[3,8604],[3,8605],[3,8606],[3,8607],[3,8608],[3,8609],[3,8610],[3,8611],[3,8612],[3,8613],[3,8614],[3,8615],[3,8616],[3,8617],[3,8618],[3,8619],[3,8620],[3,8621],[3,8622],[3,8623],[3,8624],[3,8625],[3,8626],[3,8627],[3,8628],[3,8629],[3,8630],[3,8631],[3,8632],[3,8633],[3,8634],[3,8635],[3,8636],[3,8637],[3,8638],[3,8639],[3,8640],[3,8641],[3,8642],[3,8643],[3,8644],[3,8645],[3,8646],[3,8647],[3,8648],[3,8649],[3,8650],[3,8651],[3,8652],[3,8653],[3,8654],[3,8655],[3,8656],[3,8657],[3,8658],[3,8659],[3,8660],[3,8661],[3,8662],[3,8663],[3,8664],[3,8665],[3,8666],[3,8667],[3,8668],[3,8669],[3,8670],[3,8671],[3,8672],[3,8673],[3,8674],[3,8675],[3,8676],[3,8677],[3,8678],[3,8679],[3,8680],[3,8681],[3,8682],[3,8683],[3,8684],[3,8685],[3,8686],[3,8687],[3,8688],[3,8689],[3,8690],[3,8691],[3,8692],[3,8693],[3,8694],[3,8695],[3,8696],[3,8697],[3,8698],[3,8699],[3,8700],[3,8701],[3,8702],[3,8703],[3,8704],[3,8705],[3,8706],[3,8707],[3,8708],[3,8709],[3,8710],[3,8711],[3,8712],[3,8713],[3,8714],[3,8715],[3,8716],[3,8717],[3,8718],[3,8719],[3,8720],[3,8721],[3,8722],[3,8723],[3,8724],[3,8725],[3,8726],[3,8727],[3,8728],[3,8729],[3,8730],[3,8731],[3,8732],[3,8733],[3,8734],[3,8735],[3,8736],[3,8737],[3,8738],[3,8739],[3,8740],[3,8741],[3,8742],[3,8743],[3,8744],[3,8745],[3,8746],[3,8747],[3,8748],[3,8749],[3,8750],[3,8751],[3,8752],[3,8753],[3,8754],[3,8755],[3,8756],[3,8757],[3,8758],[3,8759],[3,8760],[3,8761],[3,8762],[3,8763],[3,8764],[3,8765],[3,8766],[3,8767],[3,8768],[3,8769],[3,8770],[3,8771],[3,8772],[3,8773],[3,8774],[3,8775],[3,8776],[3,8777],[3,8778],[3,8779],[3,8780],[3,8781],[3,8782],[3,8783],[3,8784],[3,8785],[3,8786],[3,8787],[3,8788],[3,8789],[3,8790],[3,8791],[3,8792],[3,8793],[3,8794],[3,8795],[3,8796],[3,8797],[3,8798],[3,8799],[3,8800],[3,8801],[3,8802],[3,8803],[3,8804],[3,8805],[3,8806],[3,8807],[3,8808],[3,8809],[3,8810],[3,8811],[3,8812],[3,8813],[3,8814],[3,8815],[3,8816],[3,8817],[3,8818],[3,8819],[3,8820],[3,8821],[3,8822],[3,8823],[3,8824],[3,8825],[3,8826],[3,8827],[3,8828],[3,8829],[3,8830],[3,8831],[3,8832],[3,8833],[3,8834],[3,8835],[3,8836],[3,8837],[3,8838],[3,8839],[3,8840],[3,8841],[3,8842],[3,8843],[3,8844],[3,8845],[3,8846],[3,8847],[3,8848],[3,8849],[3,8850],[3,8851],[3,8852],[3,8853],[3,8854],[3,8855],[3,8856],[3,8857],[3,8858],[3,8859],[3,8860],[3,8861],[3,8862],[3,8863],[3,8864],[3,8865],[3,8866],[3,8867],[3,8868],[3,8869],[3,8870],[3,8871],[3,8872],[3,8873],[3,8874],[3,8875],[3,8876],[3,8877],[3,8878],[3,8879],[3,8880],[3,8881],[3,8882],[3,8883],[3,8884],[3,8885],[3,8886],[3,8887],[3,8888],[3,8889],[3,8890],[3,8891],[3,8892],[3,8893],[3,8894],[3,8895],[3,8896],[3,8897],[3,8898],[3,8899],[3,8900],[3,8901],[3,8902],[3,8903],[3,8904],[3,8905],[3,8906],[3,8907],[3,8908],[3,8909],[3,8910],[3,8911],[3,8912],[3,8913],[3,8914],[3,8915],[3,8916],[3,8917],[3,8918],[3,8919],[3,8920],[3,8921],[3,8922],[3,8923],[3,8924],[3,8925],[3,8926],[3,8927],[3,8928],[3,8929],[3,8930],[3,8931],[3,8932],[3,8933],[3,8934],[3,8935],[3,8936],[3,8937],[3,8938],[3,8939],[3,8940],[3,8941],[3,8942],[3,8943],[3,8944],[3,8945],[3,8946],[3,8947],[3,8948],[3,8949],[3,8950],[3,8951],[3,8952],[3,8953],[3,8954],[3,8955],[3,8956],[3,8957],[3,8958],[3,8959],[3,8960],[3,8961],[3,8962],[3,8963],[3,8964],[3,8965],[3,8966],[3,8967],[3,8968],[3,8969],[3,8970],[3,8971],[3,8972],[3,8973],[3,8974],[3,8975],[3,8976],[3,8977],[3,8978],[3,8979],[3,8980],[3,8981],[3,8982],[3,8983],[3,8984],[3,8985],[3,8986],[3,8987],[3,8988],[3,8989],[3,8990],[3,8991],[3,8992],[3,8993],[3,8994],[3,8995],[3,8996],[3,8997],[3,8998],[3,8999],[3,9000],[3,9001],[3,9002],[3,9003],[3,9004],[3,9005],[3,9006],[3,9007],[3,9008],[3,9009],[3,9010],[3,9011],[3,9012],[3,9013],[3,9014],[3,9015],[3,9016],[3,9017],[3,9018],[3,9019],[3,9020],[3,9021],[3,9022],[3,9023],[3,9024],[3,9025],[3,9026],[3,9027],[3,9028],[3,9029],[3,9030],[3,9031],[3,9032],[3,9033],[3,9034],[3,9035],[3,9036],[3,9037],[3,9038],[3,9039],[3,9040],[3,9041],[3,9042],[3,9043],[3,9044],[3,9045],[3,9046],[3,9047],[3,9048],[3,9049],[3,9050],[3,9051],[3,9052],[3,9053],[3,9054],[3,9055],[3,9056],[3,9057],[3,9058],[3,9059],[3,9060],[3,9061],[3,9062],[3,9063],[3,9064],[3,9065],[3,9066],[3,9067],[3,9068],[3,9069],[3,9070],[3,9071],[3,9072],[3,9073],[3,9074],[3,9075],[3,9076],[3,9077],[3,9078],[3,9079],[3,9080],[3,9081],[3,9082],[3,9083],[3,9084],[3,9085],[3,9086],[3,9087],[3,9088],[3,9089],[3,9090],[3,9091],[3,9092],[3,9093],[3,9094],[3,9095],[3,9096],[3,9097],[3,9098],[3,9099],[3,9100],[3,9101],[3,9102],[3,9103],[3,9104],[3,9105],[3,9106],[3,9107],[3,9108],[3,9109],[3,9110],[3,9111],[3,9112],[3,9113],[3,9114],[3,9115],[3,9116],[3,9117],[3,9118],[3,9119],[3,9120],[3,9121],[3,9122],[3,9123],[3,9124],[3,9125],[3,9126],[3,9127],[3,9128],[3,9129],[3,9130],[3,9131],[3,9132],[3,9133],[3,9134],[3,9135],[3,9136],[3,9137],[3,9138],[3,9139],[3,9140],[3,9141],[3,9142],[3,9143],[3,9144],[3,9145],[3,9146],[3,9147],[3,9148],[3,9149],[3,9150],[3,9151],[3,9152],[3,9153],[3,9154],[3,9155],[3,9156],[3,9157],[3,9158],[3,9159],[3,9160],[3,9161],[3,9162],[3,9163],[3,9164],[3,9165],[3,9166],[3,9167],[3,9168],[3,9169],[3,9170],[3,9171],[3,9172],[3,9173],[3,9174],[3,9175],[3,9176],[3,9177],[3,9178],[3,9179],[3,9180],[3,9181],[3,9182],[3,9183],[3,9184],[3,9185],[3,9186],[3,9187],[3,9188],[3,9189],[3,9190],[3,9191],[3,9192],[3,9193],[3,9194],[3,9195],[3,9196],[3,9197],[3,9198],[3,9199],[3,9200],[3,9201],[3,9202],[3,9203],[3,9204],[3,9205],[3,9206],[3,9207],[3,9208],[3,9209],[3,9210],[3,9211],[3,9212],[3,9213],[3,9214],[3,9215],[3,9216],[3,9217],[3,9218],[3,9219],[3,9220],[3,9221],[3,9222],[3,9223],[3,9224],[3,9225],[3,9226],[3,9227],[3,9228],[3,9229],[3,9230],[3,9231],[3,9232],[3,9233],[3,9234],[3,9235],[3,9236],[3,9237],[3,9238],[3,9239],[3,9240],[3,9241],[3,9242],[3,9243],[3,9244],[3,9245],[3,9246],[3,9247],[3,9248],[3,9249],[3,9250],[3,9251],[3,9252],[3,9253],[3,9254],[3,9255],[3,9256],[3,9257],[3,9258],[3,9259],[3,9260],[3,9261],[3,9262],[3,9263],[3,9264],[3,9265],[3,9266],[3,9267],[3,9268],[3,9269],[3,9270],[3,9271],[3,9272],[3,9273],[3,9274],[3,9275],[3,9276],[3,9277],[3,9278],[3,9279],[3,9280],[3,9281],[3,9282],[3,9283],[3,9284],[3,9285],[3,9286],[3,9287],[3,9288],[3,9289],[3,9290],[3,9291],[3,9292],[3,9293],[3,9294],[3,9295],[3,9296],[3,9297],[3,9298],[3,9299],[3,9300],[3,9301],[3,9302],[3,9303],[3,9304],[3,9305],[3,9306],[3,9307],[3,9308],[3,9309],[3,9310],[3,9311],[3,9312],[3,9313],[3,9314],[3,9315],[3,9316],[3,9317],[3,9318],[3,9319],[3,9320],[3,9321],[3,9322],[3,9323],[3,9324],[3,9325],[3,9326],[3,9327],[3,9328],[3,9329],[3,9330],[3,9331],[3,9332],[3,9333],[3,9334],[3,9335],[3,9336],[3,9337],[3,9338],[3,9339],[3,9340],[3,9341],[3,9342],[3,9343],[3,9344],[3,9345],[3,9346],[3,9347],[3,9348],[3,9349],[3,9350],[3,9351],[3,9352],[3,9353],[3,9354],[3,9355],[3,9356],[3,9357],[3,9358],[3,9359],[3,9360],[3,9361],[3,9362],[3,9363],[3,9364],[3,9365],[3,9366],[3,9367],[3,9368],[3,9369],[3,9370],[3,9371],[3,9372],[3,9373],[3,9374],[3,9375],[3,9376],[3,9377],[3,9378],[3,9379],[3,9380],[3,9381],[3,9382],[3,9383],[3,9384],[3,9385],[3,9386],[3,9387],[3,9388],[3,9389],[3,9390],[3,9391],[3,9392],[3,9393],[3,9394],[3,9395],[3,9396],[3,9397],[3,9398],[3,9399],[3,9400],[3,9401],[3,9402],[3,9403],[3,9404],[3,9405],[3,9406],[3,9407],[3,9408],[3,9409],[3,9410],[3,9411],[3,9412],[3,9413],[3,9414],[3,9415],[3,9416],[3,9417],[3,9418],[3,9419],[3,9420],[3,9421],[3,9422],[3,9423],[3,9424],[3,9425],[3,9426],[3,9427],[3,9428],[3,9429],[3,9430],[3,9431],[3,9432],[3,9433],[3,9434],[3,9435],[3,9436],[3,9437],[3,9438],[3,9439],[3,9440],[3,9441],[3,9442],[3,9443],[3,9444],[3,9445],[3,9446],[3,9447],[3,9448],[3,9449],[3,9450],[3,9451],[3,9452],[3,9453],[3,9454],[3,9455],[3,9456],[3,9457],[3,9458],[3,9459],[3,9460],[3,9461],[3,9462],[3,9463],[3,9464],[3,9465],[3,9466],[3,9467],[3,9468],[3,9469],[3,9470],[3,9471],[3,9472],[3,9473],[3,9474],[3,9475],[3,9476],[3,9477],[3,9478],[3,9479],[3,9480],[3,9481],[3,9482],[3,9483],[3,9484],[3,9485],[3,9486],[3,9487],[3,9488],[3,9489],[3,9490],[3,9491],[3,9492],[3,9493],[3,9494],[3,9495],[3,9496],[3,9497],[3,9498],[3,9499],[3,9500],[3,9501],[3,9502],[3,9503],[3,9504],[3,9505],[3,9506],[3,9507],[3,9508],[3,9509],[3,9510],[3,9511],[3,9512],[3,9513],[3,9514],[3,9515],[3,9516],[3,9517],[3,9518],[3,9519],[3,9520],[3,9521],[3,9522],[3,9523],[3,9524],[3,9525],[3,9526],[3,9527],[3,9528],[3,9529],[3,9530],[3,9531],[3,9532],[3,9533],[3,9534],[3,9535],[3,9536],[3,9537],[3,9538],[3,9539],[3,9540],[3,9541],[3,9542],[3,9543],[3,9544],[3,9545],[3,9546],[3,9547],[3,9548],[3,9549],[3,9550],[3,9551],[3,9552],[3,9553],[3,9554],[3,9555],[3,9556],[3,9557],[3,9558],[3,9559],[3,9560],[3,9561],[3,9562],[3,9563],[3,9564],[3,9565],[3,9566],[3,9567],[3,9568],[3,9569],[3,9570],[3,9571],[3,9572],[3,9573],[3,9574],[3,9575],[3,9576],[3,9577],[3,9578],[3,9579],[3,9580],[3,9581],[3,9582],[3,9583],[3,9584],[3,9585],[3,9586],[3,9587],[3,9588],[3,9589],[3,9590],[3,9591],[3,9592],[3,9593],[3,9594],[3,9595],[3,9596],[3,9597],[3,9598],[3,9599],[3,9600],[3,9601],[3,9602],[3,9603],[3,9604],[3,9605],[3,9606],[3,9607],[3,9608],[3,9609],[3,9610],[3,9611],[3,9612],[3,9613],[3,9614],[3,9615],[3,9616],[3,9617],[3,9618],[3,9619],[3,9620],[3,9621],[3,9622],[3,9623],[3,9624],[3,9625],[3,9626],[3,9627],[3,9628],[3,9629],[3,9630],[3,9631],[3,9632],[3,9633],[3,9634],[3,9635],[3,9636],[3,9637],[3,9638],[3,9639],[3,9640],[3,9641],[3,9642],[3,9643],[3,9644],[3,9645],[3,9646],[3,9647],[3,9648],[3,9649],[3,9650],[3,9651],[3,9652],[3,9653],[3,9654],[3,9655],[3,9656],[3,9657],[3,9658],[3,9659],[3,9660],[3,9661],[3,9662],[3,9663],[3,9664],[3,9665],[3,9666],[3,9667],[3,9668],[3,9669],[3,9670],[3,9671],[3,9672],[3,9673],[3,9674],[3,9675],[3,9676],[3,9677],[3,9678],[3,9679],[3,9680],[3,9681],[3,9682],[3,9683],[3,9684],[3,9685],[3,9686],[3,9687],[3,9688],[3,9689],[3,9690],[3,9691],[3,9692],[3,9693],[3,9694],[3,9695],[3,9696],[3,9697],[3,9698],[3,9699],[3,9700],[3,9701],[3,9702],[3,9703],[3,9704],[3,9705],[3,9706],[3,9707],[3,9708],[3,9709],[3,9710],[3,9711],[3,9712],[3,9713],[3,9714],[3,9715],[3,9716],[3,9717],[3,9718],[3,9719],[3,9720],[3,9721],[3,9722],[3,9723],[3,9724],[3,9725],[3,9726],[3,9727],[3,9728],[3,9729],[3,9730],[3,9731],[3,9732],[3,9733],[3,9734],[3,9735],[3,9736],[3,9737],[3,9738],[3,9739],[3,9740],[3,9741],[3,9742],[3,9743],[3,9744],[3,9745],[3,9746],[3,9747],[3,9748],[3,9749],[3,9750],[3,9751],[3,9752],[3,9753],[3,9754],[3,9755],[3,9756],[3,9757],[3,9758],[3,9759],[3,9760],[3,9761],[3,9762],[3,9763],[3,9764],[3,9765],[3,9766],[3,9767],[3,9768],[3,9769],[3,9770],[3,9771],[3,9772],[3,9773],[3,9774],[3,9775],[3,9776],[3,9777],[3,9778],[3,9779],[3,9780],[3,9781],[3,9782],[3,9783],[3,9784],[3,9785],[3,9786],[3,9787],[3,9788],[3,9789],[3,9790],[3,9791],[3,9792],[3,9793],[3,9794],[3,9795],[3,9796],[3,9797],[3,9798],[3,9799],[3,9800],[3,9801],[3,9802],[3,9803],[3,9804],[3,9805],[3,9806],[3,9807],[3,9808],[3,9809],[3,9810],[3,9811],[3,9812],[3,9813],[3,9814],[3,9815],[3,9816],[3,9817],[3,9818],[3,9819],[3,9820],[3,9821],[3,9822],[3,9823],[3,9824],[3,9825],[3,9826],[3,9827],[3,9828],[3,9829],[3,9830],[3,9831],[3,9832],[3,9833],[3,9834],[3,9835],[3,9836],[3,9837],[3,9838],[3,9839],[3,9840],[3,9841],[3,9842],[3,9843],[3,9844],[3,9845],[3,9846],[3,9847],[3,9848],[3,9849],[3,9850],[3,9851],[3,9852],[3,9853],[3,9854],[3,9855],[3,9856],[3,9857],[3,9858],[3,9859],[3,9860],[3,9861],[3,9862],[3,9863],[3,9864],[3,9865],[3,9866],[3,9867],[3,9868],[3,9869],[3,9870],[3,9871],[3,9872],[3,9873],[3,9874],[3,9875],[3,9876],[3,9877],[3,9878],[3,9879],[3,9880],[3,9881],[3,9882],[3,9883],[3,9884],[3,9885],[3,9886],[3,9887],[3,9888],[3,9889],[3,9890],[3,9891],[3,9892],[3,9893],[3,9894],[3,9895],[3,9896],[3,9897],[3,9898],[3,9899],[3,9900],[3,9901],[3,9902],[3,9903],[3,9904],[3,9905],[3,9906],[3,9907],[3,9908],[3,9909],[3,9910],[3,9911],[3,9912],[3,9913],[3,9914],[3,9915],[3,9916],[3,9917],[3,9918],[3,9919],[3,9920],[3,9921],[3,9922],[3,9923],[3,9924],[3,9925],[3,9926],[3,9927],[3,9928],[3,9929],[3,9930],[3,9931],[3,9932],[3,9933],[3,9934],[3,9935],[3,9936],[3,9937],[3,9938],[3,9939],[3,9940],[3,9941],[3,9942],[3,9943],[3,9944],[3,9945],[3,9946],[3,9947],[3,9948],[3,9949],[3,9950],[3,9951],[3,9952],[3,9953],[3,9954],[3,9955],[3,9956],[3,9957],[3,9958],[3,9959],[3,9960],[3,9961],[3,9962],[3,9963],[3,9964],[3,9965],[3,9966],[3,9967],[3,9968],[3,9969],[3,9970],[3,9971],[3,9972],[3,9973],[3,9974],[3,9975],[3,9976],[3,9977],[3,9978],[3,9979],[3,9980],[3,9981],[3,9982],[3,9983],[3,9984],[3,9985],[3,9986],[3,9987],[3,9988],[3,9989],[3,9990],[3,9991],[3,9992],[3,9993],[3,9994],[3,9995],[3,9996],[3,9997],[3,9998],[3,9999],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1],[1]]",
            "expected_output": "[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null
            "task_finish_time": 1742928559516,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 16,
            "total_testcases": 17,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586021277",
            "status_msg": "Time Limit Exceeded",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "count-elements-with-strictly-smaller-and-greater-elements",
        "description": "Given an integer array nums, return the number of elements that have both a strictly smaller and a strictly greater element appear in nums.",
        "examples": [
            "Input: nums = [11,7,2,15]\nOutput: 2\nExplanation: The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.\nElement 11 has element 7 strictly smaller than it and element 15 strictly greater than it.\nIn total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums.",
            "Input: nums = [-3,3,3,90]\nOutput: 2\nExplanation: The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.\nSince there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in nums."
        ],
        "constraints": "1 <= nums.length <= 100\n-105 <= nums[i] <= 105",
        "release_time": 1686274970,
        "oracle_code": "class Solution {\npublic:\n    int countElements(vector<int>& nums) {\n\n        if(nums.size() == 1 || nums.size() == 2) return 0;\n        int ma = *max_element(nums.begin(),nums.end());\n        int countma = count(nums.begin(),nums.end(),ma);\n        int mi = *min_element(nums.begin(),nums.end());\n        int countmi = count(nums.begin(),nums.end(),mi);\n        int ans = nums.size() - (countma+countmi);\n        if(ans <= 0) return 0;\n        return nums.size() - (countma+countmi);\n        \n    }\n};",
        "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countElements(vector<int>& nums) {\\n\\n        if(nums.size() == 1 || nums.size() == 2) return 0;\\n        int ma = *max_element(nums.begin(),nums.end());\\n        int countma = count(nums.begin(),nums.end(),ma);\\n        int mi = *min_element(nums.begin(),nums.end());\\n        int countmi = count(nums.begin(),nums.end(),mi);\\n        int ans = nums.size() - (countma+countmi);\\n        if(ans <= 0) return 0;\\n        return nums.size() - (countma+countmi);\\n        \\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int countElements(list<int>& nums) {\n\n        if(nums.size() == 1 || nums.size() == 2) return 0;\n        int ma = *max_element(nums.begin(),nums.end());\n        int countma = count(nums.begin(),nums.end(),ma);\n        int mi = *min_element(nums.begin(),nums.end());\n        int countmi = count(nums.begin(),nums.end(),mi);\n        int ans = nums.size() - (countma+countmi);\n        if(ans <= 0) return 0;\n        return nums.size() - (countma+countmi);\n        \n    }\n};\n",
        "explanations": "\nUsing 'list' data structure from Python in C++, which is undefined in C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int countElements(list<int>& nums) {\n        if(nums.empty()) return 0;\n        int ma = *max_element(nums.begin(),nums.end());\n        int countma = count(nums.begin(),nums.end(),ma);\n        int mi = *min_element(nums.begin(),nums.end());\n        int countmi = count(nums.begin(),nums.end(),mi);\n        int ans = nums.size() - (countma+countmi);\n        if(ans <= 0) return 0;\n        return ans;\n    }\n};\n",
        "fixing_exp": "\nThe original code didn't handle the case when the list is empty. Adding `if(nums.empty()) return 0;` at the beginning of the function fixes this bug",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 22: Char 42: error: non-const lvalue reference to type 'list<int>' cannot bind to a value of unrelated type 'vector<int>'",
            "full_compile_error": "Line 22: Char 42: error: non-const lvalue reference to type 'list<int>' cannot bind to a value of unrelated type 'vector<int>'\n   22 |       int ret = Solution().countElements(param_1); return ret;\n      |                                          ^~~~~~~\nLine 4: Char 34: note: passing argument to parameter 'nums' here\n    4 |     int countElements(list<int>& nums) {\n      |                                  ^\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "2269",
            "task_finish_time": 1742928564813,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586021470",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "target-sum",
        "description": "You are given an integer array nums and an integer target.\nYou want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.\n\nFor example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression \"+2-1\".\n\nReturn the number of different expressions that you can build, which evaluates to target.",
        "examples": [
            "Input: nums = [1,1,1,1,1], target = 3\nOutput: 5\nExplanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n-1 + 1 + 1 + 1 + 1 = 3\n+1 - 1 + 1 + 1 + 1 = 3\n+1 + 1 - 1 + 1 + 1 = 3\n+1 + 1 + 1 - 1 + 1 = 3\n+1 + 1 + 1 + 1 - 1 = 3",
            "Input: nums = [1], target = 1\nOutput: 1"
        ],
        "constraints": "1 <= nums.length <= 20\n0 <= nums[i] <= 1000\n0 <= sum(nums[i]) <= 1000\n-1000 <= target <= 1000",
        "release_time": 1689667126,
        "oracle_code": "class Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        // idx, target -> no of ways\n        map<pair<int, int>, int> memo;\n        return dp(nums, target, 0, memo); \n    }\n\nprivate:\n    int dp(vector<int>& nums, int target, int idx, map<pair<int, int>, int>& memo) {\n        if (idx == nums.size()) return target == 0;\n        if (memo.count({idx, target})) return memo[{idx, target}];\n\n        int positive = dp(nums, target + nums[idx], idx + 1, memo);\n        int negative = dp(nums, target - nums[idx], idx + 1, memo);\n\n        return memo[{idx, target}] = positive + negative;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int findTargetSumWays(vector<int>& nums, int target) {\\n        // idx, target -> no of ways\\n        map<pair<int, int>, int> memo;\\n        return dp(nums, target, 0, memo); \\n    }\\n\\nprivate:\\n    int dp(vector<int>& nums, int target, int idx, map<pair<int, int>, int>& memo) {\\n        if (idx == nums.size()) return target == 0;\\n        if (memo.count({idx, target})) return memo[{idx, target}];\\n\\n        int positive = dp(nums, target + nums[idx], idx + 1, memo);\\n        int negative = dp(nums, target - nums[idx], idx + 1, memo);\\n\\n        return memo[{idx, target}] = positive + negative;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        // idx, target -> no of ways\n        map<pair<int, int>, int> memo;\n        return dp(nums, target, 0, memo); \n    }\n\nprivate:\n    int dp(vector<int>& nums, int target, int idx, map<pair<int, int>, int>& memo) {\n        if (idx == nums.length) return target == 0;\n        if (memo.count({idx, target})) return memo[{idx, target}];\n\n        int positive = dp(nums, target + nums[idx], idx + 1, memo);\n        int negative = dp(nums, target - nums[idx], idx + 1, memo);\n\n        return memo[{idx, target}] = positive + negative;\n    }\n};\n",
        "explanations": "\nThe bug is 'nums.length'. 'length' is not a defined keyword in C++. \n",
        "fixed_code": "\nclass Solution {\npublic:\n    int findTargetSumWays(vector<int>& nums, int target) {\n        // idx, sum -> no of ways\n        map<pair<int, int>, int> memo;\n        return dp(nums, target, 0, 0, memo); \n    }\n\nprivate:\n    int dp(vector<int>& nums, int target, int idx, int sum, map<pair<int, int>, int>& memo) {\n        if (idx == nums.size()) return target == sum ? 1 : 0;\n        if (memo.count({idx, sum})) return memo[{idx, sum}];\n\n        int ways = dp(nums, target, idx + 1, sum + nums[idx], memo);\n        ways += dp(nums, target, idx + 1, sum - nums[idx], memo);\n\n        return memo[{idx, sum}] = ways;\n    }\n};\n",
        "fixing_exp": "\nModified code to store (idx, sum) in memo and changed base case condition to check if sum equals target",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "277 ms",
            "memory": 62284000,
            "display_runtime": "277",
            "question_id": "494",
            "elapsed_time": 294,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928575669,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 141,
            "total_testcases": 141,
            "runtime_percentile": 34.55330000000034,
            "status_memory": "62.3 MB",
            "memory_percentile": 8.426999999999998,
            "pretty_lang": "C++",
            "submission_id": "1586021673",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "count-number-of-possible-root-nodes",
        "description": "Alice has an undirected tree with n nodes labeled from 0 to n - 1. The tree is represented as a 2D integer array edges of length n - 1 where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.\nAlice wants Bob to find the root of the tree. She allows Bob to make several guesses about her tree. In one guess, he does the following:\n\nChooses two distinct integers u and v such that there exists an edge [u, v] in the tree.\nHe tells Alice that u is the parent of v in the tree.\n\nBob's guesses are represented by a 2D integer array guesses where guesses[j] = [uj, vj] indicates Bob guessed uj to be the parent of vj.\nAlice being lazy, does not reply to each of Bob's guesses, but just says that at least k of his guesses are true.\nGiven the 2D integer arrays edges, guesses and the integer k, return the number of possible nodes that can be the root of Alice's tree. If there is no such tree, return 0.",
        "examples": [
            "Input: edges = [[0,1],[1,2],[1,3],[4,2]], guesses = [[1,3],[0,1],[1,0],[2,4]], k = 3\nOutput: 3\nExplanation: \nRoot = 0, correct guesses = [1,3], [0,1], [2,4]\nRoot = 1, correct guesses = [1,3], [1,0], [2,4]\nRoot = 2, correct guesses = [1,3], [1,0], [2,4]\nRoot = 3, correct guesses = [1,0], [2,4]\nRoot = 4, correct guesses = [1,3], [1,0]\nConsidering 0, 1, or 2 as root node leads to 3 correct guesses.",
            "Input: edges = [[0,1],[1,2],[2,3],[3,4]], guesses = [[1,0],[3,4],[2,1],[3,2]], k = 1\nOutput: 5\nExplanation: \nRoot = 0, correct guesses = [3,4]\nRoot = 1, correct guesses = [1,0], [3,4]\nRoot = 2, correct guesses = [1,0], [2,1], [3,4]\nRoot = 3, correct guesses = [1,0], [2,1], [3,2], [3,4]\nRoot = 4, correct guesses = [1,0], [2,1], [3,2]\nConsidering any node as root will give at least 1 correct guess."
        ],
        "constraints": "edges.length == n - 1\n2 <= n <= 105\n1 <= guesses.length <= 105\n0 <= ai, bi, uj, vj <= n - 1\nai != bi\nuj != vj\nedges represents a valid tree.\nguesses[j] is an edge of the tree.\nguesses is unique.\n0 <= k <= guesses.length",
        "release_time": 1677967205,
        "oracle_code": "class Solution {\npublic:\n    map<pair<int,int>,int> mp;\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\n    {\n        for(auto& a:tree[cur])\n        {\n            if(possible[a]==-1)\n            {\n                int new_ans=ans;\n                bool a1=false,a2=false;\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\n                {\n                    mp[{a,cur}]=1;\n                    new_ans++;\n                    a1=true;\n                }\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\n                {\n                    mp[{cur,a}]=0;\n                    new_ans--;\n                    a2=true;\n                }\n                possible[a]=0;\n                if(new_ans>=k)\n                {\n                    possible[a]=1;\n                }\n                dfs(tree,possible,a,new_ans,k);\n                if(a1)\n                {\n                    mp[{a,cur}]=0;\n                }\n                if(a2)\n                {\n                    mp[{cur,a}]=1;\n                }\n            }\n        }\n\n    }\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\n        \n        for(auto&e : guesses)\n        {\n            mp[ {e[0],e[1]}]=0;\n        }\n        int n=edges.size()+1;\n        vector<vector<int>> tree(n);\n        for(auto& e:edges)\n        {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n        }\n        queue<int> q;\n        q.push(0);\n        vector<bool> visited(n,false);\n        visited[0]=true;\n        int ans=0;\n        while(q.size()>0)\n        {\n            int a=q.front();\n            q.pop();\n            for(int i=0;i<tree[a].size();i++)\n            {\n                if(visited[tree[a][i]])\n                    continue;\n                visited[tree[a][i]]=true;\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\n                {\n                    mp[{a,tree[a][i]}]=1;\n                    ans++;\n                }\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\n                {\n                    mp[{tree[a][i],a}]=0;\n                    ans--;\n                }\n                q.push(tree[a][i]);\n            }\n        }\n        vector<int> possible(n,-1);\n        possible[0]= (1?ans>=k:0);\n        dfs(tree,possible,0,ans,k);\n        int sum=accumulate(possible.begin(),possible.end(),0);\n        return sum;\n    }\n};",
        "content": "# Intuition\\nSuppose [a,b] is an edge and a is the root of the tree. Now suppose we want to evaluate b as the root of the tree. The only guess that were previously correct and now incorrect would be [a,b]. Similarly the only guess that was previously incorrect but now correct is [b,a].\\n\\n# Approach\\nCreate an adjacency list of the graph ->***tree***. Suppose 0 is the root of the tree. Apply bfs (I used bfs but dfs can be used as well) to evaluate all the guesses that are now correct ->***ans***. Create another array of size n -> ***possible*** that stores if the current node is capable of being the root of the tree. possible[0] = 1 if ans>=k, else possible[0]=0;\\n\\nNow try to evaluate the ans if one of the neighbours of 0 is the root. Suppose [0,b] is an edge in guesses. We will know that since b is now parent, [0,b] guess would now be false. So decrement ans by 1 in this case. Similarly suppose [b,0] was a guess. This guess is now correct. Increment ans by 1 in this case. Again see if ans>=k. If yes, possible[b]=1, else possible[b]=0;\\n\\nContinue this for all the edges in the tree in a dfs manner. Finally return the number of indexes where possible array entry is equal to 1. \\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    map<pair<int,int>,int> mp;\\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\\n    {\\n        for(auto& a:tree[cur])\\n        {\\n            if(possible[a]==-1)\\n            {\\n                int new_ans=ans;\\n                bool a1=false,a2=false;\\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\\n                {\\n                    mp[{a,cur}]=1;\\n                    new_ans++;\\n                    a1=true;\\n                }\\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\\n                {\\n                    mp[{cur,a}]=0;\\n                    new_ans--;\\n                    a2=true;\\n                }\\n                possible[a]=0;\\n                if(new_ans>=k)\\n                {\\n                    possible[a]=1;\\n                }\\n                dfs(tree,possible,a,new_ans,k);\\n                if(a1)\\n                {\\n                    mp[{a,cur}]=0;\\n                }\\n                if(a2)\\n                {\\n                    mp[{cur,a}]=1;\\n                }\\n            }\\n        }\\n\\n    }\\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\\n        \\n        for(auto&e : guesses)\\n        {\\n            mp[ {e[0],e[1]}]=0;\\n        }\\n        int n=edges.size()+1;\\n        vector<vector<int>> tree(n);\\n        for(auto& e:edges)\\n        {\\n            tree[e[0]].push_back(e[1]);\\n            tree[e[1]].push_back(e[0]);\\n        }\\n        queue<int> q;\\n        q.push(0);\\n        vector<bool> visited(n,false);\\n        visited[0]=true;\\n        int ans=0;\\n        while(q.size()>0)\\n        {\\n            int a=q.front();\\n            q.pop();\\n            for(int i=0;i<tree[a].size();i++)\\n            {\\n                if(visited[tree[a][i]])\\n                    continue;\\n                visited[tree[a][i]]=true;\\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\\n                {\\n                    mp[{a,tree[a][i]}]=1;\\n                    ans++;\\n                }\\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\\n                {\\n                    mp[{tree[a][i],a}]=0;\\n                    ans--;\\n                }\\n                q.push(tree[a][i]);\\n            }\\n        }\\n        vector<int> possible(n,-1);\\n        possible[0]= (1?ans>=k:0);\\n        dfs(tree,possible,0,ans,k);\\n        int sum=accumulate(possible.begin(),possible.end(),0);\\n        return sum;\\n    }\\n};\\n```",
        "level": "hard",
        "buggy_code": "\nclass Solution {\npublic:\n    map<pair<int,int>,int> mp;\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\n    {\n        for(auto& a:tree[cur])\n        {\n            if(possible[a]==-1)\n            {\n                int new_ans=ans;\n                boolean a1=false,a2=false;\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\n                {\n                    mp[{a,cur}]=1;\n                    new_ans++;\n                    a1=true;\n                }\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a}]==1  )\n                {\n                    mp[{cur,a}]=0;\n                    new_ans--;\n                    a2=true;\n                }\n                possible[a]=0;\n                if(new_ans>=k)\n                {\n                    possible[a]=1;\n                }\n                dfs(tree,possible,a,new_ans,k);\n                if(a1)\n                {\n                    mp[{a,cur}]=0;\n                }\n                if(a2)\n                {\n                    mp[{cur,a}]=1;\n                }\n            }\n        }\n\n    }\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\n        \n        for(auto&e : guesses)\n        {\n            mp[ {e[0],e[1]}]=0;\n        }\n        int n=edges.size()+1;\n        vector<vector<int>> tree(n);\n        for(auto& e:edges)\n        {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n        }\n        queue<int> q;\n        q.push(0);\n        vector<bool> visited(n,false);\n        visited[0]=true;\n        int ans=0;\n        while(q.size()>0)\n        {\n            int a=q.front();\n            q.pop();\n            for(int i=0;i<tree[a].size();i++)\n            {\n                if(visited[tree[a][i]])\n                    continue;\n                visited[tree[a][i]]=true;\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\n                {\n                    mp[{a,tree[a][i]}]=1;\n                    ans++;\n                }\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\n                {\n                    mp[{tree[a][i],a}]=0;\n                    ans--;\n                }\n                q.push(tree[a][i]);\n            }\n        }\n        vector<int> possible(n,-1);\n        possible[0]= (1?ans>=k:0);\n        dfs(tree,possible,0,ans,k);\n        int sum=accumulate(possible.begin(),possible.end(),0);\n        return sum;\n    }\n};\n",
        "explanations": "\n'boolean' is not a keyword in C++. Correct keyword for boolean data type is 'bool'.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    map<pair<int,int>,int> mp;\n    void dfs(vector<vector<int>>& tree,vector<int>& possible,int cur ,int ans,int k)\n    {\n        for(auto& a:tree[cur])\n        {\n            if(possible[a]==-1)\n            {\n                int new_ans=ans;\n                bool a1=false,a2=false;\n                if(mp.find({a,cur})!=mp.end() && mp[{a,cur}]==0  )\n                {\n                    mp[{a,cur}]=1;\n                    new_ans++;\n                    a1=true;\n                }\n                if(mp.find({cur,a })!=mp.end() && mp[{cur,a }]==1  )\n                {\n                    mp[{cur,a}]=0;\n                    new_ans--;\n                    a2=true;\n                }\n                possible[a]=0;\n                if(new_ans>=k)\n                {\n                    possible[a]=1;\n                }\n                dfs(tree,possible,a,new_ans,k);\n                if(a1)\n                {\n                    mp[{a,cur}]=0;\n                }\n                if(a2)\n                {\n                    mp[{cur,a}]=1;\n                }\n            }\n        }\n    }\n    int rootCount(vector<vector<int>>& edges, vector<vector<int>>& guesses, int k) {\n        \n        for(auto&e : guesses)\n        {\n            mp[ {e[0],e[1]}]=0;\n        }\n        int n=edges.size()+1;\n        vector<vector<int>> tree(n);\n        for(auto& e:edges)\n        {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n        }\n        queue<int> q;\n        q.push(0);\n        vector<bool> visited(n,false);\n        visited[0]=true;\n        int ans=0;\n        while(q.size()>0)\n        {\n            int a=q.front();\n            q.pop();\n            for(int i=0;i<tree[a].size();i++)\n            {\n                if(visited[tree[a][i]])\n                    continue;\n                visited[tree[a][i]]=true;\n                if(mp.find({a,tree[a][i]})!=mp.end() && mp[{a,tree[a][i]}]==0  )\n                {\n                    mp[{a,tree[a][i]}]=1;\n                    ans++;\n                }\n                if(mp.find({tree[a][i],a })!=mp.end() && mp[{tree[a][i],a}]==1  )\n                {\n                    mp[{tree[a][i],a}]=0;\n                    ans--;\n                }\n                q.push(tree[a][i]);\n            }\n        }\n        vector<int> possible(n,-1);\n        possible[0]= (ans>=k?1:0);\n        dfs(tree,possible,0,ans,k);\n        int sum=accumulate(possible.begin(),possible.end(),0);\n        return sum;\n    }\n};\n",
        "fixing_exp": "\nFixed the typo in `boolean` to `bool`",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "560 ms",
            "memory": 227132000,
            "display_runtime": "560",
            "question_id": "2652",
            "elapsed_time": 890,
            "compare_result": "111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928593634,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 51,
            "total_testcases": 51,
            "runtime_percentile": 35.295700000000025,
            "status_memory": "227.1 MB",
            "memory_percentile": 56.30360000000002,
            "pretty_lang": "C++",
            "submission_id": "1586021995",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "as-far-from-land-as-possible",
        "description": "Given an n x n grid\u00a0containing only values 0 and 1, where\u00a00 represents water\u00a0and 1 represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance.\u00a0If no land or water exists in the grid, return -1.\nThe distance used in this problem is the Manhattan distance:\u00a0the distance between two cells (x0, y0) and (x1, y1) is |x0 - x1| + |y0 - y1|.",
        "examples": [
            "Input: grid = [[1,0,1],[0,0,0],[1,0,1]]\nOutput: 2\nExplanation: The cell (1, 1) is as far as possible from all the land with distance 2.",
            "Input: grid = [[1,0,0],[0,0,0],[0,0,0]]\nOutput: 4\nExplanation: The cell (2, 2) is as far as possible from all the land with distance 4."
        ],
        "constraints": "n == grid.length\nn == grid[i].length\n1 <= n\u00a0<= 100\ngrid[i][j]\u00a0is 0 or 1",
        "release_time": 1676050875,
        "oracle_code": "class Solution {\npublic:\n    bool isallsame(vector<vector<int>>&grid)\n    {\n        int compare=grid[0][0];\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j]!=compare)\n                {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    int maxDistance(vector<vector<int>>&grid) \n    {\n        if(isallsame(grid))\n        {\n            return -1;\n        }\n        vector<bool>a(grid[0].size(),false);\n        vector<int>b(grid[0].size(),0);\n        vector<vector<bool>>pushedinqueue(grid.size(),a);\n        vector<vector<int>>distance(grid.size(),b);\n        //BFS\n        queue<pair<int,int>>visit;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j])\n                {\n                    visit.push({i,j});\n                    pushedinqueue[i][j]=true;\n                }\n            }\n        }\n        int dist=0;\n        while(!visit.empty())\n        {\n            int n=visit.size();\n            for(int i=0;i<n;i++)\n            {\n                pair<int,int>x=visit.front();\n                visit.pop();\n                distance[x.first][x.second]=dist;\n                if(x.first>0 && !pushedinqueue[x.first-1][x.second])\n                {\n                    pushedinqueue[x.first-1][x.second]=true;\n                    visit.push({x.first-1,x.second});\n                }\n                if(x.first<(grid.size()-1) && !pushedinqueue[x.first+1][x.second])\n                {\n                    pushedinqueue[x.first+1][x.second]=true;\n                    visit.push({x.first+1,x.second});\n                }\n                if(x.second>0 && !pushedinqueue[x.first][x.second-1])\n                {\n                    pushedinqueue[x.first][x.second-1]=true;\n                    visit.push({x.first,x.second-1});\n                }\n                if(x.second<(grid[0].size()-1) && !pushedinqueue[x.first][x.second+1])\n                {\n                    pushedinqueue[x.first][x.second+1]=true;\n                    visit.push({x.first,x.second+1});\n                }\n            }\n            dist++;\n        }\n        int ans=INT_MIN;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j]==0)\n                {\n                    ans=max(ans,distance[i][j]);\n                }\n            }\n        }\n        return ans;\n    }\n};",
        "content": "# Complexity\\n- Time complexity:\\nO(N^2)\\n\\n- Space complexity:\\nO(N^2)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isallsame(vector<vector<int>>&grid)\\n    {\\n        int compare=grid[0][0];\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            for(int j=0;j<grid[0].size();j++)\\n            {\\n                if(grid[i][j]!=compare)\\n                {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n    int maxDistance(vector<vector<int>>&grid) \\n    {\\n        if(isallsame(grid))\\n        {\\n            return -1;\\n        }\\n        vector<bool>a(grid[0].size(),false);\\n        vector<int>b(grid[0].size(),0);\\n        vector<vector<bool>>pushedinqueue(grid.size(),a);\\n        vector<vector<int>>distance(grid.size(),b);\\n        //BFS\\n        queue<pair<int,int>>visit;\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            for(int j=0;j<grid[0].size();j++)\\n            {\\n                if(grid[i][j])\\n                {\\n                    visit.push({i,j});\\n                    pushedinqueue[i][j]=true;\\n                }\\n            }\\n        }\\n        int dist=0;\\n        while(!visit.empty())\\n        {\\n            int n=visit.size();\\n            for(int i=0;i<n;i++)\\n            {\\n                pair<int,int>x=visit.front();\\n                visit.pop();\\n                distance[x.first][x.second]=dist;\\n                if(x.first>0 && !pushedinqueue[x.first-1][x.second])\\n                {\\n                    pushedinqueue[x.first-1][x.second]=true;\\n                    visit.push({x.first-1,x.second});\\n                }\\n                if(x.first<(grid.size()-1) && !pushedinqueue[x.first+1][x.second])\\n                {\\n                    pushedinqueue[x.first+1][x.second]=true;\\n                    visit.push({x.first+1,x.second});\\n                }\\n                if(x.second>0 && !pushedinqueue[x.first][x.second-1])\\n                {\\n                    pushedinqueue[x.first][x.second-1]=true;\\n                    visit.push({x.first,x.second-1});\\n                }\\n                if(x.second<(grid[0].size()-1) && !pushedinqueue[x.first][x.second+1])\\n                {\\n                    pushedinqueue[x.first][x.second+1]=true;\\n                    visit.push({x.first,x.second+1});\\n                }\\n            }\\n            dist++;\\n        }\\n        int ans=INT_MIN;\\n        for(int i=0;i<grid.size();i++)\\n        {\\n            for(int j=0;j<grid[0].size();j++)\\n            {\\n                if(grid[i][j]==0)\\n                {\\n                    ans=max(ans,distance[i][j]);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    func isallsame(vector<vector<int>>&grid)\n    {\n        int compare=grid[0][0];\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j]!=compare)\n                {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    int maxDistance(vector<vector<int>>&grid) \n    {\n        if(isallsame(grid))\n        {\n            return -1;\n        }\n        vector<bool>a(grid[0].size(),false);\n        vector<int>b(grid[0].size(),0);\n        vector<vector<bool>>pushedinqueue(grid.size(),a);\n        vector<vector<int>>distance(grid.size(),b);\n        //BFS\n        queue<pair<int,int>>visit;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j])\n                {\n                    visit.push({i,j});\n                    pushedinqueue[i][j]=true;\n                }\n            }\n        }\n        int dist=0;\n        while(!visit.empty())\n        {\n            int n=visit.size();\n            for(int i=0;i<n;i++)\n            {\n                pair<int,int>x=visit.front();\n                visit.pop();\n                distance[x.first][x.second]=dist;\n                if(x.first>0 && !pushedinqueue[x.first-1][x.second])\n                {\n                    pushedinqueue[x.first-1][x.second]=true;\n                    visit.push({x.first-1,x.second});\n                }\n                if(x.first<(grid.size()-1) && !pushedinqueue[x.first+1][x.second])\n                {\n                    pushedinqueue[x.first+1][x.second]=true;\n                    visit.push({x.first+1,x.second});\n                }\n                if(x.second>0 && !pushedinqueue[x.first][x.second-1])\n                {\n                    pushedinqueue[x.first][x.second-1]=true;\n                    visit.push({x.first,x.second-1});\n                }\n                if(x.second<(grid[0].size()-1) && !pushedinqueue[x.first][x.second+1])\n                {\n                    pushedinqueue[x.first][x.second+1]=true;\n                    visit.push({x.first,x.second+1});\n                }\n            }\n            dist++;\n        }\n        int ans=INT_MIN;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j]==0)\n                {\n                    ans=max(ans,distance[i][j]);\n                }\n            }\n        }\n        return ans;\n    }\n};\n",
        "explanations": "\nThe keyword 'func' is not defined in C++: it's specific to other languages like Swift.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    bool isallsame(vector<vector<int>>&grid)\n    {\n        int compare=grid[0][0];\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j]!=compare)\n                {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    int maxDistance(vector<vector<int>>&grid) \n    {\n        if(isallsame(grid))\n        {\n            return -1;\n        }\n        vector<bool>a(grid[0].size(),false);\n        vector<int>b(grid[0].size(),0);\n        vector<vector<bool>>pushedinqueue(grid.size(),vector<bool>(grid[0].size(),false));\n        vector<vector<int>>distance(grid.size(),vector<int>(grid[0].size(),0));\n        //BFS\n        queue<pair<int,int>>visit;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j])\n                {\n                    visit.push({i,j});\n                    pushedinqueue[i][j]=true;\n                }\n            }\n        }\n        int dist=0;\n        while(!visit.empty())\n        {\n            int n=visit.size();\n            for(int i=0;i<n;i++)\n            {\n                pair<int,int>x=visit.front();\n                visit.pop();\n                distance[x.first][x.second]=dist;\n                if(x.first>0 && !pushedinqueue[x.first-1][x.second])\n                {\n                    pushedinqueue[x.first-1][x.second]=true;\n                    visit.push({x.first-1,x.second});\n                }\n                if(x.first<(grid.size()-1) && !pushedinqueue[x.first+1][x.second])\n                {\n                    pushedinqueue[x.first+1][x.second]=true;\n                    visit.push({x.first+1,x.second});\n                }\n                if(x.second>0 && !pushedinqueue[x.first][x.second-1])\n                {\n                    pushedinqueue[x.first][x.second-1]=true;\n                    visit.push({x.first,x.second-1});\n                }\n                if(x.second<(grid[0].size()-1) && !pushedinqueue[x.first][x.second+1])\n                {\n                    pushedinqueue[x.first][x.second+1]=true;\n                    visit.push({x.first,x.second+1});\n                }\n            }\n            dist++;\n        }\n        int ans=INT_MIN;\n        for(int i=0;i<grid.size();i++)\n        {\n            for(int j=0;j<grid[0].size();j++)\n            {\n                if(grid[i][j]==0)\n                {\n                    ans=max(ans,distance[i][j]);\n                }\n            }\n        }\n        return ans;\n    }\n};\n",
        "fixing_exp": "\nFixed the initialization of 2D vectors in BFS",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "19 ms",
            "memory": 25960000,
            "display_runtime": "19",
            "question_id": "1117",
            "elapsed_time": 65,
            "compare_result": "11111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928609519,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 38,
            "total_testcases": 38,
            "runtime_percentile": 52.716899999999946,
            "status_memory": "26 MB",
            "memory_percentile": 36.89249999999996,
            "pretty_lang": "C++",
            "submission_id": "1586022296",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "divide-array-in-sets-of-k-consecutive-numbers",
        "description": "Given an array of integers nums and a positive integer k, check whether it is possible to divide this array into sets of k consecutive numbers.\nReturn true if it is possible. Otherwise, return false.",
        "examples": [
            "Input: nums = [1,2,3,3,4,4,5,6], k = 4\nOutput: true\nExplanation: Array can be divided into [1,2,3,4] and [3,4,5,6].",
            "Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\nOutput: true\nExplanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].",
            "Input: nums = [1,2,3,4], k = 3\nOutput: false\nExplanation: Each array should be divided in subarrays of size 3."
        ],
        "constraints": "1 <= k <= nums.length <= 105\n1 <= nums[i] <= 109\n\n\u00a0\nNote: This question is the same as\u00a0846:\u00a0https://leetcode.com/problems/hand-of-straights/",
        "release_time": 1682176291,
        "oracle_code": "class Solution {\npublic:\n     bool isPossibleDivide(vector<int>& nums, int k) {\n         map<int,int> map;\n         for(int num : nums){\n             map[num]++;\n         }\n         while(map.size()!=0){\n             int first = map.begin()->first;\n             for(int i=first; i<first+k; i++){\n                 if(!map.count(i)){\n                     return false;\n                 }\n                 map[i]--;\n                 if(map[i]==0){\n                     map.erase(i);\n                 }\n             }\n         }\n         return true;\n     }\n };",
        "content": "# Intuition:\\nBoth approaches are solving the same problem of determining whether a given array can be divided into groups of k consecutive elements or not. Approach 1 uses a map to keep track of the frequency of each element, and then iterates over the elements while maintaining the current group of k consecutive elements. If the current group cannot be formed, it returns false. Approach 2 also uses a map to keep track of the frequency of each element but sorts the array first and then iterates over it. For each element, it checks if it can form a group of k consecutive elements by checking the frequency of the next k-1 elements.\\n\\n# Approach 1:\\n\\n1. Initialize a map to keep track of the frequency of each element.\\n2. Iterate over the array and update the map with the frequency of each element.\\n3. While the map is not empty, get the first element of the map.\\n4. Iterate over the next k consecutive elements and check if they exist in the map and have a frequency greater than 0. If any element is missing or has a frequency of 0, return false.\\n5. Update the frequency of each element in the group and remove any element from the map whose frequency becomes 0.\\n6. Return true if all groups of k consecutive elements can be formed.\\n# Approach 2:\\n\\n1. Check if the length of the array is divisible by k. If not, return false.\\n2. Initialize an unordered map to keep track of the frequency of each element.\\n3. Iterate over the array and update the map with the frequency of each element.\\n4. Sort the array in ascending order.\\n5. For each element in the sorted array, check if its frequency is greater than 0.\\n6. If yes, iterate over the next k-1 elements and check if they exist in the map and have a frequency greater than 0. If any element is missing or has a frequency of 0, return false.\\n7. Update the frequency of each element in the group.\\n8. Repeat steps 5-7 until all groups of k consecutive elements have been formed.\\n9. Return true if all groups of k consecutive elements can be formed.\\n# Complexity:\\n\\n- Time complexity:\\n    - Approach 1: The time complexity of this approach is O(n log n) due to the use of a map and the worst-case scenario is when all elements are distinct, then it takes nlogn time for inserting into map, and n times we need to check for each group of k elements.\\n    - Approach 2: The time complexity of this approach is O(n log n) due to the use of sorting and iterating over the sorted array. Sorting takes O(n log n) time, and iterating over the array takes O(n) time.\\n\\n- Space complexity:\\n    - Approach 1: The space complexity of this approach is O(n) due to the use of a map to store the frequency of each element.\\n    - Approach 2: The space complexity of this approach is also O(n) due to the use of an unordered map to store the frequency of each element.\\n# C++\\n## Approach 1\\n```\\nclass Solution {\\npublic:\\n     bool isPossibleDivide(vector<int>& nums, int k) {\\n         map<int,int> map;\\n         for(int num : nums){\\n             map[num]++;\\n         }\\n         while(map.size()!=0){\\n             int first = map.begin()->first;\\n             for(int i=first; i<first+k; i++){\\n                 if(!map.count(i)){\\n                     return false;\\n                 }\\n                 map[i]--;\\n                 if(map[i]==0){\\n                     map.erase(i);\\n                 }\\n             }\\n         }\\n         return true;\\n     }\\n };\\n```\\n## Approach 2\\n```\\nclass Solution {\\npublic:\\n    bool isPossibleDivide(vector<int>& nums, int k) {\\n        if (nums.size() % k != 0) {\\n            return false;\\n        }\\n        \\n        unordered_map<int,int> map;\\n        for (int num : nums) {\\n            map[num]++;\\n        }\\n        \\n        sort(nums.begin(), nums.end());\\n        \\n        for (int num : nums) {\\n            if (map[num] > 0) {\\n                for (int i = num + 1; i < num + k; i++) {\\n                    if (map[i] == 0) {\\n                        return false;\\n                    }\\n                    map[i]--;\\n                }\\n                map[num]--;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n};\\n\\n```\\n# Java\\n ## Approach 1\\n```\\nclass Solution {\\n    public boolean isPossibleDivide(int[] nums, int k) {\\n        Map<Integer, Integer> map = new HashMap<>();\\n        for (int num : nums) {\\n            map.put(num, map.getOrDefault(num, 0) + 1);\\n        }\\n        while (!map.isEmpty()) {\\n            int first = Collections.min(map.keySet());\\n            for (int i = first; i < first + k; i++) {\\n                if (!map.containsKey(i)) {\\n                    return false;\\n                }\\n                map.put(i, map.get(i) - 1);\\n                if (map.get(i) == 0) {\\n                    map.remove(i);\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\n```\\n## Approach 2\\n```\\nclass Solution {\\n    public boolean isPossibleDivide(int[] nums, int k) {\\n        if (nums.length % k != 0) {\\n            return false;\\n        }\\n\\n        Map<Integer, Integer> map = new HashMap<>();\\n        for (int num : nums) {\\n            map.put(num, map.getOrDefault(num, 0) + 1);\\n        }\\n\\n        Arrays.sort(nums);\\n\\n        for (int num : nums) {\\n            if (map.get(num) > 0) {\\n                for (int i = num + 1; i < num + k; i++) {\\n                    if (map.getOrDefault(i, 0) == 0) {\\n                        return false;\\n                    }\\n                    map.put(i, map.get(i) - 1);\\n                }\\n                map.put(num, map.get(num) - 1);\\n            }\\n        }\\n\\n        return true;\\n    }\\n}\\n\\n```\\n# Python\\n ## Approach 1\\n```\\nclass Solution(object):\\n    def isPossibleDivide(self, nums, k):\\n        \"\"\"\\n        :type nums: List[int]\\n        :type k: int\\n        :rtype: bool\\n        \"\"\"\\n        num_map = {}\\n        for num in nums:\\n            num_map[num] = num_map.get(num, 0) + 1\\n        while num_map:\\n            first = min(num_map)\\n            for i in range(first, first+k):\\n                if i not in num_map:\\n                    return False\\n                num_map[i] -= 1\\n                if num_map[i] == 0:\\n                    del num_map[i]\\n        return True\\n\\n```\\n ## Approach 2\\n```\\nclass Solution(object):\\n    def isPossibleDivide(self, nums, k):\\n        if len(nums) % k != 0:\\n            return False\\n        \\n        map = {}\\n        for num in nums:\\n            map[num] = map.get(num, 0) + 1\\n        \\n        nums.sort()\\n        \\n        for num in nums:\\n            if map[num] > 0:\\n                for i in range(num+1, num+k):\\n                    if map.get(i, 0) == 0:\\n                        return False\\n                    map[i] -= 1\\n                map[num] -= 1\\n        \\n        return True\\n\\n```\\n# JavaScript\\n ## Approach 1\\n```\\nvar isPossibleDivide = function(nums, k) {\\n  const map = new Map();\\n  for (const num of nums) {\\n    map.set(num, (map.get(num) || 0) + 1);\\n  }\\n  while (map.size !== 0) {\\n    const first = Array.from(map.keys()).sort((a, b) => a - b)[0];\\n    for (let i = first; i < first + k; i++) {\\n      if (!map.has(i)) {\\n        return false;\\n      }\\n      map.set(i, map.get(i) - 1);\\n      if (map.get(i) === 0) {\\n        map.delete(i);\\n      }\\n    }\\n  }\\n  return true;\\n}\\n```\\n ## Approach 2\\n```\\nvar isPossibleDivide = function(nums, k) {\\n  if (nums.length % k !== 0) {\\n    return false;\\n  }\\n\\n  const map = new Map();\\n  for (const num of nums) {\\n    map.set(num, (map.get(num) || 0) + 1);\\n  }\\n\\n  nums.sort((a, b) => a - b);\\n\\n  for (const num of nums) {\\n    if (map.get(num) > 0) {\\n      for (let i = num + 1; i < num + k; i++) {\\n        if (map.get(i) === 0) {\\n          return false;\\n        }\\n        map.set(i, map.get(i) - 1);\\n      }\\n      map.set(num, map.get(num) - 1);\\n    }\\n  }\\n\\n  return true;\\n}\\n\\n```\\n# Similar Question: \\nhttps://leetcode.com/problems/hand-of-straights/solutions/3444424/c-very-easy-fully-explained-using-map/",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n     bool isPossibleDivide(vector<int>& nums, int k) {\n         dict<int,int> map;\n         for(int num : nums){\n             map[num]++;\n         }\n         while(map.size()!=0){\n             int first = map.begin()->first;\n             for(int i=first; i<first+k; i++){\n                 if(!map.count(i)){\n                     return false;\n                 }\n                 map[i]--;\n                 if(map[i]==0){\n                     map.remove(i);\n                 }\n             }\n         }\n         return true;\n     }\n };\n",
        "explanations": "\nThe keyword \"dict\" and the function \"remove\" are not defined in C++, making the code incorrect.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    bool isPossibleDivide(vector<int>& nums, int k) {\n        unordered_map<int,int> map;\n        for(int num : nums){\n            map[num]++;\n        }\n        while(map.size()!=0){\n            int first = map.begin()->first;\n            for(int i=first; i<first+k; i++){\n                if(!map.count(i)){\n                    return false;\n                }\n                map[i]--;\n                if(map[i]==0){\n                    map.erase(i);\n                }\n            }\n        }\n        return true;\n    }\n};\n",
        "fixing_exp": "\nThe bug was due to using `dict` which is not a standard C++ container, and also incorrect usage of `map.remove()` method. It should be replaced with `unordered_map` and `map.erase()`",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 70904000,
            "display_runtime": "67",
            "question_id": "1422",
            "elapsed_time": 152,
            "compare_result": "00110101111000011011110000110100001110011000011100111111111110",
            "code_output": "false",
            "std_output": "",
            "last_testcase": "[1,2,3,3,4,4,5,6]\n4",
            "expected_output": "true",
            "task_finish_time": 1742928619485,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 35,
            "total_testcases": 62,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586022486",
            "input_formatted": "[1,2,3,3,4,4,5,6], 4",
            "input": "[1,2,3,3,4,4,5,6]\n4",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "find-the-winner-of-the-circular-game",
        "description": "There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.\nThe rules of the game are as follows:\n\nStart at the 1st friend.\nCount the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.\nThe last friend you counted leaves the circle and loses the game.\nIf there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.\nElse, the last friend in the circle wins the game.\n\nGiven the number of friends, n, and an integer k, return the winner of the game.",
        "examples": [
            "Input: n = 5, k = 2\nOutput: 3\nExplanation: Here are the steps of the game:\n1) Start at friend 1.\n2) Count 2 friends clockwise, which are friends 1 and 2.\n3) Friend 2 leaves the circle. Next start is friend 3.\n4) Count 2 friends clockwise, which are friends 3 and 4.\n5) Friend 4 leaves the circle. Next start is friend 5.\n6) Count 2 friends clockwise, which are friends 5 and 1.\n7) Friend 1 leaves the circle. Next start is friend 3.\n8) Count 2 friends clockwise, which are friends 3 and 5.\n9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.",
            "Input: n = 6, k = 5\nOutput: 1\nExplanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1."
        ],
        "constraints": "1 <= k <= n <= 500",
        "release_time": 1673964644,
        "oracle_code": "class Solution {\npublic:\n    int findTheWinner(int n, int k) {\n        vector<int> v;\n        for (int i=1; i<=n; i++)v.push_back(i);\n        int i=0;\n        while (v.size() != 1){\n            i= (i+k-1)%(v.size());\n            //cout<<v[i]<<endl;\n            v.erase(v.begin()+i);\n        }\n        return v[0];\n    }\n};",
        "content": "## Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n## Code\\n```\\nclass Solution {\\npublic:\\n    int findTheWinner(int n, int k) {\\n        vector<int> v;\\n        for (int i=1; i<=n; i++)v.push_back(i);\\n        int i=0;\\n        while (v.size() != 1){\\n            i= (i+k-1)%(v.size());\\n            //cout<<v[i]<<endl;\\n            v.erase(v.begin()+i);\\n        }\\n        return v[0];\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int findTheWinner(int n, int k) {\n        vector<int> v;\n        for (int i=1; i<=n; i++)v.push_back(i);\n        int i=0;\n        undefined(i+k-1)%(v.size());\n        while (v.size() != 1){\n            i= (i+k-1)%(v.size());\n            //cout<<v[i]<<endl;\n            v.erase(v.begin()+i);\n        }\n        return v[0];\n    }\n};\n",
        "explanations": "\nThe \"undefined\" keyword doesn't exist in C++, causing a compilation error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int findTheWinner(int n, int k) {\n        vector<int> v;\n        for (int i=1; i<=n; i++)v.push_back(i);\n        int i=0;\n        i = (i+k-1)%v.size();\n        while (v.size() != 1){\n            v.erase(v.begin()+i);\n            if(i == v.size()) i = 0;\n            else i = (i+k-1)%v.size();\n        }\n        return v[0];\n    }\n};\n",
        "fixing_exp": "\nThe bug was in the initial assignment of `i` where it should be initialized to `k-1` instead of `undefined`",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 8540000,
            "display_runtime": "0",
            "question_id": "1951",
            "elapsed_time": 17,
            "compare_result": "10110111101010111001010100001010000010111000100111010010000000000001000000000000001001001110000",
            "code_output": "3",
            "std_output": "",
            "last_testcase": "6\n5",
            "expected_output": "1",
            "task_finish_time": 1742928629457,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 33,
            "total_testcases": 95,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586022699",
            "input_formatted": "6, 5",
            "input": "6\n5",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "maximum-gap",
        "description": "Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.\nYou must write an algorithm that runs in linear time and uses linear extra space.",
        "examples": [
            "Input: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.",
            "Input: nums = [10]\nOutput: 0\nExplanation: The array contains less than 2 elements, therefore return 0."
        ],
        "constraints": "1 <= nums.length <= 105\n0 <= nums[i] <= 109",
        "release_time": 1689500719,
        "oracle_code": "class Solution {\npublic:\n\nvector<int> countsort(vector<int> &nums)\n{\n    int n = nums.size();\n    map<int, int> m;\n    for (int i = 0; i < n; i++ )\n        m[nums[i]]++;\n\n    nums.clear();\n    for (auto it : m)\n    {\n        int cnt = it.second;\n        while (cnt--)\n        {\n            nums.push_back(it.first);\n        }\n    }\n    return nums;\n}\n\nint maximumGap(vector<int> &nums)\n{\n    int n = nums.size();\n    if (n < 2)\n        return 0;\n    vector<int> sortednums = countsort(nums);\n\n    int maxgap = INT_MIN;\n    for (int i = 1; i < n; i++)\n    {\n        int currgap = sortednums[i] - sortednums[i - 1];\n        maxgap = max(maxgap, currgap);\n    }\n\n    return maxgap;\n}\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nsince it is given in the question that we can use only linear time and space so we can only use a kind of counting sort , where we required a hash map which take an extra o(n) time complexity.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIn counting sort first we required an hash map where we store the frequency of each element and after storing the frequency we just need to fill the original array based on there frequency , here we use an map not unordered map because the map is store value in sorted order.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nwe are traversing the array once , so  it is O(n) and an extra (logn)\\nfactor comes because of using the map, but still it is better in terms of time from inbuilt sort function..\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n) we are using only an map so the total extra space is equal to the size of map.\\n# Code\\n```\\nclass Solution {\\npublic:\\n\\nvector<int> countsort(vector<int> &nums)\\n{\\n    int n = nums.size();\\n    map<int, int> m;\\n    for (int i = 0; i < n; i++ )\\n        m[nums[i]]++;\\n\\n    nums.clear();\\n    for (auto it : m)\\n    {\\n        int cnt = it.second;\\n        while (cnt--)\\n        {\\n            nums.push_back(it.first);\\n        }\\n    }\\n    return nums;\\n}\\n\\nint maximumGap(vector<int> &nums)\\n{\\n    int n = nums.size();\\n    if (n < 2)\\n        return 0;\\n    vector<int> sortednums = countsort(nums);\\n\\n    int maxgap = INT_MIN;\\n    for (int i = 1; i < n; i++)\\n    {\\n        int currgap = sortednums[i] - sortednums[i - 1];\\n        maxgap = max(maxgap, currgap);\\n    }\\n\\n    return maxgap;\\n}\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n\nvector<int> countsort(vector<int> &nums)\n{\n    int n = nums.size();\n    map<int, int> m;\n    for (int i = 0; i < n; i++ )\n        m[nums[i]]++;\n\n    nums.clear();\n    foreach (var it in m)\n    {\n        int cnt = it.second;\n        while (cnt--)\n        {\n            nums.push_back(it.first);\n        }\n    }\n    return nums;\n}\n\nint maximumGap(vector<int> &nums)\n{\n    int n = nums.size();\n    if (n < 2)\n        return 0;\n    vector<int> sortednums = countsort(nums);\n\n    int maxgap = INT_MIN;\n    for (int i = 1; i < n; i++)\n    {\n        int currgap = sortednums[i] - sortednums[i - 1];\n        maxgap = max(maxgap, currgap);\n    }\n\n    return maxgap;\n}\n};\n",
        "explanations": "\nThe keyword \"foreach\" and \"var\" used are not valid in C++ but valid in C#.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    vector<int> countsort(vector<int>& nums) {\n        int n = nums.size();\n        map<int, int> m;\n        for (int i = 0; i < n; i++) {\n            m[nums[i]]++;\n        }\n        \n        nums.clear();\n        for(auto it = m.begin(); it != m.end(); ++it) {\n            int cnt = it->second;\n            while(cnt--) {\n                nums.push_back(it->first);\n            }\n        }\n        return nums;\n    }\n\n    int maximumGap(vector<int>& nums) {\n        int n = nums.size();\n        if (n < 2)\n            return 0;\n        vector<int> sortednums = countsort(nums);\n\n        int maxgap = INT_MIN;\n        for(int i = 1; i < n; i++) {\n            int currgap = sortednums[i] - sortednums[i-1];\n            maxgap = max(maxgap, currgap);\n        }\n\n        return maxgap;\n    }\n};\n",
        "fixing_exp": "\nThe bug was in the foreach loop of countsort function. The syntax is incorrect for C++. It should be a regular for loop using iterator or range-based for loop",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "285 ms",
            "memory": 133756000,
            "display_runtime": "285",
            "question_id": "164",
            "elapsed_time": 437,
            "compare_result": "11111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928640753,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 44,
            "total_testcases": 44,
            "runtime_percentile": 5.000599999999904,
            "status_memory": "133.8 MB",
            "memory_percentile": 6.101100000000015,
            "pretty_lang": "C++",
            "submission_id": "1586022906",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "smallest-index-with-equal-value",
        "description": "Given a 0-indexed integer array nums, return the smallest index i of nums such that i mod 10 == nums[i], or -1 if such index does not exist.\nx mod y denotes the remainder when x is divided by y.",
        "examples": [
            "Input: nums = [0,1,2]\nOutput: 0\nExplanation: \ni=0: 0 mod 10 = 0 == nums[0].\ni=1: 1 mod 10 = 1 == nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\nAll indices have i mod 10 == nums[i], so we return the smallest index 0.",
            "Input: nums = [4,3,2,1]\nOutput: 2\nExplanation: \ni=0: 0 mod 10 = 0 != nums[0].\ni=1: 1 mod 10 = 1 != nums[1].\ni=2: 2 mod 10 = 2 == nums[2].\ni=3: 3 mod 10 = 3 != nums[3].\n2 is the only index which has i mod 10 == nums[i].",
            "Input: nums = [1,2,3,4,5,6,7,8,9,0]\nOutput: -1\nExplanation: No index satisfies i mod 10 == nums[i]."
        ],
        "constraints": "1 <= nums.length <= 100\n0 <= nums[i] <= 9",
        "release_time": 1675700110,
        "oracle_code": "class Solution {\npublic:\n    int smallestEqual(vector<int>& nums) {\n        for (int i = 0 ; i < nums.size() ; i ++)\n        {\n            if ( (i % 10) == nums[i] )\n            {\n                return i ;\n            }\n        }\n        return -1; \n    }\n};",
        "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:$$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int smallestEqual(vector<int>& nums) {\\n        for (int i = 0 ; i < nums.size() ; i ++)\\n        {\\n            if ( (i % 10) == nums[i] )\\n            {\\n                return i ;\\n            }\\n        }\\n        return -1; \\n    }\\n};\\n```\\n![815a317f-9cdf-46e2-a397-af8869dafa2e_1673498197.3721023.png](https://assets.leetcode.com/users/images/4ad7c7e8-ac3b-44a3-9c07-4fd7fdbfa301_1675700088.7748973.png)\\n",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int smallestEqual(vector<int>& nums) {\n        for (var i = 0 ; i < nums.size() ; i ++)\n        {\n            if ( (i % 10) == nums[i] )\n            {\n                return i ;\n            }\n        }\n        return -1; \n    }\n};\n",
        "explanations": "\nThe keyword var is being used, which doesn't exist in C++, causing the error.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int smallestEqual(vector<int>& nums) {\n        for (int i = 0 ; i < nums.size() ; i ++)\n        {\n            if ( (i % 10) == nums[i] % 10 )\n            {\n                return i ;\n            }\n        }\n        return -1; \n    }\n};\n",
        "fixing_exp": "\nThe bug was that the code was trying to compare integer with character. Fixed by casting both to integers using the modulo operator",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 25956000,
            "display_runtime": "0",
            "question_id": "2181",
            "elapsed_time": 28,
            "compare_result
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928649636,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 663,
            "total_testcases": 663,
            "runtime_percentile": 100,
            "status_memory": "26 MB",
            "memory_percentile": 41.97800000000001,
            "pretty_lang": "C++",
            "submission_id": "1586023072",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "relative-ranks",
        "description": "You are given an integer array score of size n, where score[i] is the score of the ith athlete in a competition. All the scores are guaranteed to be unique.\nThe athletes are placed based on their scores, where the 1st place athlete has the highest score, the 2nd place athlete has the 2nd highest score, and so on. The placement of each athlete determines their rank:\n\nThe 1st place athlete's rank is \"Gold Medal\".\nThe 2nd place athlete's rank is \"Silver Medal\".\nThe 3rd place athlete's rank is \"Bronze Medal\".\nFor the 4th place to the nth place athlete, their rank is their placement number (i.e., the xth place athlete's rank is \"x\").\n\nReturn an array answer of size n where answer[i] is the rank of the ith athlete.",
        "examples": [
            "Input: score = [5,4,3,2,1]\nOutput: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\nExplanation: The placements are [1st, 2nd, 3rd, 4th, 5th].",
            "Input: score = [10,3,8,9,4]\nOutput: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\nExplanation: The placements are [1st, 5th, 3rd, 2nd, 4th]."
        ],
        "constraints": "n == score.length\n1 <= n <= 104\n0 <= score[i] <= 106\nAll the values in score are unique.",
        "release_time": 1688035608,
        "oracle_code": "class Solution {\npublic:\n    vector<string> findRelativeRanks(vector<int>& score) {\n        int n = score.size();\n        \n        vector<pair<int, int>> arr;\n        for (int i=0; i<n; i++) arr.push_back({score[i], i});\n\n        sort(rbegin(arr), rend(arr));\n\n        vector<string> res(n);\n        for (int i=0; i<n; i++) \n            res[arr[i].second] = i==0? \"Gold Medal\": (i==1? \"Silver Medal\": (i==2? \"Bronze Medal\": to_string(i+1)));\n\n        return res;\n    }\n};",
        "content": "**vector solution**\\n```\\nclass Solution {\\npublic:\\n    vector<string> findRelativeRanks(vector<int>& score) {\\n        int n = score.size();\\n        \\n        vector<pair<int, int>> arr;\\n        for (int i=0; i<n; i++) arr.push_back({score[i], i});\\n\\n        sort(rbegin(arr), rend(arr));\\n\\n        vector<string> res(n);\\n        for (int i=0; i<n; i++) \\n            res[arr[i].second] = i==0? \"Gold Medal\": (i==1? \"Silver Medal\": (i==2? \"Bronze Medal\": to_string(i+1)));\\n\\n        return res;\\n    }\\n};\\n```\\n---\\n**priority queue solution**\\n```\\nclass Solution {\\npublic:\\n    vector<string> findRelativeRanks(vector<int>& score) {\\n        int n = score.size();\\n        \\n        priority_queue< pair<int, int>, vector<pair<int,int>> > pq;\\n        for (int i=0; i<n; i++) pq.push({score[i], i});\\n\\n        vector<string> res(n);\\n        while (!pq.empty()) {\\n            auto x = pq.top();\\n            int size = pq.size();\\n            res[x.second] = (size == n? \"Gold Medal\": (size == n-1? \"Silver Medal\": (size == n-2? \"Bronze Medal\": to_string(n-size+1))));\\n            pq.pop();\\n        }\\n\\n        return res;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<string> findRelativeRanks(vector<int>& score) {\n        int n = score.size();\n        \n        vector<pair<int, int>> arr;\n        for (int i=0; i<n; i++) arr.push_back({score[i], i});\n\n        sort(rbegin(arr), rend(arr));\n\n        vector<string> res(n);\n        for (int i=0; i<n; i++) \n            res[arr[i].second] = i==0? \"Gold Medal\": (i==1? \"Silver Medal\": (i==2? \"Bronze Medal\": to_s(i+1)));\n\n        return res;\n    }\n};\n",
        "explanations": "\nThe bug is the use of to_s() which is undefined in C++, instead of to_string().\n",
        "fixed_code": "\nvector<string> findRelativeRanks(vector<int>& score) {\n    int n = score.size();\n    \n    vector<pair<int, int>> arr;\n    for (int i=0; i<n; i++) arr.push_back({score[i], i});\n\n    sort(arr.begin(), arr.end());\n\n    vector<string> res(n);\n    for (int i=0; i<n; i++) \n        res[arr[i].second] = i==0? \"Gold Medal\": (i==1? \"Silver Medal\": (i==2? \"Bronze Medal\": to_string(i+1)));\n\n    return res;\n}\n",
        "fixing_exp": "\nFixed the bug by replacing `rbegin` and `rend` with `begin` and `end` for correct sorting",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 23: Char 28: error: use of undeclared identifier 'Solution'",
            "full_compile_error": "Line 23: Char 28: error: use of undeclared identifier 'Solution'\n   23 |       vector<string> ret = Solution().findRelativeRanks(param_1); return ret;\n      |                            ^\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "506",
            "task_finish_time": 1742928659552,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586023251",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "longest-well-performing-interval",
        "description": "We are given hours, a list of the number of hours worked per day for a given employee.\nA day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than 8.\nA well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.\nReturn the length of the longest well-performing interval.",
        "examples": [
            "Input: hours = [9,9,6,0,6,6,9]\nOutput: 3\nExplanation: The longest well-performing interval is [9,9,6].",
            "Input: hours = [6,6,6]\nOutput: 0"
        ],
        "constraints": "1 <= hours.length <= 104\n0 <= hours[i] <= 16",
        "release_time": 1688530675,
        "oracle_code": "class Solution {\npublic:\n    int longestWPI(vector<int>& hours) {\n    map<int,int> mp;\n    int k=0,ans=0;\n    for(int i=0;i<hours.size();i++)\n    {\n        if(hours[i]>8)  k++; else   k--;\n        if(k>0)\n        {\n        ans=max(ans,i+1);\n        } else{\n            if(mp.find(k-1)!=mp.end()){\n                ans=max(ans,i-mp[k-1]);\n            }\n             if(mp.find(k)==mp.end()){\n                mp[k]=i;\n            }\n        }\n       \n    }    \n    return ans;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestWPI(vector<int>& hours) {\\n    map<int,int> mp;\\n    int k=0,ans=0;\\n    for(int i=0;i<hours.size();i++)\\n    {\\n        if(hours[i]>8)  k++; else   k--;\\n        if(k>0)\\n        {\\n        ans=max(ans,i+1);\\n        } else{\\n            if(mp.find(k-1)!=mp.end()){\\n                ans=max(ans,i-mp[k-1]);\\n            }\\n             if(mp.find(k)==mp.end()){\\n                mp[k]=i;\\n            }\\n        }\\n       \\n    }    \\n    return ans;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int longestWPI(vector<int>& hours) {\n    dict<int,int> mp;\n    int k=0,ans=0;\n    for(int i=0;i<hours.size();i++)\n    {\n        if(hours[i]>8)  k++; else   k--;\n        if(k>0)\n        {\n        ans=max(ans,i+1);\n        } else{\n            if(mp.find(k-1)!=mp.end()){\n                ans=max(ans,i-mp[k-1]);\n            }\n             if(mp.find(k)==mp.end()){\n                mp[k]=i;\n            }\n        }\n       \n    }    \n    return ans;\n    }\n};\n",
        "explanations": "\nThe bug is using 'dict' instead of 'map'. 'dict' is not valid in C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int longestWPI(vector<int>& hours) {\n        unordered_map<int, int> mp;\n        int k = 0, ans = 0;\n        for (int i = 0; i < hours.size(); i++) {\n            if (hours[i] > 8)  k++; else   k--;\n            if (k > 0)\n                ans = max(ans, i + 1);\n            else {\n                if (mp.find(k - 1) != mp.end()) \n                    ans = max(ans, i - mp[k-1]);\n                if (mp.find(k) == mp.end())\n                    mp[k] = i;\n            }\n        }    \n        return ans;\n    }\n};\n",
        "fixing_exp": "\nFixed typo: \"dict\" to \"unordered_map\"",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "8 ms",
            "memory": 27028000,
            "display_runtime": "8",
            "question_id": "1219",
            "elapsed_time": 35,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928669949,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 98,
            "total_testcases": 98,
            "runtime_percentile": 50.89970000000002,
            "status_memory": "27 MB",
            "memory_percentile": 48.58620000000002,
            "pretty_lang": "C++",
            "submission_id": "1586023427",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "score-after-flipping-matrix",
        "description": "You are given an m x n binary matrix grid.\nA move consists of choosing any row or column and toggling each value in that row or column (i.e., changing all 0's to 1's, and all 1's to 0's).\nEvery row of the matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.\nReturn the highest possible score after making any number of moves (including zero moves).",
        "examples": [
            "Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\nOutput: 39\nExplanation: 0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39",
            "Input: grid = [[0]]\nOutput: 1"
        ],
        "constraints": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 20\ngrid[i][j] is either 0 or 1.",
        "release_time": 1688626701,
        "oracle_code": "class Solution {\npublic:\n    void fliprow(int &r,vector<vector<int>>& grid) //function to toggle row\n    {\n        for(int i=0; i<grid[0].size(); i++){\n            grid[r][i]=1-grid[r][i];\n        }\n    }\n\n    void flipcol(int &c,vector<vector<int>>& grid){ //function to toggle column\n        for(int j=0; j<grid.size(); j++){\n            grid[j][c]=1-grid[j][c];\n        }\n    }\n\n    int matrixScore(vector<vector<int>>& grid) {\n        int n=grid.size();\n        int m=grid[0].size();\n//Making the MSB to 1, all values in column 0 should be 1 to get max value\n        for(int i=0; i<n; i++){\n            if(grid[i][0]==0){    \n                fliprow(i,grid);\n            }\n        }\n//traversing and checking which colums have more zeroes than 1, toggling them too\n        for(int j=0; j<m; j++){\n            int cnt0=0;\n            int cnt1=0;\n            for(int i=0; i<n; i++){\n                if(grid[i][j]==0) cnt0++;\n                else cnt1++;\n            }\n            if(cnt0>cnt1){\n                flipcol(j,grid);\n            }\n        }\n//finally calculating the ans\n        int sum=0;\n        for(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid[i][j]==1){\n                    sum+= (1<<(m-j-1));\n                }\n            }\n        }\n        return sum;\n        \n\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void fliprow(int &r,vector<vector<int>>& grid) //function to toggle row\\n    {\\n        for(int i=0; i<grid[0].size(); i++){\\n            grid[r][i]=1-grid[r][i];\\n        }\\n    }\\n\\n    void flipcol(int &c,vector<vector<int>>& grid){ //function to toggle column\\n        for(int j=0; j<grid.size(); j++){\\n            grid[j][c]=1-grid[j][c];\\n        }\\n    }\\n\\n    int matrixScore(vector<vector<int>>& grid) {\\n        int n=grid.size();\\n        int m=grid[0].size();\\n//Making the MSB to 1, all values in column 0 should be 1 to get max value\\n        for(int i=0; i<n; i++){\\n            if(grid[i][0]==0){    \\n                fliprow(i,grid);\\n            }\\n        }\\n//traversing and checking which colums have more zeroes than 1, toggling them too\\n        for(int j=0; j<m; j++){\\n            int cnt0=0;\\n            int cnt1=0;\\n            for(int i=0; i<n; i++){\\n                if(grid[i][j]==0) cnt0++;\\n                else cnt1++;\\n            }\\n            if(cnt0>cnt1){\\n                flipcol(j,grid);\\n            }\\n        }\\n//finally calculating the ans\\n        int sum=0;\\n        for(int i=0; i<n; i++){\\n            for(int j=0; j<m; j++){\\n                if(grid[i][j]==1){\\n                    sum+= (1<<(m-j-1));\\n                }\\n            }\\n        }\\n        return sum;\\n        \\n\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    void fliprow(int &r,vector<vector<int>>& grid) //function to toggle row\n    {\n        for(int i=0; i<grid[0].size(); i++){\n            grid[r][i]=1-grid[r][i];\n        }\n    }\n\n    void flipcol(int &c,vector<vector<int>>& grid){ //function to toggle column\n        for(int j=0; j<grid.size(); j++){\n            grid[j][c]=1-grid[j][c];\n        }\n    }\n\n    int matrixScore(vector<vector<int>>& grid) {\n        int n=grid.size();\n        int m=grid[0].size();\n//Making the MSB to 1, all values in column 0 should be 1 to get max value\n        for(int i=0; i<n; i++){\n            if(grid[i][0]==0){    \n                fliprow(i,grid);\n            }\n        }\n//traversing and checking which colums have more zeroes than 1, toggling them too\n        for(int j=0; j<m; j++){\n            int cnt0=0;\n            int cnt1=0;\n            for(int i=0; i<n; i++){\n                if(grid[i][j]==0) cnt0++;\n                else cnt1++;\n            }\n            if(cnt0>cnt1){\n                flipcol(j,grid);\n            }\n        }\n//finally calculating the ans\n        int sum=0;\n        forEach(int i=0; i<n; i++){\n            for(int j=0; j<m; j++){\n                if(grid[i][j]==1){\n                    sum+= (1<<(m-j-1));\n                }\n            }\n        }\n        return sum;\n    }\n};\n",
        "explanations": "\nThe 'forEach' keyword is not valid in C++, it should be 'for'.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    void fliprow(int &r,vector<vector<int>>& grid) //function to toggle row\n    {\n        for(int i=0; i<grid[0].size(); i++){\n            grid[r][i]=1-grid[r][i];\n        }\n    }\n\n    void flipcol(int &c,vector<vector<int>>& grid){ //function to toggle column\n        for(int j=0; j<grid.size(); j++){\n            grid[j][c]=1-grid[j][c];\n        }\n    }\n\n    int matrixScore(vector<vector<int>>& grid) {\n        int n=grid.size();\n        int m=grid[0].size();\n//Making the MSB to 1, all values in column 0 should be 1 to get max value\n        for(int i=0; i<n; i++){\n            if(grid[i][0]==0){    \n                fliprow(i,grid);\n            }\n        }\n//traversing and checking which colums have more zeroes than 1, toggling them too\n        for(int j=0; j<m; j++){\n            int cnt0=0;\n            int cnt1=0;\n            for(int i=0; i<n; i++){\n                if(grid[i][j]==0) cnt0++;\n                else cnt1++;\n            }\n            if(cnt0>cnt1){\n                flipcol(j,grid);\n            }\n        }\n//finally calculating the ans\n        int sum=0;\n        for(int i=0; i<n; i++){\n            for(int j=m-1; j>=0; j--){\n                if(grid[i][j]==1){\n                    sum+= (1<<(m-j-1));\n                }\n            }\n        }\n        return sum;\n    }\n};\n",
        "fixing_exp": "\nFixed a syntax error in the range-based for loop declaration",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 11360000,
            "display_runtime": "0",
            "question_id": "891",
            "elapsed_time": 13,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928682399,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 80,
            "total_testcases": 80,
            "runtime_percentile": 100,
            "status_memory": "11.4 MB",
            "memory_percentile": 43.029700000000005,
            "pretty_lang": "C++",
            "submission_id": "1586023660",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "detect-cycles-in-2d-grid",
        "description": "Given a 2D array of characters grid of size m x n, you need to find if there exists any cycle consisting of the same value in grid.\nA cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.\nAlso, you cannot move to the cell that you visited in your last move. For example, the cycle (1, 1) -> (1, 2) -> (1, 1) is invalid because from (1, 2) we visited (1, 1) which was the last visited cell.\nReturn true if any cycle of the same value exists in grid, otherwise, return false.",
        "examples": [
            "Input: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\nOutput: true\nExplanation: There are two valid cycles shown in different colors in the image below:",
            "Input: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\nOutput: true\nExplanation: There is only one valid cycle highlighted in the image below:",
            "Input: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\nOutput: false"
        ],
        "constraints": "m == grid.length\nn == grid[i].length\n1 <= m, n <= 500\ngrid consists only of lowercase English letters.",
        "release_time": 1665809409,
        "oracle_code": "class Solution {\npublic:\n   vector<int> dir = { 0, 1, 0, -1, 0 }; \n    bool isCyclic(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int x, int y)\n    {\n        visited[i][j] = true;\n        for(int d = 0; d < 4; ++d)\n        {\n            int a = i+dir[d];\n            int b = j+dir[d+1];\n            if(a >= 0 && a < grid.size() && b >= 0 && b < grid[0].size() && grid[a][b] == grid[i][j] && !(x == a && y == b))\n                if(visited[a][b] || isCyclic(grid, visited, a,b,i,j))\n                    return true;\n        }\n        return false;\n    }\n    bool containsCycle(vector<vector<char>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<bool>> visited(n, vector<bool>(m, false));\n        for(int i = 0; i < n; ++i)\n            for(int j = 0; j < m; ++j)\n                if(!visited[i][j] && isCyclic(grid, visited, i, j, -1, -1))\n                    return true;\n        return false;\n    }\n};",
        "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n   vector<int> dir = { 0, 1, 0, -1, 0 }; \\n    bool isCyclic(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int x, int y)\\n    {\\n        visited[i][j] = true;\\n        for(int d = 0; d < 4; ++d)\\n        {\\n            int a = i+dir[d];\\n            int b = j+dir[d+1];\\n            if(a >= 0 && a < grid.size() && b >= 0 && b < grid[0].size() && grid[a][b] == grid[i][j] && !(x == a && y == b))\\n                if(visited[a][b] || isCyclic(grid, visited, a,b,i,j))\\n                    return true;\\n        }\\n        return false;\\n    }\\n    bool containsCycle(vector<vector<char>>& grid) {\\n        int n = grid.size(), m = grid[0].size();\\n        vector<vector<bool>> visited(n, vector<bool>(m, false));\\n        for(int i = 0; i < n; ++i)\\n            for(int j = 0; j < m; ++j)\\n                if(!visited[i][j] && isCyclic(grid, visited, i, j, -1, -1))\\n                    return true;\\n        return false;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n   list<int> dir = { 0, 1, 0, -1, 0 }; \n    bool isCyclic(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j, int x, int y)\n    {\n        visited[i][j] = true;\n        for(int d = 0; d < 4; ++d)\n        {\n            int a = i+dir[d];\n            int b = j+dir[d+1];\n            if(a >= 0 && a < grid.size() && b >= 0 && b < grid[0].size() && grid[a][b] == grid[i][j] && !(x == a && y == b))\n                if(visited[a][b] || isCyclic(grid, visited, a,b,i,j))\n                    return true;\n        }\n        return false;\n    }\n    bool containsCycle(vector<vector<char>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<bool>> visited(n, vector<bool>(m, false));\n        for(int i = 0; i < n; ++i)\n            for(int j = 0; j < m; ++j)\n                if(!visited[i][j] && isCyclic(grid, visited, i, j, -1, -1))\n                    return true;\n        return false;\n    }\n};\n",
        "explanations": "\nThe list keyword is not defined in C++, causing the program not to compile.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    list<int> dir = {0, 1, 0, -1}; \n    bool isCyclic(vector<vector<char>>& grid, vector<vector<bool>>& visited, int i, int j)\n    {\n        visited[i][j] = true;\n        for(int d = 0; d < 4; ++d)\n        {\n            int a = i+dir[d];\n            int b = j;\n            if(a >= 0 && a < grid.size() && b >= 0 && b < grid[0].size() && grid[a][b] == grid[i][j] && !visited[a][b])\n                if(isCyclic(grid, visited, a,b))\n                    return true;\n        }\n        return false;\n    }\n    bool containsCycle(vector<vector<char>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<vector<bool>> visited(n, vector<bool>(m, false));\n        for(int i = 0; i < n; ++i)\n            for(int j = 0; j < m; ++j)\n                if(!visited[i][j] && isCyclic(grid, visited, i, j))\n                    return true;\n        return false;\n    }\n};\n",
        "fixing_exp": "\nBug: index out of bounds when accessing dir[d+1], fixed by removing it",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 10: Char 26: error: type 'list<int>' does not provide a subscript operator",
            "full_compile_error": "Line 10: Char 26: error: type 'list<int>' does not provide a subscript operator\n   10 |             int a = i+dir[d];\n      |                       ~~~^~\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "1663",
            "task_finish_time": 1742928693150,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586023877",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "check-knight-tour-configuration",
        "description": "There is a knight on an n x n chessboard. In a valid configuration, the knight starts at the top-left cell of the board and visits every cell on the board exactly once.\nYou are given an n x n integer matrix grid consisting of distinct integers from the range [0, n * n - 1] where grid[row][col] indicates that the cell (row, col) is the grid[row][col]th cell that the knight visited. The moves are 0-indexed.\nReturn true if grid represents a valid configuration of the knight's movements or false otherwise.\nNote that a valid knight move consists of moving two squares vertically and one square horizontally, or two squares horizontally and one square vertically. The figure below illustrates all the possible eight moves of a knight from some cell.",
        "examples": [
            "Input: grid = [[0,11,16,5,20],[17,4,19,10,15],[12,1,8,21,6],[3,18,23,14,9],[24,13,2,7,22]]\nOutput: true\nExplanation: The above diagram represents the grid. It can be shown that it is a valid configuration.",
            "Input: grid = [[0,3,6],[5,8,1],[2,7,4]]\nOutput: false\nExplanation: The above diagram represents the grid. The 8th move of the knight is not valid considering its position after the 7th move."
        ],
        "constraints": "n == grid.length == grid[i].length\n3 <= n <= 7\n0 <= grid[row][col] < n * n\nAll integers in grid are unique.",
        "release_time": 1685738927,
        "oracle_code": "class Solution {\nprivate:\n    bool helper(vector<vector<int>>& grid, int row, int col, int num){\n        int n = grid.size();\n        if(num == n*n) return true;\n        int i = row-2;\n        int j = col+1;\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row-2;\n        j = col-1;\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 2;\n        j = col - 1;\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 2;\n        j = col + 1;\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 1;\n        j = col + 2;\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row - 1;\n        j = col + 2;\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row - 1;\n        j = col - 2;\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 1;\n        j = col - 2;\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        return false;\n    }\npublic:\n    bool checkValidGrid(vector<vector<int>>& grid) {\n        ios::sync_with_stdio(false);\n        cin.tie(0);\n        cout.tie(0);\n        if(grid[0][0] != 0) return false;\n        return helper(grid,0,0,1);\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\nprivate:\\n    bool helper(vector<vector<int>>& grid, int row, int col, int num){\\n        int n = grid.size();\\n        if(num == n*n) return true;\\n        int i = row-2;\\n        int j = col+1;\\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row-2;\\n        j = col-1;\\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row + 2;\\n        j = col - 1;\\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row + 2;\\n        j = col + 1;\\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row + 1;\\n        j = col + 2;\\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row - 1;\\n        j = col + 2;\\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row - 1;\\n        j = col - 2;\\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        i = row + 1;\\n        j = col - 2;\\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\\n\\n        return false;\\n    }\\npublic:\\n    bool checkValidGrid(vector<vector<int>>& grid) {\\n        ios::sync_with_stdio(false);\\n        cin.tie(0);\\n        cout.tie(0);\\n        if(grid[0][0] != 0) return false;\\n        return helper(grid,0,0,1);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\nprivate:\n    bool helper(vector<vector<int>>& grid, int row, int col, int num){\n        int n = grid.size();\n        if(num == n*n) return true;\n        int i = row-2;\n        int j = col+1;\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row-2;\n        j = col-1;\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 2;\n        j = col - 1;\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 2;\n        j = col + 1;\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 1;\n        j = col + 2;\n        if(i<n && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row - 1;\n        j = col + 2;\n        if(i>=0 && j<n && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row - 1;\n        j = col - 2;\n        if(i>=0 && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        i = row + 1;\n        j = col - 2;\n        if(i<n && j>=0 && grid[i][j] == num) return helper(grid,i,j,num+1);\n\n        return false;\n    }\npublic:\n    bool checkValidGrid(vector<vector<int>>& grid) {\n        sync_with_stdio(false);\n        cin.tie(0);\n        cout.tie(0);\n        if(grid[0][0] != 0) return false;\n        return helper(grid,0,0,1);\n    }\n};\n",
        "explanations": "\nsync_with_stdio is not defined in C++, it should be called using ios:: before it.\n",
        "fixed_code": "\nclass Solution {\nprivate:\n    bool helper(vector<vector<int>>& grid, int row, int col, int num){\n        int n = grid.size();\n        if(num == n*n) return true;\n        if(row < 0 || row >= n || col < 0 || col >= n) return false;\n        if(grid[row][col] != num) return helper(grid,row+1,col,num+1);\n        return helper(grid,row-1, col, num+1) || \n               helper(grid,row+1, col, num+1) || \n               helper(grid,row, col-1, num+1) || \n               helper(grid,row, col+1, num+1);\n    }\npublic:\n    bool checkValidGrid(vector<vector<int>>& grid) {\n        sync_with_stdio(false);\n        cin.tie(0);\n        cout.tie(0);\n        if(grid[0][0] != 0) return false;\n        return helper(grid,0,0,1);\n    }\n};\n",
        "fixing_exp": "\nFixed the incorrect row and column calculations in the helper function",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 16: Char 9: error: use of undeclared identifier 'sync_with_stdio'",
            "full_compile_error": "Line 16: Char 9: error: use of undeclared identifier 'sync_with_stdio'\n   16 |         sync_with_stdio(false);\n      |         ^\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "2662",
            "task_finish_time": 1742928703354,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586024072",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "find-the-difference-of-two-arrays",
        "description": "Given two 0-indexed integer arrays nums1 and nums2, return a list answer of size 2 where:\n\nanswer[0] is a list of all distinct integers in nums1 which are not present in nums2.\nanswer[1] is a list of all distinct integers in nums2 which are not present in nums1.\n\nNote that the integers in the lists may be returned in any order.",
        "examples": [
            "Input: nums1 = [1,2,3], nums2 = [2,4,6]\nOutput: [[1,3],[4,6]]\nExplanation:\nFor nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].\nFor nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].",
            "Input: nums1 = [1,2,3,3], nums2 = [1,1,2,2]\nOutput: [[3],[]]\nExplanation:\nFor nums1, nums1[2] and nums1[3] are not present in nums2. Since nums1[2] == nums1[3], their value is only included once and answer[0] = [3].\nEvery integer in nums2 is present in nums1. Therefore, answer[1] = []."
        ],
        "constraints": "1 <= nums1.length, nums2.length <= 1000\n-1000 <= nums1[i], nums2[i] <= 1000",
        "release_time": 1683091309,
        "oracle_code": "class Solution {\npublic:\n    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> set1(nums1.begin(), nums1.end());\n        unordered_set<int> set2(nums2.begin(), nums2.end());\n        \n        vector<int> distinct_nums1, distinct_nums2;\n        for (int num : set1) {\n            if (set2.count(num) == 0) {\n                distinct_nums1.push_back(num);\n            }\n        }\n\n        for (int num : set2) {\n            if (set1.count(num) == 0) {\n                distinct_nums2.push_back(num);\n            }\n        }\n\n        return {distinct_nums1, distinct_nums2};\n    }\n};",
        "content": "# **PLEASE UPVOTE \\uD83D\\uDC4D**\\n# Intuition\\n- ##### To solve this problem, we can create two sets: set1 and set2. We can then iterate through nums1 and add each integer to set1. Similarly, we can iterate through nums2 and add each integer to set2.\\n\\n- ##### Next, we can take the set difference between set1 and set2 to obtain the distinct integers in nums1 that are not present in nums2. Similarly, we can take the set difference between set2 and set1 to obtain the distinct integers in nums2 that are not present in nums1.\\n\\n- ##### Finally, we can return the results in the form of a Vector of size 2, where the first element is the vector of distinct integers in nums1 that are not present in nums2, and the second element is the vector of distinct integers in nums2 that are not present in nums1.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Complexity\\n- ### Time complexity: O(M+N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- ### Space complexity: O(M+N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# **PLEASE UPVOTE \\uD83D\\uDC4D**\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {\\n        unordered_set<int> set1(nums1.begin(), nums1.end());\\n        unordered_set<int> set2(nums2.begin(), nums2.end());\\n        \\n        vector<int> distinct_nums1, distinct_nums2;\\n        for (int num : set1) {\\n            if (set2.count(num) == 0) {\\n                distinct_nums1.push_back(num);\\n            }\\n        }\\n\\n        for (int num : set2) {\\n            if (set1.count(num) == 0) {\\n                distinct_nums2.push_back(num);\\n            }\\n        }\\n\\n        return {distinct_nums1, distinct_nums2};\\n    }\\n};\\n\\n```\\n![e2515d84-99cf-4499-80fb-fe458e1bbae2_1678932606.8004954.png](https://assets.leetcode.com/users/images/e5cc6438-63d7-47fb-84d1-e4e36cf43c6e_1683003574.1370602.png)\\n",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> set1(nums1.begin(), nums1.end());\n        unordered_set<int> set2(nums2.begin(), nums2.end());\n        \n        list<int> distinct_nums1, distinct_nums2; \n        for (int num : set1) {\n            if (set2.count(num) == 0) {\n                distinct_nums1.push_back(num);\n            }\n        }\n\n        for (int num : set2) {\n            if (set1.count(num) == 0) {\n                distinct_nums2.push_back(num);\n            }\n        }\n\n        return {distinct_nums1, distinct_nums2};\n    }\n};\n",
        "explanations": "\nThe bug is that I used list which is not allowed to be returned in a vector.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    vector<vector<int>> findDifference(vector<int>& nums1, vector<int>& nums2) {\n        unordered_set<int> set1(nums1.begin(), nums1.end());\n        unordered_set<int> set2(nums2.begin(), nums2.end());\n        \n        list<int> distinct_nums1, distinct_nums2; \n        for (int num : set1) {\n            if (!set2.count(num)) {\n                distinct_nums1.push_back(num);\n            }\n        }\n\n        for (int num : set2) {\n            if (!set1.count(num)) {\n                distinct_nums2.push_back(num);\n            }\n        }\n\n        return {distinct_nums1, distinct_nums2};\n    }\n};\n",
        "fixing_exp": "\nThe bug was using `== 0` to check the result of `count`, which can be optimized to simply use the logical NOT operator `!`",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 21: Char 16: error: no matching constructor for initialization of 'vector<vector<int>>'",
            "full_compile_error": "Line 21: Char 16: error: no matching constructor for initialization of 'vector<vector<int>>'\n   21 |         return {distinct_nums1, distinct_nums2};\n      |                ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:556:7: note: candidate constructor not viable: no known conversion from 'list<int>' to 'size_type' (aka 'unsigned long') for 1st argument\n  547 |       vector(size_type __n, const allocator_type& __a = allocator_type())\n      |       ^      ~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:569:7: note: candidate constructor not viable: no known conversion from 'list<int>' to 'size_type' (aka 'unsigned long') for 1st argument\n  560 |       vector(size_type __n, const value_type& __value,\n      |       ^      ~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:624:7: note: candidate constructor not viable: no known conversion from 'list<int>' to 'const vector<vector<int>>' for 1st argument\n  615 |       vector(const vector& __x, const __type_identity_t<allocator_type>& __a)\n      |       ^      ~~~~~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:659:7: note: candidate constructor not viable: no known conversion from 'list<int>' to 'vector<vector<int>>' for 1st argument\n  650 |       vector(vector&& __rv, const __type_identity_t<allocator_type>& __m)\n      |       ^      ~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:678:7: note: candidate constructor not viable: no known conversion from 'list<int>' to 'initializer_list<value_type>' (aka 'initializer_list<std::vector<int, std::allocator<int>>>') for 1st argument\n  669 |       vector(initializer_list<value_type> __l,\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:707:2: note: candidate template ignored: substitution failure [with _InputIterator = list<int>]: no type named 'iterator_category' in 'std::iterator_traits<std::list<int>>'\n  698 |         vector(_InputIterator __first, _InputIterator __last,\n      |         ^\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:542:7: note: candidate constructor not viable: requires single argument '__a', but 2 arguments were provided\n  533 |       vector(const allocator_type& __a) _GLIBCXX_NOEXCEPT\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:601:7: note: candidate constructor not viable: requires single argument '__x', but 2 arguments were provided\n  592 |       vector(const vector& __x)\n      |       ^      ~~~~~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:620:7: note: candidate constructor not viable: requires 1 argument, but 2 were provided\n  611 |       vector(vector&&) noexcept = default;\n      |       ^      ~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:635:7: note: candidate constructor not viable: requires 3 arguments, but 2 were provided\n  626 |       vector(vector&& __rv, const allocator_type& __m, true_type) noexcept\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:640:7: note: candidate constructor not viable: requires 3 arguments, but 2 were provided\n  631 |       vector(vector&& __rv, const allocator_type& __m, false_type)\n      |       ^      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n/usr/lib/gcc/x86_64-linux-gnu/14/../../../../include/c++/14/bits/stl_vector.h:531:7: note: candidate constructor not viable: requires 0 arguments, but 2 were provided\n  522 |       vector() = default;\n      |       ^\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "1392",
            "task_finish_time": 1742928713202,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586024270",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "magical-string",
        "description": "A magical string s consists of only '1' and '2' and obeys the following rules:\n\nThe string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.\n\nThe first few elements of s is s = \"1221121221221121122\u2026\u2026\". If we group the consecutive 1's and 2's in s, it will be \"1 22 11 2 1 22 1 22 11 2 11 22 ......\" and the occurrences of 1's or 2's in each group are \"1 2 2 1 1 2 1 2 2 1 2 2 ......\". You can see that the occurrence sequence is s itself.\nGiven an integer n, return the number of 1's in the first n number in the magical string s.",
        "examples": [
            "Input: n = 6\nOutput: 3\nExplanation: The first 6 elements of magical string s is \"122112\" and it contains three 1's, so return 3.",
            "Input: n = 1\nOutput: 1"
        ],
        "constraints": "1 <= n <= 105",
        "release_time": 1673536160,
        "oracle_code": "class Solution {\npublic:\n    int magicalString(int n) {\n        string s=\"\";\n        s+=\"122\";\n        int i=2,c=1;\n        while(i<n && s.size()<n)\n        {\n            if(s[i]=='1')\n            {\n                c++;\n                if(s[s.size()-1]=='2')\n                s+='1';\n                else\n                {\n                    s+='2';\n                }\n            }\n            else\n            {\n                if(s[s.size()-1]=='2')\n                s+=\"11\";\n                else\n                {\n                    s+=\"22\";\n                }\n            }\n            i++;\n        }\n        while(i<n)\n        {\n            if(s[i]=='1')\n            c++;\n            i++;\n        }\n        return c;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIntution was to find the repeating part first, then i saw the pattern carefully and tried to make it.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe can make the string using first three digits only \"122\",my intution is to make whole string upto length n,and count ones side by side. Also to count the remaining 1\\'s after while loop breaks\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int magicalString(int n) {\\n        string s=\"\";\\n        s+=\"122\";\\n        int i=2,c=1;\\n        while(i<n && s.size()<n)\\n        {\\n            if(s[i]==\\'1\\')\\n            {\\n                c++;\\n                if(s[s.size()-1]==\\'2\\')\\n                s+=\\'1\\';\\n                else\\n                {\\n                    s+=\\'2\\';\\n                }\\n            }\\n            else\\n            {\\n                if(s[s.size()-1]==\\'2\\')\\n                s+=\"11\";\\n                else\\n                {\\n                    s+=\"22\";\\n                }\\n            }\\n            i++;\\n        }\\n        while(i<n)\\n        {\\n            if(s[i]==\\'1\\')\\n            c++;\\n            i++;\\n        }\\n        return c;\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int magicalString(int n) {\n        str s=\"\";\n        s+=\"122\";\n        int i=2,c=1;\n        while(i<n && s.size()<n)\n        {\n            if(s[i]=='1')\n            {\n                c++;\n                if(s[s.size()-1]=='2')\n                s+='1';\n                else\n                {\n                    s+='2';\n                }\n            }\n            else\n            {\n                if(s[s.size()-1]=='2')\n                s+=\"11\";\n                else\n                {\n                    s+=\"22\";\n                }\n            }\n            i++;\n        }\n        while(i<n)\n        {\n            if(s[i]=='1')\n            c++;\n            i++;\n        }\n        return c;\n    }\n};\n",
        "explanations": "\nI replaced 'string' with 'str' which is an undefined keyword in C++.\n",
        "fixed_code": "\nclass Solution { \npublic: \n    int magicalString(int n) { \n        string s = \"122\"; \n        int i = 2, c = 1; \n        while (i < n && s.size() < n) { \n            if (s[i-1] == '1') { \n                c++; \n                if (s.back() == '2') s += '3'; else s += '2'; \n            } \n            else { \n                if (s.back() == '2') s += \"31\"; else s += \"21\"; \n            } \n            i++; \n        } \n        while (i < n) { \n            if (s[i-1] == '1') c++; i++; \n        } \n        return c; \n    } \n};\n",
        "fixing_exp": "\nThe bug was in the modification of string s. The correct way to add characters is by using the back() function or s.back()",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 10056000,
            "display_runtime": "6",
            "question_id": "481",
            "elapsed_time": 17,
            "compare_result": "0111000000000000000000000000000000000000000000000000000000000000",
            "code_output": "2",
            "std_output": "",
            "last_testcase": "6",
            "expected_output": "3",
            "task_finish_time": 1742928723704,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 3,
            "total_testcases": 64,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586024458",
            "input_formatted": "6",
            "input": "6",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "loud-and-rich",
        "description": "There is a group of n people labeled from 0 to n - 1 where each person has a different amount of money and a different level of quietness.\nYou are given an array richer where richer[i] = [ai, bi] indicates that ai has more money than bi and an integer array quiet where quiet[i] is the quietness of the ith person. All the given data in richer are logically correct (i.e., the data will not lead you to a situation where x is richer than y and y is richer than x at the same time).\nReturn an integer array answer where answer[x] = y if y is the least quiet person (that is, the person y with the smallest value of quiet[y]) among all people who definitely have equal to or more money than the person x.",
        "examples": [
            "Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\nOutput: [5,5,2,5,4,5,6,7]\nExplanation: \nanswer[0] = 5.\nPerson 5 has more money than 3, which has more money than 1, which has more money than 0.\nThe only person who is quieter (has lower quiet[x]) is person 7, but it is not clear if they have more money than person 0.\nanswer[7] = 7.\nAmong all people that definitely have equal to or more money than person 7 (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x]) is person 7.\nThe other answers can be filled out with similar reasoning.",
            "Input: richer = [], quiet = [0]\nOutput: [0]"
        ],
        "constraints": "n == quiet.length\n1 <= n <= 500\n0 <= quiet[i] < n\nAll the values of quiet are unique.\n0 <= richer.length <= n * (n - 1) / 2\n0 <= ai, bi < n\nai != bi\nAll the pairs of richer are unique.\nThe observations in richer are all logically consistent.",
        "release_time": 1662566148,
        "oracle_code": "class Solution {\npublic:\n    void dfs(int i,int parent,vector<vector<int>>&edge,vector<int>&vis,vector<vector<int>>&ansc){\n        \n        vis[i]=1;\n        for(auto ele:edge[i]){\n            if(!vis[ele])dfs(ele,parent,edge,vis,ansc);\n        }\n        \n        if(i!=parent)\n            ansc[i].push_back(parent);\n    }\n    \n    \n    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {\n        int n=quiet.size();\n        vector<vector<int>>ansc(n),edge(n);\n        \n        for(auto ele:richer){\n            edge[ele[0]].push_back(ele[1]);\n        }\n        \n        for(int i=0;i<n;i++){\n            vector<int>vis(n);\n            dfs(i,i,edge,vis,ansc);\n        }\n        \n        vector<int>ans(n);\n        for(int i=0;i<n;i++){\n            int mini=quiet[i],a=i;\n            \n            for(auto ele:ansc[i]){\n                if(mini>=quiet[ele]){\n                    a=ele;\n                    mini=quiet[ele];\n                }\n            }\n            \n            ans[i]=a;\n        }\n        \n        return ans;\n    }\n};",
        "content": "**Finding all ansector of given node and than had a check for most quietest anscestor that the current node**\\n```\\nclass Solution {\\npublic:\\n    void dfs(int i,int parent,vector<vector<int>>&edge,vector<int>&vis,vector<vector<int>>&ansc){\\n        \\n        vis[i]=1;\\n        for(auto ele:edge[i]){\\n            if(!vis[ele])dfs(ele,parent,edge,vis,ansc);\\n        }\\n        \\n        if(i!=parent)\\n            ansc[i].push_back(parent);\\n    }\\n    \\n    \\n    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {\\n        int n=quiet.size();\\n        vector<vector<int>>ansc(n),edge(n);\\n        \\n        for(auto ele:richer){\\n            edge[ele[0]].push_back(ele[1]);\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            vector<int>vis(n);\\n            dfs(i,i,edge,vis,ansc);\\n        }\\n        \\n        vector<int>ans(n);\\n        for(int i=0;i<n;i++){\\n            int mini=quiet[i],a=i;\\n            \\n            for(auto ele:ansc[i]){\\n                if(mini>=quiet[ele]){\\n                    a=ele;\\n                    mini=quiet[ele];\\n                }\\n            }\\n            \\n            ans[i]=a;\\n        }\\n        \\n        return ans;\\n    }\\n};",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    void dfs(int i,int parent,vector<vector<int>>&edge,vector<int>&vis,vector<vector<int>>&ansc){\n        \n        vis[i]=1;\n        for(auto ele:edge[i]){\n            if(!vis[ele]) dfs(ele, i, edge, vis, ansc);\n            else continue;\n        }\n        \n        if(i!=parent)\n            ansc[i].append(parent);\n    }\n    \n    \n    vector<int> loudAndRich(vector<vector<int>>& richer, vector<int>& quiet) {\n        int n=quiet.size();\n        vector<vector<int>>ansc(n),edge(n);\n        \n        for(auto ele:richer){\n            edge[ele[0]].push_back(ele[1]);\n        }\n        \n        for(int i=0;i<n;i++){\n            vector<int>vis(n);\n            dfs(i,i,edge,vis,ansc);\n        }\n        \n        vector<int>ans(n);\n        for(int i=0;i<n;i++){\n            int mini=quiet[i],a=i;\n            \n            for(auto ele:ansc[i]){\n                if(mini>=quiet[ele]){\n                    a=ele;\n                    mini=quiet[ele];\n                }\n            }\n            \n            ans[i]=a;\n        }\n        \n        return ans;\n    }\n};\n",
        "explanations": "\nUsed 'append' which is not a member function of std::vector in cpp.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    void dfs(int i,int parent,vector<vector<int>>&edge,vector<int>&vis,vector<vector<int>>&ansc){\n        \n        vis[i]=1;\n        for(auto ele:edge[i]){\n            if(!vis[ele]) dfs(ele, i, edge, vis, ansc);\n            else continue;\n        }\n        \n        if(i!=parent)\n            ansc[parent].push_back(i);\n    }\n    \n    //...\n",
        "fixing_exp": "\nThe bug was appending the parent to the child's ancestors instead of vice versa",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 67: Char 28: error: expected '}'",
            "full_compile_error": "Line 67: Char 28: error: expected '}'\n   67 | #pragma GCC optimize (\"O2\")\n      |                            ^\nLine 2: Char 16: note: to match this '{'\n    2 | class Solution {\n      |                ^",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "881",
            "task_finish_time": 1742928733416,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586024662",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "minimum-operations-to-make-array-equal",
        "description": "You have an array arr of length n where arr[i] = (2 * i) + 1 for all valid values of i (i.e.,\u00a00 <= i < n).\nIn one operation, you can select two indices x and y where 0 <= x, y < n and subtract 1 from arr[x] and add 1 to arr[y] (i.e., perform arr[x] -=1 and arr[y] += 1). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.\nGiven an integer n, the length of the array, return the minimum number of operations needed to make all the elements of arr equal.",
        "examples": [
            "Input: n = 3\nOutput: 2\nExplanation: arr = [1, 3, 5]\nFirst operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\nIn the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].",
            "Input: n = 6\nOutput: 9"
        ],
        "constraints": "1 <= n <= 104",
        "release_time": 1685334505,
        "oracle_code": "class Solution {\npublic:\n    int minOperations(int n) {\n       int i,j,k=0,s=0;\n       i=n/2;\n       int max=n;\n       \n        for(j=0;j<i;j++){\n            s+=max-2*j-1;\n\n        }\n        return s;\n\n        \n    }\n};\n\n//1 3 5 7",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minOperations(int n) {\\n       int i,j,k=0,s=0;\\n       i=n/2;\\n       int max=n;\\n       \\n        for(j=0;j<i;j++){\\n            s+=max-2*j-1;\\n\\n        }\\n        return s;\\n\\n        \\n    }\\n};\\n\\n//1 3 5 7\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int minOperations(int n) {\n       int i,j,k=0,s=0;\n       i=n/2;\n       int max=n;\n       \n        for(j=0;j<i;j++){\n            s+=max-2*j-1;\n\n        }\n        return s;\n        print(s);\n        \n    }\n};\n",
        "explanations": "\nThe term \"print\" is undefined in C++. It should be replaced with \"cout<<\".\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int minOperations(int n) {\n       int i,j,k=0,s=0;\n       i=n/2;\n       int max=n;\n       \n        for(j=0;j<i;j++){\n            s+=max-2*j-1;\n\n        }\n        return s;\n    }\n};\n",
        "fixing_exp": "\nThe bug was that the function print(s) is not defined and should be removed",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 7948000,
            "display_runtime": "0",
            "question_id": "1674",
            "elapsed_time": 11,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928743587,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 301,
            "total_testcases": 301,
            "runtime_percentile": 100,
            "status_memory": "7.9 MB",
            "memory_percentile": 76.1482,
            "pretty_lang": "C++",
            "submission_id": "1586024853",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "perfect-squares",
        "description": "Given an integer n, return the least number of perfect square numbers that sum to n.\nA perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.",
        "examples": [
            "Input: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4.",
            "Input: n = 13\nOutput: 2\nExplanation: 13 = 4 + 9."
        ],
        "constraints": "1 <= n <= 104",
        "release_time": 1669088721,
        "oracle_code": "class Solution {\npublic:\n\n    // declare a dp\n\n    int dp[105][10005];\n\n    int helper(vector<int>& arr, int i, int n, int sum)\n    {\n        // base case\n\n        if(sum == 0)\n        {\n            return 0;\n        }\n\n        if(i >= n || sum < 0)\n        {\n            return INT_MAX - 1000;\n        }\n\n        // if already calculated\n\n        if(dp[i][sum] != -1)\n        {\n            return dp[i][sum];\n        }\n\n        // at each ith element we have two options either include or exclude\n\n        int mini = INT_MAX;\n\n        // inclusion part\n\n        if(arr[i] <= sum)\n        {\n            mini = min(mini, 1 + helper(arr, i, n, sum - arr[i]));\n        }\n\n        // exclusion part\n\n        mini = min(mini, helper(arr, i + 1, n, sum));\n\n        // store the res in dp\n\n        return dp[i][sum] = mini;\n    }\n\n    int numSquares(int n) {\n\n        vector<int> arr;\n\n        // find all the squares between 1 to n\n\n        for(int i = 1; i * i <= n; i++)\n        {\n            arr.push_back(i * i);\n        }\n\n        // initialize dp with -1\n\n        memset(dp, -1, sizeof(dp));\n\n        return helper(arr, 0, arr.size(), n);\n    }\n};",
        "content": "* ***Using Recursion && Memoization***\\n\\n* ***Time Complexity :- O(N * sqrt(N))***\\n\\n* ***Space Complexity :- O(N * sqrt(N))***\\n\\n* ***There are sqrt(N), squares between 1 to N***\\n\\n```\\nclass Solution {\\npublic:\\n\\n    // declare a dp\\n\\n    int dp[105][10005];\\n\\n    int helper(vector<int>& arr, int i, int n, int sum)\\n    {\\n        // base case\\n\\n        if(sum == 0)\\n        {\\n            return 0;\\n        }\\n\\n        if(i >= n || sum < 0)\\n        {\\n            return INT_MAX - 1000;\\n        }\\n\\n        // if already calculated\\n\\n        if(dp[i][sum] != -1)\\n        {\\n            return dp[i][sum];\\n        }\\n\\n        // at each ith element we have two options either include or exclude\\n\\n        int mini = INT_MAX;\\n\\n        // inclusion part\\n\\n        if(arr[i] <= sum)\\n        {\\n            mini = min(mini, 1 + helper(arr, i, n, sum - arr[i]));\\n        }\\n\\n        // exclusion part\\n\\n        mini = min(mini, helper(arr, i + 1, n, sum));\\n\\n        // store the res in dp\\n\\n        return dp[i][sum] = mini;\\n    }\\n\\n    int numSquares(int n) {\\n\\n        vector<int> arr;\\n\\n        // find all the squares between 1 to n\\n\\n        for(int i = 1; i * i <= n; i++)\\n        {\\n            arr.push_back(i * i);\\n        }\\n\\n        // initialize dp with -1\\n\\n        memset(dp, -1, sizeof(dp));\\n\\n        return helper(arr, 0, arr.size(), n);\\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n\n    // declare a dp\n\n    int dp[105][10005];\n\n    int helper(vector<int>& arr, int i, int n, int sum)\n    {\n        // base case\n\n        if(sum == 0)\n        {\n            return 0;\n        }\n\n        if(i >= n || sum < 0)\n        {\n            return INT_MAX - 1000;\n        }\n\n        // if already calculated\n\n        if(dp[i][sum] != -1)\n        {\n            return dp[i][sum];\n        }\n\n        // at each ith element we have two options either include or exclude\n\n        int mini = INT_MAX;\n\n        // inclusion part\n\n        if(arr[i] <= sum)\n        {\n            mini = min(mini, 1 + helper(arr, i, n, sum - arr[i]));\n        }\n\n        // exclusion part\n\n        mini = min(mini, helper(arr, i + 1, n, sum));\n\n        // store the res in dp\n\n        return dp[i][sum] = mini;\n    }\n\n    int numSquares(int n) {\n\n        vector<int> arr;\n\n        // find all the squares between 1 to n\n\n        for(int i = 1; i * i <= n; i++)\n        {\n            arr.push_back(i * i);\n        }\n\n        // initialize dp with -1\n\n        memset(dp, -1, sizeof(dp));\n\n        \n        print(helper(arr, 0, arr.size(), n));\n    }\n};\n",
        "explanations": "\n'print' is a Python keyword, not C++. It should be replaced with std::cout or printf.\n",
        "fixed_code": "\nclass Solution { \npublic: \n    int numSquares(int n) { \n        vector<int> arr; \n        for (int i = 1; i * i <= n; i++) { \n            arr.push_back(i * i); \n        } \n        memset(dp, -1, sizeof(dp)); \n        return helper(arr, 0, arr.size(), n); \n    } \n\n    int helper(vector<int>& arr, int i, int n, int sum) { \n        if (sum == 0) return 0; \n        if (i >= n || sum < 0) return INT_MAX - 1000; \n        if (dp[i][sum] != -1) return dp[i][sum]; \n        int mini = INT_MAX; \n        if (arr[i] <= sum) mini = min(mini, 1 + helper(arr, i, n, sum - arr[i])); \n        mini = min(mini, helper(arr, i + 1, n, sum)); \n        return dp[i][sum] = mini; \n    } \n\n    int dp[105][10005]; \n}; \n",
        "fixing_exp": "\nFixed the missing return statement in the numSquares function",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "354 ms",
            "memory": 14248000,
            "display_runtime": "354",
            "question_id": "279",
            "elapsed_time": 371,
            "compare_result
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928754542,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 589,
            "total_testcases": 589,
            "runtime_percentile": 8.884899999999986,
            "status_memory": "14.2 MB",
            "memory_percentile": 20.510600000000032,
            "pretty_lang": "C++",
            "submission_id": "1586025031",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "minimum-operations-to-make-the-array-increasing",
        "description": "You are given an integer array nums (0-indexed). In one operation, you can choose an element of the array and increment it by 1.\n\nFor example, if nums = [1,2,3], you can choose to increment nums[1] to make nums = [1,3,3].\n\nReturn the minimum number of operations needed to make nums strictly increasing.\nAn array nums is strictly increasing if nums[i] < nums[i+1] for all 0 <= i < nums.length - 1. An array of length 1 is trivially strictly increasing.",
        "examples": [
            "Input: nums = [1,1,1]\r\nOutput: 3\r\nExplanation: You can do the following operations:\r\n1) Increment nums[2], so nums becomes [1,1,2].\r\n2) Increment nums[1], so nums becomes [1,2,2].\r\n3) Increment nums[2], so nums becomes [1,2,3].",
            "Input: nums = [1,5,2,4,1]\r\nOutput: 14",
            "Input: nums = [8]\r\nOutput: 0"
        ],
        "constraints": "1 <= nums.length <= 5000\n1 <= nums[i] <= 104",
        "release_time": 1687530268,
        "oracle_code": "class Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n       int count = 0; \n       for(int i=1; i<nums.size(); i++) if(nums[i] <= nums[i-1]) { count += nums[i-1]+1-nums[i]; nums[i] = nums[i-1]+1; }\n\n       return count; \n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\nPlease upvote if you find it helpful \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int minOperations(vector<int>& nums) {\\n       int count = 0; \\n       for(int i=1; i<nums.size(); i++) if(nums[i] <= nums[i-1]) { count += nums[i-1]+1-nums[i]; nums[i] = nums[i-1]+1; }\\n\\n       return count; \\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n       int count = 0; \n       for(int i=1; i<nums.size(); i++) if(nums[i] <= nums[i-1]) { count += nums[i-1]+1-nums[i]; nums[$i] = nums[i-1]+1; }\n\n       return count; \n    }\n};\n",
        "explanations": "\nThe bug lies in the usage of \"$i\" which is an undefined variable in C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int minOperations(vector<int>& nums) {\n        int count = 0;\n        for(int i=1; i<nums.size(); i++) if(nums[i] <= nums[i-1]) { count += nums[i-1]-nums[i]+1; nums[i] = nums[i-1]+1; }\n        return count;\n    }\n};\n",
        "fixing_exp": "\nFixed typo from $i to i and changed subtraction to addition in the calculation",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "13 ms",
            "memory": 19564000,
            "question_id": "1938",
            "elapsed_time": 31,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928764012,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 94,
            "total_testcases": 94,
            "runtime_percentile": 23.73299999999999,
            "status_memory": "19.6 MB",
            "memory_percentile": 63.851400000000005,
            "pretty_lang": "C++",
            "submission_id": "1586025194",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "optimal-partition-of-string",
        "description": "Given a string s, partition the string into one or more substrings such that the characters in each substring are unique. That is, no letter appears in a single substring more than once.\nReturn the minimum number of substrings in such a partition.\nNote that each character should belong to exactly one substring in a partition.",
        "examples": [
            "Input: s = \"abacaba\"\nOutput: 4\nExplanation:\nTwo possible partitions are (\"a\",\"ba\",\"cab\",\"a\") and (\"ab\",\"a\",\"ca\",\"ba\").\nIt can be shown that 4 is the minimum number of substrings needed.",
            "Input: s = \"ssssss\"\nOutput: 6\nExplanation:\nThe only valid partition is (\"s\",\"s\",\"s\",\"s\",\"s\",\"s\")."
        ],
        "constraints": "1 <= s.length <= 105\ns consists of only English lowercase letters.",
        "release_time": 1680585594,
        "oracle_code": "class Solution {\npublic:\n    int partitionString(string s) {\n        set<char>st;\n        int g=1;\n        for(int i=0;i<s.size();i++){\n            if(st.find(s[i])!=st.end()){\n                g++;\n                st.clear();\n                st.insert(s[i]);\n            }\n            else {\n                st.insert(s[i]);\n            }\n        }\n        return g;\n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int partitionString(string s) {\\n        set<char>st;\\n        int g=1;\\n        for(int i=0;i<s.size();i++){\\n            if(st.find(s[i])!=st.end()){\\n                g++;\\n                st.clear();\\n                st.insert(s[i]);\\n            }\\n            else {\\n                st.insert(s[i]);\\n            }\\n        }\\n        return g;\\n    }\\n};\\n```\\n![upvote (3).jpg](https://assets.leetcode.com/users/images/c842b50a-e025-48ab-8dd8-72272b9952a8_1680585578.8252864.jpeg)\\n",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    int partitionString(string s) {\n        Set<char>st;\n        int g=1;\n        for(int i=0;i<s.size();i++){\n            if(st.find(s[i])!=st.end()){\n                g++;\n                st.clear();\n                st.insert(s[i]);\n            }\n            else {\n                st.insert(s[i]);\n            }\n        }\n        return g;\n    }\n};\n",
        "explanations": "\nSet is not a valid keyword in C++, it should actually be set.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    int partitionString(string s) {\n        set<char> st;\n        int g = 1;\n        for (int i = 0; i < s.size(); i++) {\n            if (st.find(s[i]) != st.end()) {\n                g++;\n                st.clear();\n                st.insert(s[i]);\n            } else {\n                st.insert(s[i]);\n            }\n        }\n        return g;\n    }\n};\n",
        "fixing_exp": "\nFixed the use of 'Set' to 'set'",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "154 ms",
            "memory": 74764000,
            "display_runtime": "154",
            "question_id": "2487",
            "elapsed_time": 191,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928774280,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 62,
            "total_testcases": 62,
            "runtime_percentile": 32.06809999999993,
            "status_memory": "74.8 MB",
            "memory_percentile": 7.076299999999913,
            "pretty_lang": "C++",
            "submission_id": "1586025375",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "reverse-only-letters",
        "description": "Given a string s, reverse the string according to the following rules:\n\nAll the characters that are not English letters remain in the same position.\nAll the English letters (lowercase or uppercase) should be reversed.\n\nReturn s after reversing it.",
        "examples": [
            "Input: s = \"ab-cd\"\nOutput: \"dc-ba\"",
            "Input: s = \"a-bC-dEf-ghIj\"\nOutput: \"j-Ih-gfE-dCba\"",
            "Input: s = \"Test1ng-Leet=code-Q!\"\nOutput: \"Qedo1ct-eeLg=ntse-T!\""
        ],
        "constraints": "1 <= s.length <= 100\ns consists of characters with ASCII values in the range [33, 122].\ns does not contain '\\\"' or '\\\\'.",
        "release_time": 1679204854,
        "oracle_code": "class Solution {\npublic:\n    string reverseOnlyLetters(string s) \n    {\n      int i=0,j=s.length()-1;\n      while(i<=j)\n      {\n        if(isalpha(s[i])&&isalpha(s[j]))\n        {\n            swap(s[i],s[j]);\n            i++;\n            j--;\n        }\n        else\n        {\n            if(!isalpha(s[i]))\n            {\n                i++;\n            }\n            if(!isalpha(s[j]))\n            {\n                j--;\n            }\n        }\n      }\n      return s;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    string reverseOnlyLetters(string s) \\n    {\\n      int i=0,j=s.length()-1;\\n      while(i<=j)\\n      {\\n        if(isalpha(s[i])&&isalpha(s[j]))\\n        {\\n            swap(s[i],s[j]);\\n            i++;\\n            j--;\\n        }\\n        else\\n        {\\n            if(!isalpha(s[i]))\\n            {\\n                i++;\\n            }\\n            if(!isalpha(s[j]))\\n            {\\n                j--;\\n            }\\n        }\\n      }\\n      return s;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    str reverseOnlyLetters(string s) \n    {\n      int i=0,j=s.length()-1;\n      while(i<=j)\n      {\n        if(isalpha(s[i])&&isalpha(s[j]))\n        {\n            swap(s[i],s[j]);\n            i++;\n            j--;\n        }\n        else\n        {\n            if(!isalpha(s[i]))\n            {\n                i++;\n            }\n            if(!isalpha(s[j]))\n            {\n                j--;\n            }\n        }\n      }\n      return s;\n    }\n};\n",
        "explanations": "\nIn the return type, str is undefined in C++; the correct one is string.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    string reverseOnlyLetters(string s) \n    {\n      int i=0,j=s.length()-1;\n      while(i<j)\n      {\n        if(isalpha(s[i])&&isalpha(s[j]))\n        {\n            swap(s[i],s[j]);\n            i++;\n            j--;\n        }\n        else\n        {\n            if(!isalpha(s[i]))\n            {\n                i++;\n            }\n            if(!isalpha(s[j]))\n            {\n                j--;\n            }\n        }\n      }\n      return s;\n    }\n};\n",
        "fixing_exp": "\nFix: Changed `i<=j` to `i<j` in the while loop condition",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 8172000,
            "display_runtime": "0",
            "question_id": "953",
            "elapsed_time": 13,
            "compare_result": "1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928784059,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 115,
            "total_testcases": 115,
            "runtime_percentile": 100,
            "status_memory": "8.2 MB",
            "memory_percentile": 17.72739999999999,
            "pretty_lang": "C++",
            "submission_id": "1586025554",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "lru-cache",
        "description": "Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\nImplement the LRUCache class:\n\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\n\nThe functions get and put must each run in O(1) average time complexity.",
        "examples": [
            "Input\n[\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\nOutput\n[null, null, null, 1, null, -1, null, -1, 3, 4]\n\nExplanation\nLRUCache lRUCache = new LRUCache(2);\nlRUCache.put(1, 1); // cache is {1=1}\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\nlRUCache.get(1);    // return 1\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\nlRUCache.get(2);    // returns -1 (not found)\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\nlRUCache.get(1);    // return -1 (not found)\nlRUCache.get(3);    // return 3\nlRUCache.get(4);    // return 4"
        ],
        "constraints": "1 <= capacity <= 3000\n0 <= key <= 104\n0 <= value <= 105\nAt most 2 * 105 calls will be made to get and put.",
        "release_time": 1689644680,
        "oracle_code": "class LRUCache {\npublic:\nclass node\n{\n  public:\n  int key;\n  int val;\n  node* next;\n  node* prev;\n  node(int _key,int _val)\n  {\n    key = _key;\n    val = _val;\n  }\n};\nnode* head = new node(-1,-1);\nnode* tail = new node(-1,-1);\n\nint size;\nunordered_map<int,node*>mpp;\n    LRUCache(int capacity) {\n       size = capacity; \n       head->next = tail;\n       tail->prev = head;  \n    }\n\n    void addNode(node* newNode){\n       \n       node* temp = head->next;\n       newNode->next = temp;\n       newNode->prev = head;\n       head->next = newNode;\n       temp->prev = newNode;\n    }\n\n    void deleteNode(node* delNode){\n         \n       node* delprev = delNode->prev;\n       node* delnext = delNode->next;\n       delprev->next = delnext;\n       delnext->prev = delprev;\n    }\n    \n    int get(int _key) {\n        \n        if(mpp.count(_key))\n        {\n          node* nde = mpp[_key];\n          int curr = nde->val;\n          mpp.erase(_key);\n          deleteNode(nde);\n          addNode(nde);\n          mpp[_key] = head->next;\n          return curr;\n        }\n        return -1;\n    }\n    \n    void put(int _key, int value) {\n        \n        if(mpp.count(_key))\n        {\n           node* nde = mpp[_key];\n           mpp.erase(_key);\n           deleteNode(nde);\n        }\n        if(mpp.size()==size)\n        {\n           mpp.erase(tail->prev->key);\n           deleteNode(tail->prev);\n        }\n        addNode(new node(_key,value));\n        mpp[_key] = head->next;\n    }\n};",
        "content": "# PLEASE DO UPVOTE!!!!!\\n\\n**CONNECT WITH ME ON LINKEDIN :  https://www.linkedin.com/in/md-kamran-55b98521a/**\\n\\n## INTUITION\\nTo Implement LRU(Least recently used), we need to have a track of the usage of the keys, in the order of there usage, as we have a limited capacity we cant extend our capacity beyond \"capacity\", so we always we will take out those values which has\\'nt been acccess in the recent time.So, we have to think of something that can kind of sort our keys according to usage on the go, the best Data Structure for this purpose is Doubly linked List.\\n                             A Doubly linked list will have a Head node as well as a tail node, and whenever a key is used we will place it just next to the head node,in this fashions, the one\\'s which are closer to head are the most recently used ones, and as we go closer to the tail node, those are the less recently used ones while the node just previous to tail is the \"LEAST RECENTLY USED\". \\nSo whenever we add a key or use a key(get()), we will move it right after the head node, and whenever we call the (put() function), if size if greater we have to delete the LRU node, if key is not present, (if present then too we will delete that node so as to update the value and still move it right after head node), and place new node right after head node.                        \\n\\n\\n**Ask Furthur Doubts in the Comment Section**\\n# Code\\n```\\nclass LRUCache {\\npublic:\\nclass node\\n{\\n  public:\\n  int key;\\n  int val;\\n  node* next;\\n  node* prev;\\n  node(int _key,int _val)\\n  {\\n    key = _key;\\n    val = _val;\\n  }\\n};\\nnode* head = new node(-1,-1);\\nnode* tail = new node(-1,-1);\\n\\nint size;\\nunordered_map<int,node*>mpp;\\n    LRUCache(int capacity) {\\n       size = capacity; \\n       head->next = tail;\\n       tail->prev = head;  \\n    }\\n\\n    void addNode(node* newNode){\\n       \\n       node* temp = head->next;\\n       newNode->next = temp;\\n       newNode->prev = head;\\n       head->next = newNode;\\n       temp->prev = newNode;\\n    }\\n\\n    void deleteNode(node* delNode){\\n         \\n       node* delprev = delNode->prev;\\n       node* delnext = delNode->next;\\n       delprev->next = delnext;\\n       delnext->prev = delprev;\\n    }\\n    \\n    int get(int _key) {\\n        \\n        if(mpp.count(_key))\\n        {\\n          node* nde = mpp[_key];\\n          int curr = nde->val;\\n          mpp.erase(_key);\\n          deleteNode(nde);\\n          addNode(nde);\\n          mpp[_key] = head->next;\\n          return curr;\\n        }\\n        return -1;\\n    }\\n    \\n    void put(int _key, int value) {\\n        \\n        if(mpp.count(_key))\\n        {\\n           node* nde = mpp[_key];\\n           mpp.erase(_key);\\n           deleteNode(nde);\\n        }\\n        if(mpp.size()==size)\\n        {\\n           mpp.erase(tail->prev->key);\\n           deleteNode(tail->prev);\\n        }\\n        addNode(new node(_key,value));\\n        mpp[_key] = head->next;\\n    }\\n};\\n\\n```\\n![b62ab1be-232a-438f-9524-7d8ca4dbd5fe_1675328166.1161866.png](https://assets.leetcode.com/users/images/8d5343b1-0eb4-4111-a914-40ce968fd034_1675389764.2273676.png)",
        "level": "medium",
        "buggy_code": "\nclass LRUCache {\npublic:\nclass node\n{\n  public:\n  int key;\n  int val;\n  node* next;\n  node* prev;\n  node(int _key,int _val)\n  {\n    key = _key;\n    val = _val;\n  }\n};\nnode* head = new node(-1,-1);\nnode* tail = new node(-1,-1);\n\nint size;\nunordered_map<int,node*>mpp;\n    LRUCache(int capacity) {\n       size = capacity; \n       head->next = tail;\n       tail->prev = head;  \n    }\n\n    void addNode(node* newNode){\n       \n       node* temp = head->next;\n       newNode->next = temp;\n       newNode->prev = head;\n       head->next = newNode;\n       temp->prev = newNode;\n    }\n\n    void deleteNode(node* delNode){\n         \n       node* delprev = delNode->prev;\n       node* delnext = delNode->next;\n       delprev->next = delnext;\n       delnext->prev = delprev;\n    }\n    \n    int get(int _key) {\n        \n        if(mpp.count(_key))\n        {\n          node* nde = mpp[_key];\n          int curr = nde->val;\n          mpp.erase(_key);\n          deleteNode(nde);\n          addNode(nde);\n          mpp[_key] = head->next;\n          return curr;\n        }\n        return -1;\n    }\n    \n    void put(int _key, int value) {\n        \n        if(mpp.count(_key))\n        {\n           node* nde = mpp[_key];\n           mpp.erase(_key);\n           deleteNode(nde);\n        }\n        if(mpp.size()==size)\n        {\n           mpp.erase(tail->prev->key);\n           deleteNode(tail->prev);\n        }\n        addNode(new node(_key,var));\n        mpp[_key] = head->next;\n    }\n};\n",
        "explanations": "\nUsed \"var\" instead of \"value\" in addNode function which is not defined anywhere.\n",
        "fixed_code": "\nLRUCache(int capacity) : size(capacity), head(new node(-1,-1)), tail(new node(-1,-1)) {\n   head->next = tail;\n   tail->prev = head;  \n}\n\nint get(int _key) {\n  ...\n  return curr;\n}\nput(int _key, int value) {\n  if(mpp.count(_key))\n  {\n     node* nde = mpp[_key];\n     mpp.erase(_key);\n     deleteNode(nde);\n  }\n  if(mpp.size()==size)\n  {\n     node* n = tail->prev;\n     mpp.erase(n->key);\n     deleteNode(n);\n  }\n  addNode(new node(_key,value));\n  mpp[_key] = head->next;\n}\n\n",
        "fixing_exp": "\nFixed missing constructor initialization and added variable 'value' in put method",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 2: Char 1: error: a type specifier is required for all declarations",
            "full_compile_error": "Line 2: Char 1: error: a type specifier is required for all declarations\n    2 | LRUCache(int capacity) : size(capacity), head(new node(-1,-1)), tail(new node(-1,-1)) {\n      | ^",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "146",
            "task_finish_time": 1742928794000,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586025738",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "find-the-punishment-number-of-an-integer",
        "description": "Given a positive integer n, return the punishment number of n.\nThe punishment number of n is defined as the sum of the squares of all integers i such that:\n\n1 <= i <= n\nThe decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.",
        "examples": [
            "Input: n = 10\nOutput: 182\nExplanation: There are exactly 3 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1\n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1.\n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0.\nHence, the punishment number of 10 is 1 + 81 + 100 = 182",
            "Input: n = 37\nOutput: 1478\nExplanation: There are exactly 4 integers i that satisfy the conditions in the statement:\n- 1 since 1 * 1 = 1. \n- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. \n- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. \n- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.\nHence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478"
        ],
        "constraints": "1 <= n <= 1000",
        "release_time": 1684675860,
        "oracle_code": "class Solution {\npublic:\n    \n    bool valid(int n, string s,int sum){\n        // empty string indicates we have completed one partition\n        if(s==\"\") if(sum==n) return true;\n\n        // We use backtracking to check for all partitions if it is possible to generate required sum \n        // and if we find sum we immediately return true immediately\n        for(int i=1;i<=s.size();i++){\n            int x  = stoi(s.substr(0,i));\n            if(valid(n, s.substr(i), sum+x)) return true;\n        }\n        \n        //If no partition could add up to required sum n\n        return false;\n    }\n    int punishmentNumber(int n) {\n        int ans = 0;\n\n        //generate all possible squares and check them if they satisfy the given statement\n        for(int i=1;i<=n;i++){\n            int sq = i*i;\n            string x = to_string(sq);\n            if(valid(i,x,0)) ans += i*i;\n        }\n        \n        return ans;\n        \n    }\n};",
        "content": "# Intuition\\nThe main idea of this problem is to generate all non empty partitions of a string using Backtracking.\\n\\nFor example let\\'s  say i = 36, it\\'s square = 36*36 = 1296\\nTo check if some partition of 1296 satisfy given statement, we make all partitions e.g\\n[1,2,9,6], [1,29,6], [1,296], [12,9,6] , [12,96], [129,6]\\n\\nAmong these only [1,29,6] satisfies the constraint.\\n\\nWe only need one of these set to satisfy the statement, hence we break immediately if we find any valid set.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n* Generate all possible squares and check if they satisfy the given statement\\n* To check if a square satisfies the given constraint or not generate all possible partitions using backtracking.\\n* If any single partition satisfy the statement then this square will be added to solution\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity :  O(n*(2^6)), here 6 is the maxm square length that is len(1000*1000) = 6\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    \\n    bool valid(int n, string s,int sum){\\n        // empty string indicates we have completed one partition\\n        if(s==\"\") if(sum==n) return true;\\n\\n        // We use backtracking to check for all partitions if it is possible to generate required sum \\n        // and if we find sum we immediately return true immediately\\n        for(int i=1;i<=s.size();i++){\\n            int x  = stoi(s.substr(0,i));\\n            if(valid(n, s.substr(i), sum+x)) return true;\\n        }\\n        \\n        //If no partition could add up to required sum n\\n        return false;\\n    }\\n    int punishmentNumber(int n) {\\n        int ans = 0;\\n\\n        //generate all possible squares and check them if they satisfy the given statement\\n        for(int i=1;i<=n;i++){\\n            int sq = i*i;\\n            string x = to_string(sq);\\n            if(valid(i,x,0)) ans += i*i;\\n        }\\n        \\n        return ans;\\n        \\n    }\\n};\\n```",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    \n    bool valid(int n, string s,int sum){\n        // empty string indicates we have completed one partition\n        if(s==\"\") if(sum==n) return true;\n\n        // We use backtracking to check for all partitions if it is possible to generate required sum \n        // and if we find sum we immediately return true immediately\n        for(int i=1;i<=s.size();i++){\n            int x  = parseInt(s.substr(0,i));\n            if(valid(n, s.substr(i), sum+x)) return true;\n        }\n        \n        //If no partition could add up to required sum n\n        return false;\n    }\n    int punishmentNumber(int n) {\n        int ans = 0;\n\n        //generate all possible squares and check them if they satisfy the given statement\n        for(int i=1;i<=n;i++){\n            int sq = i*i;\n            string x = to_string(sq);\n            if(valid(i,x,0)) ans += i*i;\n        }\n        \n        return ans;\n        \n    }\n};\n",
        "explanations": "\nparseInt is not a valid function in C++, it should be stoi.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    bool valid(int n, string s,int sum){\n        if(s.empty() && sum == n) return true;\n        for(int i=1;i<=s.size();i++){\n            int x = stoi(s.substr(0,i));\n            if(valid(n, s.substr(i), sum+x)) return true;\n        }\n        return false;\n    }\n    int punishmentNumber(int n) {\n        int ans = 0;\n        for(int i=1;i<=n;i++){\n            int sq = i*i;\n            string x = to_string(sq);\n            if(valid(i,x,0)) ans += i*i;\n        }\n        return ans;\n    }\n};\n",
        "fixing_exp": "\nFixed the bug by using `s.empty()` instead of comparing with an empty string, and also used `stoi` function for integer parsing",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "286 ms",
            "memory": 11192000,
            "display_runtime": "286",
            "question_id": "2802",
            "elapsed_time": 313,
            "compare_result": "111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928804485,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 216,
            "total_testcases": 216,
            "runtime_percentile": 24.601600000000044,
            "status_memory": "11.2 MB",
            "memory_percentile": 35.816,
            "pretty_lang": "C++",
            "submission_id": "1586025897",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "closest-nodes-queries-in-a-binary-search-tree",
        "description": "You are given the root of a binary search tree and an array queries of size n consisting of positive integers.\nFind a 2D array answer of size n where answer[i] = [mini, maxi]:\n\nmini is the largest value in the tree that is smaller than or equal to queries[i]. If a such value does not exist, add -1 instead.\nmaxi is the smallest value in the tree that is greater than or equal to queries[i]. If a such value does not exist, add -1 instead.\n\nReturn the array answer.",
        "examples": [
            "Input: root = [6,2,13,1,4,9,15,null,null,null,null,null,null,14], queries = [2,5,16]\nOutput: [[2,2],[4,6],[15,-1]]\nExplanation: We answer the queries in the following way:\n- The largest number that is smaller or equal than 2 in the tree is 2, and the smallest number that is greater or equal than 2 is still 2. So the answer for the first query is [2,2].\n- The largest number that is smaller or equal than 5 in the tree is 4, and the smallest number that is greater or equal than 5 is 6. So the answer for the second query is [4,6].\n- The largest number that is smaller or equal than 16 in the tree is 15, and the smallest number that is greater or equal than 16 does not exist. So the answer for the third query is [15,-1].",
            "Input: root = [4,null,9], queries = [3]\nOutput: [[-1,4]]\nExplanation: The largest number that is smaller or equal to 3 in the tree does not exist, and the smallest number that is greater or equal to 3 is 4. So the answer for the query is [-1,4]."
        ],
        "constraints": "The number of nodes in the tree is in the range [2, 105].\n1 <= Node.val <= 106\nn == queries.length\n1 <= n <= 105\n1 <= queries[i] <= 106",
        "release_time": 1668964996,
        "oracle_code": "/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n \nclass Solution {\npublic:\n        void dfs(TreeNode* root, vector<int>& bv){\n            if (root==NULL)return;\n            if (root->left)dfs(root->left,bv);\n            bv.push_back(root->val);\n            if (root->right)dfs(root->right,bv);\n        }\n\t\t\n        int min1(vector<int>& bv, int val){\n            int ans= -1;\n            int i=0; int j= bv.size()-1;\n            while (i<=j){\n                int mid= i+ (j-i)/2;\n                if (val== bv[mid])return val;\n                if (val> bv[mid]){\n                    ans= bv[mid];\n                    i= mid+1;\n                }\n                else j= mid-1;\n            }\n            return ans;\n        }\n\t\t\n    int max1(vector<int>& bv,int val){\n        int ans= -1;\n        int i=0; int j= bv.size()-1;\n        while (i<=j){\n            int mid= i+ (j-i)/2;\n            if (val== bv[mid])return val;\n            if (val < bv[mid]){\n                ans= bv[mid];\n                j= mid-1;\n            }\n            else i= mid+1;\n        }\n        return ans;\n    }\n\t\n        vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {\n        vector<int> bv;\n        vector<vector<int>> ans;\n        //dfs se sorted list banate hai.\n        dfs(root,bv);\n        for (auto q: queries){\n            int lb= min1(bv,q);\n            int ub= max1(bv,q);\n            ans.push_back({lb,ub});\n        }\n        return ans;\n    }\n    \n};",
        "content": "Here is my C++ solution :-\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n \\nclass Solution {\\npublic:\\n        void dfs(TreeNode* root, vector<int>& bv){\\n            if (root==NULL)return;\\n            if (root->left)dfs(root->left,bv);\\n            bv.push_back(root->val);\\n            if (root->right)dfs(root->right,bv);\\n        }\\n\\t\\t\\n        int min1(vector<int>& bv, int val){\\n            int ans= -1;\\n            int i=0; int j= bv.size()-1;\\n            while (i<=j){\\n                int mid= i+ (j-i)/2;\\n                if (val== bv[mid])return val;\\n                if (val> bv[mid]){\\n                    ans= bv[mid];\\n                    i= mid+1;\\n                }\\n                else j= mid-1;\\n            }\\n            return ans;\\n        }\\n\\t\\t\\n    int max1(vector<int>& bv,int val){\\n        int ans= -1;\\n        int i=0; int j= bv.size()-1;\\n        while (i<=j){\\n            int mid= i+ (j-i)/2;\\n            if (val== bv[mid])return val;\\n            if (val < bv[mid]){\\n                ans= bv[mid];\\n                j= mid-1;\\n            }\\n            else i= mid+1;\\n        }\\n        return ans;\\n    }\\n\\t\\n        vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {\\n        vector<int> bv;\\n        vector<vector<int>> ans;\\n        //dfs se sorted list banate hai.\\n        dfs(root,bv);\\n        for (auto q: queries){\\n            int lb= min1(bv,q);\\n            int ub= max1(bv,q);\\n            ans.push_back({lb,ub});\\n        }\\n        return ans;\\n    }\\n    \\n};\\n```",
        "level": "medium",
        "buggy_code": "\n/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n \nclass Solution {\npublic:\n        void dfs(TreeNode* root, List<int>& bv){\n            if (root==NULL)return;\n            if (root->left)dfs(root->left,bv);\n            bv.add(root->val);\n            if (root->right)dfs(root->right,bv);\n        }\n\t\t\n        int min1(List<int>& bv, int val){\n            int ans= -1;\n            int i=0; int j= bv.size()-1;\n            while (i<=j){\n                int mid= i+ (j-i)/2;\n                if (val== bv[mid])return val;\n                if (val> bv[mid]){\n                    ans= bv[mid];\n                    i= mid+1;\n                }\n                else j= mid-1;\n            }\n            return ans;\n        }\n\t\t\n    int max1(List<int>& bv,int val){\n        int ans= -1;\n        int i=0; int j= bv.size()-1;\n        while (i<=j){\n            int mid= i+ (j-i)/2;\n            if (val== bv[mid])return val;\n            if (val < bv[mid]){\n                ans= bv[mid];\n                j= mid-1;\n            }\n            else i= mid+1;\n        }\n        return ans;\n    }\n\t\n        ArrayList<ArrayList<int>> closestNodes(TreeNode* root, List<int>& queries) {\n        List<int> bv;\n        ArrayList<ArrayList<int>> ans;\n        dfs(root,bv);\n        for (auto q: queries){\n            int lb= min1(bv,q);\n            int ub= max1(bv,q);\n            ans.add({lb,ub});\n        }\n        return ans;\n    }\n    \n};\n",
        "explanations": "\nThe usage of Java's List and ArrayList are undefined keywords and cannot be used in C++ code.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    ArrayList<ArrayList<int>> closestNodes(TreeNode* root, List<int>& queries) {\n        vector<int> bv;\n        vector<vector<int>> ans;\n        dfs(root,bv);\n        for (auto q: queries){\n            int lb= min1(bv,q);\n            int ub= max1(bv,q);\n            ans.push_back({lb,ub});\n        }\n        return ans;\n    }\n    \n",
        "fixing_exp": "\nThe bugs were incorrect function calls and missing namespace. The functions \"List\" and \"ArrayList\" are from different namespace, they should be declared correctly using the respective namespaces",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 4: Char 15: error: use of undeclared identifier 'ArrayList'",
            "full_compile_error": "Line 4: Char 15: error: use of undeclared identifier 'ArrayList'\n    4 |     ArrayList<ArrayList<int>> closestNodes(TreeNode* root, List<int>& queries) {\n      |               ^",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "2567",
            "task_finish_time": 1742928814525,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586026089",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "find-first-palindromic-string-in-the-array",
        "description": "Given an array of strings words, return the first palindromic string in the array. If there is no such string, return an empty string \"\".\nA string is palindromic if it reads the same forward and backward.",
        "examples": [
            "Input: words = [\"abc\",\"car\",\"ada\",\"racecar\",\"cool\"]\nOutput: \"ada\"\nExplanation: The first string that is palindromic is \"ada\".\nNote that \"racecar\" is also palindromic, but it is not the first.",
            "Input: words = [\"notapalindrome\",\"racecar\"]\nOutput: \"racecar\"\nExplanation: The first and only string that is palindromic is \"racecar\".",
            "Input: words = [\"def\",\"ghi\"]\nOutput: \"\"\nExplanation: There are no palindromic strings, so the empty string is returned."
        ],
        "constraints": "1 <= words.length <= 100\n1 <= words[i].length <= 100\nwords[i] consists only of lowercase English letters.",
        "release_time": 1678731739,
        "oracle_code": "class Solution {\npublic:\n    //check for palindrome, return true if it.\n    bool check(string &word)\n    {\n        int l = 0;\n        int r = word.size()-1;\n\n        while(l<r)\n        {\n            if(word[l] != word[r])\n            {\n                return false;\n            }\n            l++;\n             r--;\n        }\n        return true;\n\n    }\n    string firstPalindrome(vector<string>& words) {\n        for(int i=0;i<words.size();i++)\n        {\n            if(check(words[i]))\n            return words[i];\n        }\n\n        return \"\";\n        \n    }\n};",
        "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    //check for palindrome, return true if it.\\n    bool check(string &word)\\n    {\\n        int l = 0;\\n        int r = word.size()-1;\\n\\n        while(l<r)\\n        {\\n            if(word[l] != word[r])\\n            {\\n                return false;\\n            }\\n            l++;\\n             r--;\\n        }\\n        return true;\\n\\n    }\\n    string firstPalindrome(vector<string>& words) {\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(check(words[i]))\\n            return words[i];\\n        }\\n\\n        return \"\";\\n        \\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    //check for palindrome, return true if it.\n    bool check(string &word)\n    {\n        int l = 0;\n        var r = word.size()-1;\n\n        while(l<r)\n        {\n            if(word[l] != word[r])\n            {\n                return false;\n            }\n            l++;\n             r--;\n        }\n        return true;\n\n    }\n    string firstPalindrome(vector<string>& words) {\n        for(int i=0;i<words.size();i++)\n        {\n            if(check(words[i]))\n            return words[i];\n        }\n\n        return \"\";\n        \n    }\n};\n",
        "explanations": "\nThe bug is the use of var, a JavaScript keyword, in place of int in C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    //check for palindrome, return true if it.\n    bool check(string &word)\n    {\n        int l = 0;\n        int r = word.size()-1;\n\n        while(l<r)\n        {\n            if(word[l] != word[r])\n            {\n                return false;\n            }\n            l++;\n            r--;\n        }\n        return true;\n\n    }\n    string firstPalindrome(vector<string>& words) {\n        for(int i=0;i<words.size();i++)\n        {\n            if(check(words[i]))\n                return words[i];\n        }\n\n        return \"\";\n        \n    }\n};\n",
        "fixing_exp": "\nAdded missing type keyword 'int' for variable declaration",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "0 ms",
            "memory": 23388000,
            "display_runtime": "0",
            "question_id": "2231",
            "elapsed_time": 60,
            "compare_result": "11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928968529,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 266,
            "total_testcases": 266,
            "runtime_percentile": 100,
            "status_memory": "23.4 MB",
            "memory_percentile": 87.32400000000001,
            "pretty_lang": "C++",
            "submission_id": "1586028887",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "a-number-after-a-double-reversal",
        "description": "Reversing an integer means to reverse all its digits.\n\nFor example, reversing 2021 gives 1202. Reversing 12300 gives 321 as the leading zeros are not retained.\n\nGiven an integer num, reverse num to get reversed1, then reverse reversed1 to get reversed2. Return true if reversed2 equals num. Otherwise return false.",
        "examples": [
            "Input: num = 526\nOutput: true\nExplanation: Reverse num to get 625, then reverse 625 to get 526, which equals num.",
            "Input: num = 1800\nOutput: false\nExplanation: Reverse num to get 81, then reverse 81 to get 18, which does not equal num.",
            "Input: num = 0\nOutput: true\nExplanation: Reverse num to get 0, then reverse 0 to get 0, which equals num."
        ],
        "constraints": "0 <= num <= 106",
        "release_time": 1673071723,
        "oracle_code": "class Solution {\npublic:\n    bool isSameAfterReversals(int num) {\n        string ans=to_string(num);\n        reverse(ans.begin(), ans.end());\n        int ab=stoi(ans);\n        string ans2=to_string(ab);\n        reverse(ans2.begin(), ans2.end());\n        int ba=stoi(ans2);\n        if(ba==num) return true;\n        return false;\n    }\n};",
        "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    bool isSameAfterReversals(int num) {\\n        string ans=to_string(num);\\n        reverse(ans.begin(), ans.end());\\n        int ab=stoi(ans);\\n        string ans2=to_string(ab);\\n        reverse(ans2.begin(), ans2.end());\\n        int ba=stoi(ans2);\\n        if(ba==num) return true;\\n        return false;\\n    }\\n};\\n```",
        "level": "easy",
        "buggy_code": "\nclass Solution {\npublic:\n    bool isSameAfterReversals(int num) {\n        string ans=to_string(num);\n        reverse(ans.begin(), ans.end());\n        var ab=stoi(ans);\n        string ans2=to_string(ab);\n        reverse(ans2.begin(), ans2.end());\n        int ba=stoi(ans2);\n        if(ba==num) return true;\n        return false;\n    }\n};\n",
        "explanations": "\nThe bug is the \"var\" keyword which is not defined in C++ languages. \n",
        "fixed_code": "\nclass Solution {\npublic:\n    bool isSameAfterReversals(int num) {\n        string s = to_string(num);\n        reverse(s.begin(), s.end());\n        int rev_num = stoi(s);\n        if (rev_num == num || (num % 10) == (rev_num / 10)) return true;\n        return false;\n    }\n};\n",
        "fixing_exp": "\nThe bug was that the function did not consider the case where the original number ends with 0 and becomes a single digit after reversal",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 11,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "N/A",
            "memory": 7676000,
            "display_runtime": "0",
            "question_id": "2238",
            "elapsed_time": 10,
            "compare_result": "011000000110000000110010000100000000000010010000010100001000000000100000001001000111010100000000010000100000100001010110000000111",
            "code_output": "false",
            "std_output": "",
            "last_testcase": "526",
            "expected_output": "true",
            "task_finish_time": 1742928978531,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 31,
            "total_testcases": 129,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586029068",
            "input_formatted": "526",
            "input": "526",
            "status_msg": "Wrong Answer",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "most-beautiful-item-for-each-query",
        "description": "You are given a 2D integer array items where items[i] = [pricei, beautyi] denotes the price and beauty of an item respectively.\nYou are also given a 0-indexed integer array queries. For each queries[j], you want to determine the maximum beauty of an item whose price is less than or equal to queries[j]. If no such item exists, then the answer to this query is 0.\nReturn an array answer of the same length as queries where answer[j] is the answer to the jth query.",
        "examples": [
            "Input: items = [[1,2],[3,2],[2,4],[5,6],[3,5]], queries = [1,2,3,4,5,6]\nOutput: [2,4,5,5,6,6]\nExplanation:\n- For queries[0]=1, [1,2] is the only item which has price <= 1. Hence, the answer for this query is 2.\n- For queries[1]=2, the items which can be considered are [1,2] and [2,4]. \n  The maximum beauty among them is 4.\n- For queries[2]=3 and queries[3]=4, the items which can be considered are [1,2], [3,2], [2,4], and [3,5].\n  The maximum beauty among them is 5.\n- For queries[4]=5 and queries[5]=6, all items can be considered.\n  Hence, the answer for them is the maximum beauty of all items, i.e., 6.",
            "Input: items = [[1,2],[1,2],[1,3],[1,4]], queries = [1]\nOutput: [4]\nExplanation: \nThe price of every item is equal to 1, so we choose the item with the maximum beauty 4. \nNote that multiple items can have the same price and/or beauty.",
            "Input: items = [[10,1000]], queries = [5]\nOutput: [0]\nExplanation:\nNo item has a price less than or equal to 5, so no item can be chosen.\nHence, the answer to the query is 0."
        ],
        "constraints": "1 <= items.length, queries.length <= 105\nitems[i].length == 2\n1 <= pricei, beautyi, queries[j] <= 109",
        "release_time": 1664512625,
        "oracle_code": "class Solution {\n    int bs(vector<vector<int>>& items, int t, vector<int> &beauty) {\n        int ans = 0, s = 0, e = items.size() - 1;\n        while(s <= e) {\n            int m = (s + e) / 2;\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\n            else e = m - 1;\n        }\n        return ans;\n    }\n\npublic:\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\n        sort(items.begin(), items.end());\n        vector<int> ans, beauty(items.size(), items[0][1]);\n\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\n\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\n        return ans;\n    }\n};",
        "content": "\\n# C++\\n```\\nclass Solution {\\n    int bs(vector<vector<int>>& items, int t, vector<int> &beauty) {\\n        int ans = 0, s = 0, e = items.size() - 1;\\n        while(s <= e) {\\n            int m = (s + e) / 2;\\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\\n            else e = m - 1;\\n        }\\n        return ans;\\n    }\\n\\npublic:\\n    vector<int> maximumBeauty(vector<vector<int>>& items, vector<int>& queries) {\\n        sort(items.begin(), items.end());\\n        vector<int> ans, beauty(items.size(), items[0][1]);\\n\\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\\n\\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\\n        return ans;\\n    }\\n};\\n```\\n\\n# Python\\n```\\nclass Solution(object):\\n    def maximumBeauty(self, items, queries):\\n        items.sort()\\n        ans, beauty = [], [items[0][1]] * len(items)\\n        for i in range(1, len(items)): beauty[i] = max(beauty[i - 1], items[i][1])\\n\\n        def bs(t):\\n            ans, s, e = 0, 0, len(items) - 1\\n            while s <= e:\\n                m = (s + e) // 2\\n                if items[m][0] <= t:\\n                    ans = beauty[m]\\n                    s = m + 1\\n                else: e = m - 1\\n            return ans\\n\\n        for i in queries: ans.append(bs(i))\\n        return ans\\n```\\n",
        "level": "medium",
        "buggy_code": "\nclass Solution {\n    int bs(vector<vector<Integer>>& items, int t, vector<int> &beauty) {\n        int ans = 0, s = 0, e = items.size() - 1;\n        while(s <= e) {\n            int m = (s + e) / 2;\n            if(items[m][0] <= t) ans = beauty[m], s = m + 1;\n            else e = m - 1;\n        }\n        return ans;\n    }\n\npublic:\n    vector<int> maximumBeauty(vector<vector<Integer>>& items, vector<int>& queries) {\n        sort(items.begin(), items.end());\n        vector<int> ans, beauty(items.size(), items[0][1]);\n\n        for(int i=1; i<items.size(); i++) beauty[i] = max(beauty[i - 1], items[i][1]);\n\n        for(int i : queries) ans.push_back(bs(items, i, beauty));\n        return ans;\n    }\n};\n",
        "explanations": "\nThe bug is the usage of 'Integer' which is a type from Java, not C++.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    vector<int> maximumBeauty(vector<vector<Integer>>& items, vector<int>& queries) {\n        sort(items.begin(), items.end());\n        vector<int> ans, beauty(items.size());\n\n        for(int i = 0; i < items.size(); i++) {\n            if(i == 0) beauty[i] = items[i][1];\n            else beauty[i] = max(beauty[i-1], items[i][1]);\n        }\n\n        for(int i : queries) ans.push_back(lower_bound(beauty.begin(), beauty.end(), i) - beauty.begin());\n        return ans;\n    }\n};\n",
        "fixing_exp": "\nThe problem is that the code didn't initialize the 'beauty' vector correctly. Also, it was trying to find the maximum beauty at each query point instead of finding the highest beauty that is not more than the query time",
        "test_result_bool": false,
        "test_result_dict": {
            "status_code": 20,
            "lang": "cpp",
            "run_success": false,
            "compile_error": "Line 4: Char 45: error: use of undeclared identifier 'Integer'",
            "full_compile_error": "Line 4: Char 45: error: use of undeclared identifier 'Integer'\n    4 |     vector<int> maximumBeauty(vector<vector<Integer>>& items, vector<int>& queries) {\n      |                                             ^\n1 error generated.",
            "status_runtime": "N/A",
            "memory": 0,
            "question_id": "2179",
            "task_finish_time": 1742928988434,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": null,
            "total_testcases": null,
            "runtime_percentile": null,
            "status_memory": "N/A",
            "memory_percentile": null,
            "pretty_lang": "C++",
            "submission_id": "1586029258",
            "status_msg": "Compile Error",
            "state": "SUCCESS"
        }
    },
    {
        "slug": "sort-an-array",
        "description": "Given an array of integers nums, sort the array in ascending order and return it.\nYou must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.",
        "examples": [
            "Input: nums = [5,2,3,1]\nOutput: [1,2,3,5]\nExplanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).",
            "Input: nums = [5,1,1,2,0,0]\nOutput: [0,0,1,1,2,5]\nExplanation: Note that the values of nums are not necessairly unique."
        ],
        "constraints": "1 <= nums.length <= 5 * 104\n-5 * 104 <= nums[i] <= 5 * 104",
        "release_time": 1677690796,
        "oracle_code": "class Solution {\npublic:\n    void merge(int low, int mid, int high, vector<int> &nums) {\n        if (low >= high) \n        return;\n        int l = low, r = mid + 1, k = 0, size = high - low + 1;\n        vector<int> sorted(size, 0);\n        while (l <= mid and r <= high)\n            sorted[k++] = nums[l] < nums[r] ? nums[l++] : nums[r++];\n        while (l <= mid) \n            sorted[k++] = nums[l++];\n        while (r <= high) \n            sorted[k++] = nums[r++];\n        for (k = 0; k < size; k++)\n            nums[k + low] = sorted[k];\n    }\n\n    void mergeSort(vector<int>& nums, int start, int end){\n        if(start < end){\n            int mid = start + (end - start) / 2;\n            mergeSort(nums, start, mid);\n            mergeSort(nums, mid + 1, end);\n            merge(start, mid, end, nums);\n        }\n    }\n\n    vector<int> sortArray(vector<int>& nums) {\n        mergeSort(nums, 0, nums.size()-1);\n        return nums;\n    }\n};",
        "content": "# Approach\\nThis is an implementation of the merge sort algorithm in C++. The merge sort algorithm uses a divide-and-conquer approach to sort a given array by recursively dividing the input array into two halves, sorting them separately, and then merging them back together in the correct order.\\n\\nThe merge function takes in four parameters: low, mid, high, and nums. low and high represent the indices of the start and end of the subarray that needs to be merged, respectively. mid represents the index of the middle element of the subarray. nums is a reference to the vector of integers that needs to be sorted.\\n\\nIn the merge function, a new vector sorted of size high - low + 1 is created to store the sorted subarray. The two halves of the subarray are then compared and merged into sorted using a while loop. Finally, the sorted subarray is copied back into the original array nums using a for loop.\\n\\nThe mergeSort function takes in three parameters: nums, start, and end. nums is a reference to the vector of integers that needs to be sorted. start and end represent the indices of the start and end of the subarray that needs to be sorted, respectively. In the mergeSort function, the input subarray is recursively divided into two halves using mid, and each half is sorted using the mergeSort function. The merge function is then called to merge the two sorted halves back together in the correct order.\\n\\nFinally, the sortArray function takes in a reference to the vector of integers that needs to be sorted and calls the mergeSort function to sort the entire array. It then returns the sorted array.\\n\\n\\n\\n# Complexity\\n- Time complexity:\\nO(nlogn)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    void merge(int low, int mid, int high, vector<int> &nums) {\\n        if (low >= high) \\n        return;\\n        int l = low, r = mid + 1, k = 0, size = high - low + 1;\\n        vector<int> sorted(size, 0);\\n        while (l <= mid and r <= high)\\n            sorted[k++] = nums[l] < nums[r] ? nums[l++] : nums[r++];\\n        while (l <= mid) \\n            sorted[k++] = nums[l++];\\n        while (r <= high) \\n            sorted[k++] = nums[r++];\\n        for (k = 0; k < size; k++)\\n            nums[k + low] = sorted[k];\\n    }\\n\\n    void mergeSort(vector<int>& nums, int start, int end){\\n        if(start < end){\\n            int mid = start + (end - start) / 2;\\n            mergeSort(nums, start, mid);\\n            mergeSort(nums, mid + 1, end);\\n            merge(start, mid, end, nums);\\n        }\\n    }\\n\\n    vector<int> sortArray(vector<int>& nums) {\\n        mergeSort(nums, 0, nums.size()-1);\\n        return nums;\\n    }\\n};",
        "level": "medium",
        "buggy_code": "\nclass Solution {\npublic:\n    void merge(int low, int mid, int high, Array<int> &nums) {\n        if (low >= high) \n        return;\n        int l = low, r = mid + 1, k = 0, size = high - low + 1;\n        Array<int> sorted(size, 0);\n        while (l <= mid and r <= high)\n            sorted[k++] = nums[l] < nums[r] ? nums[l++] : nums[r++];\n        while (l <= mid) \n            sorted[k++] = nums[l++];\n        while (r <= high) \n            sorted[k++] = nums[r++];\n        for (k = 0; k < size; k++)\n            nums[k + low] = sorted[k];\n    }\n\n    void mergeSort(Array<int>& nums, int start, int end){\n        if(start < end){\n            int mid = start + (end - start) / 2;\n            mergeSort(nums, start, mid);\n            mergeSort(nums, mid + 1, end);\n            merge(start, mid, end, nums);\n        }\n    }\n\n    Array<int> sortArray(Array<int>& nums) {\n        mergeSort(nums, 0, nums.size()-1);\n        return nums;\n    }\n};\n",
        "explanations": "\nUsed \"Array\" that is undefined in C++, should use \"vector\" instead.\n",
        "fixed_code": "\nclass Solution {\npublic:\n    void merge(int low, int mid, int high, vector<int>& nums) {\n        if (low >= high) \n            return;\n        int l = low, r = mid + 1, k = 0, size = high - low + 1;\n        vector<int> sorted(size);\n        while (l <= mid and r <= high)\n            sorted[k++] = min(nums[l], nums[r]) == nums[l] ? nums[l++] : nums[r++];\n        while (l <= mid) \n            sorted[k++] = nums[l++];\n        while (r <= high) \n            sorted[k++] = nums[r++];\n        for (k = 0; k < size; k++)\n            nums[k + low] = sorted[k];\n    }\n\n    void mergeSort(vector<int>& nums, int start, int end){\n        if(start < end){\n            int mid = start + (end - start) / 2;\n            mergeSort(nums, start, mid);\n            mergeSort(nums, mid + 1, end);\n            merge(start, mid, end, nums);\n        }\n    }\n\n    vector<int> sortArray(vector<int>& nums) {\n        mergeSort(nums, 0, nums.size()-1);\n        return nums;\n    }\n};\n",
        "fixing_exp": "\nFixed the Array type to vector and used min function to compare elements during merging",
        "test_result_bool": true,
        "test_result_dict": {
            "status_code": 10,
            "lang": "cpp",
            "run_success": true,
            "status_runtime": "246 ms",
            "memory": 146788000,
            "display_runtime": "246",
            "question_id": "948",
            "elapsed_time": 354,
            "compare_result": "111111111111111111111",
            "code_output": "",
            "std_output": "",
            "last_testcase": "",
            "expected_output": "",
            "task_finish_time": 1742928999848,
            "task_name": "judger.judgetask.Judge",
            "finished": true,
            "total_correct": 21,
            "total_testcases": 21,
            "runtime_percentile": 49.69040000000014,
            "status_memory": "146.8 MB",
            "memory_percentile": 37.96140000000011,
            "pretty_lang": "C++",
            "submission_id": "1586029463",
            "status_msg": "Accepted",
            "state": "SUCCESS"
        }
    }
]